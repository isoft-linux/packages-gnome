diff -Nur gnome-online-accounts-3.14.0/configure.ac gnome-online-accounts-3.14.0n/configure.ac
--- gnome-online-accounts-3.14.0/configure.ac	2014-09-23 14:42:25.000000000 +0000
+++ gnome-online-accounts-3.14.0n/configure.ac	2014-10-21 11:13:28.269408778 +0000
@@ -90,10 +90,6 @@
 AC_SUBST(GTK_CFLAGS)
 AC_SUBST(GTK_LIBS)
 
-PKG_CHECK_MODULES(WEBKIT_GTK, [webkitgtk-3.0 >= 2.1.90])
-AC_SUBST(WEBKIT_GTK_CFLAGS)
-AC_SUBST(WEBKIT_GTK_LIBS)
-
 PKG_CHECK_MODULES(LIBSOUP, [libsoup-2.4 >= 2.41])
 AC_SUBST(LIBSOUP_CFLAGS)
 AC_SUBST(LIBSOUP_LIBS)
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/Makefile.am gnome-online-accounts-3.14.0n/src/goabackend/Makefile.am
--- gnome-online-accounts-3.14.0/src/goabackend/Makefile.am	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/Makefile.am	2014-10-21 11:11:28.730048359 +0000
@@ -79,21 +79,12 @@
 	goasmtpauth.h			goasmtpauth.c			\
 	goamailclient.h			goamailclient.c			\
 	goaexchangeprovider.h		goaexchangeprovider.c		\
-	goaoauthprovider.h		goaoauthprovider.c		\
-	goaoauth2provider.h		goaoauth2provider.c		\
-	goagoogleprovider.h		goagoogleprovider.c		\
-	goafacebookprovider.h		goafacebookprovider.c		\
 	goaimapsmtpprovider.h		goaimapsmtpprovider.c		\
 	goamediaserverprovider.h	goamediaserverprovider.c	\
 	goaowncloudprovider.h		goaowncloudprovider.c		\
-	goayahooprovider.h		goayahooprovider.c		\
-	goaflickrprovider.h		goaflickrprovider.c		\
-	goawindowsliveprovider.h	goawindowsliveprovider.c	\
 	goatelepathyfactory.h		goatelepathyfactory.c		\
 	goatelepathyprovider.h		goatelepathyprovider.c		\
-	goapocketprovider.h		goapocketprovider.c		\
 	goautils.h			goautils.c			\
-	goawebview.h			goawebview.c			\
 	nautilus-floating-bar.h		nautilus-floating-bar.c		\
 	$(top_builddir)/src/goaidentity/org.gnome.Identity.c		\
 	$(top_builddir)/src/goaidentity/org.freedesktop.realmd.c	\
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goafacebookprovider.c gnome-online-accounts-3.14.0n/src/goabackend/goafacebookprovider.c
--- gnome-online-accounts-3.14.0/src/goabackend/goafacebookprovider.c	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goafacebookprovider.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,521 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011, 2012, 2013, 2014 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "config.h"
-#include <glib/gi18n-lib.h>
-
-#include <rest/rest-proxy.h>
-#include <json-glib/json-glib.h>
-
-#include "goaprovider.h"
-#include "goaprovider-priv.h"
-#include "goaoauth2provider.h"
-#include "goafacebookprovider.h"
-
-/**
- * GoaFacebookProvider:
- *
- * The #GoaFacebookProvider structure contains only private data and should
- * only be accessed using the provided API.
- */
-struct _GoaFacebookProvider
-{
-  /*< private >*/
-  GoaOAuth2Provider parent_instance;
-};
-
-typedef struct _GoaFacebookProviderClass GoaFacebookProviderClass;
-
-struct _GoaFacebookProviderClass
-{
-  GoaOAuth2ProviderClass parent_class;
-};
-
-/**
- * SECTION:goafacebookprovider
- * @title: GoaFacebookProvider
- * @short_description: A provider for Facebook
- *
- * #GoaFacebookProvider is used for handling Facebook accounts.
- */
-
-G_DEFINE_TYPE_WITH_CODE (GoaFacebookProvider, goa_facebook_provider, GOA_TYPE_OAUTH2_PROVIDER,
-                         goa_provider_ensure_extension_points_registered ();
-                         g_io_extension_point_implement (GOA_PROVIDER_EXTENSION_POINT_NAME,
-							 g_define_type_id,
-							 GOA_FACEBOOK_NAME,
-							 0));
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static const gchar *
-get_provider_type (GoaProvider *_provider)
-{
-  return GOA_FACEBOOK_NAME;
-}
-
-static gchar *
-get_provider_name (GoaProvider *_provider,
-                   GoaObject   *object)
-{
-  return g_strdup (_("Facebook"));
-}
-
-static GoaProviderGroup
-get_provider_group (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_GROUP_BRANDED;
-}
-
-static GoaProviderFeatures
-get_provider_features (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_FEATURE_BRANDED |
-         GOA_PROVIDER_FEATURE_CHAT |
-         GOA_PROVIDER_FEATURE_PHOTOS |
-         GOA_PROVIDER_FEATURE_MAPS;
-}
-
-/* facebook client flow sends a different auth query then the base
- * OAuth2Provider */
-static gchar *
-build_authorization_uri (GoaOAuth2Provider  *provider,
-                         const gchar        *authorization_uri,
-                         const gchar        *escaped_redirect_uri,
-                         const gchar        *escaped_client_id,
-                         const gchar        *escaped_scope)
-{
-  gchar *uri;
-
-  uri = g_strdup_printf ("%s"
-                          "?response_type=token"
-                          "&display=popup"
-                          "&redirect_uri=%s"
-                          "&client_id=%s"
-                          "&scope=%s",
-                          authorization_uri,
-                          escaped_redirect_uri,
-                          escaped_client_id,
-                          escaped_scope);
-  return uri;
-}
-
-static const gchar *
-get_authorization_uri (GoaOAuth2Provider *provider)
-{
-  return "https://www.facebook.com/dialog/oauth";
-}
-
-static const gchar *
-get_redirect_uri (GoaOAuth2Provider *provider)
-{
-  return "https://www.facebook.com/connect/login_success.html";
-}
-
-static const gchar *
-get_scope (GoaOAuth2Provider *provider)
-{
-  /* see https://developers.facebook.com/docs/authentication/permissions/ */
-  /* Note: Email is requested to obtain a human understandable unique Id  */
-  return
-    "user_events,"
-    "read_mailbox,"
-    "xmpp_login,"
-    "email,"
-    "user_photos,"
-    "user_status,"
-    "publish_actions";
-}
-
-static guint
-get_credentials_generation (GoaProvider *provider)
-{
-  return 2;
-}
-
-static const gchar *
-get_client_id (GoaOAuth2Provider *provider)
-{
-  return GOA_FACEBOOK_CLIENT_ID;
-}
-
-static const gchar *
-get_client_secret (GoaOAuth2Provider *provider)
-{
-  /* not used in Facebook's Client Flow Auth, we don't want to use anything
-   * even if passed at configture time, since it would interfere with the URL
-   * creation */
-  return NULL;
-}
-
-static const gchar *
-get_authentication_cookie (GoaOAuth2Provider *provider)
-{
-  return "c_user";
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-get_identity_sync (GoaOAuth2Provider  *provider,
-                   const gchar        *access_token,
-                   gchar             **out_presentation_identity,
-                   GCancellable       *cancellable,
-                   GError            **error)
-{
-  GError *identity_error;
-  RestProxy *proxy;
-  RestProxyCall *call;
-  JsonParser *parser;
-  JsonObject *json_object;
-  gchar *ret;
-  gchar *id;
-  gchar *presentation_identity;
-
-  ret = NULL;
-
-  identity_error = NULL;
-  proxy = NULL;
-  call = NULL;
-  parser = NULL;
-  id = NULL;
-  presentation_identity = NULL;
-
-  /* TODO: cancellable */
-
-  proxy = rest_proxy_new ("https://graph.facebook.com/me", FALSE);
-  call = rest_proxy_new_call (proxy);
-  rest_proxy_call_set_method (call, "GET");
-  rest_proxy_call_add_param (call, "access_token", access_token);
-
-  if (!rest_proxy_call_sync (call, error))
-    goto out;
-  if (rest_proxy_call_get_status_code (call) != 200)
-    {
-      /* 400 means that the access_token has expired, but there is no reason
-       * to handle it here, in case it is expired AttentionNeeded will be set
-       * to TRUE. Everytime the user logs with a valid access token, the
-       * expiration time for this token will be extended by facebook, allowing
-       * virtually infinite lasting tokens */
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Expected status 200 when requesting your identity, instead got status %d (%s)"),
-                   rest_proxy_call_get_status_code (call),
-                   rest_proxy_call_get_status_message (call));
-      goto out;
-    }
-
-  parser = json_parser_new ();
-  if (!json_parser_load_from_data (parser,
-                                   rest_proxy_call_get_payload (call),
-                                   rest_proxy_call_get_payload_length (call),
-                                   &identity_error))
-    {
-      g_warning ("json_parser_load_from_data() failed: %s (%s, %d)",
-                 identity_error->message,
-                 g_quark_to_string (identity_error->domain),
-                 identity_error->code);
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  json_object = json_node_get_object (json_parser_get_root (parser));
-  id = g_strdup (json_object_get_string_member (json_object, "id"));
-  if (id == NULL)
-    {
-      g_warning ("Did not find id in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-  presentation_identity = g_strdup (json_object_get_string_member (json_object, "email"));
-  if (presentation_identity == NULL)
-    {
-      g_warning ("Did not find email in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  ret = id;
-  id = NULL;
-  if (out_presentation_identity != NULL)
-    {
-      *out_presentation_identity = presentation_identity;
-      presentation_identity = NULL;
-    }
-
- out:
-  g_clear_error (&identity_error);
-  g_clear_object (&call);
-  g_clear_object (&parser);
-  g_clear_object (&proxy);
-  g_free (id);
-  g_free (presentation_identity);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-is_deny_node (GoaOAuth2Provider *provider, WebKitDOMNode *node)
-{
-  return FALSE;
-}
-
-static gboolean
-is_identity_node (GoaOAuth2Provider *provider, WebKitDOMHTMLInputElement *element)
-{
-  gboolean ret;
-  gchar *element_type;
-  gchar *name;
-
-  element_type = NULL;
-  name = NULL;
-
-  ret = FALSE;
-
-  g_object_get (element, "type", &element_type, NULL);
-  if (g_strcmp0 (element_type, "text") != 0)
-    goto out;
-
-  name = webkit_dom_html_input_element_get_name (element);
-  if (g_strcmp0 (name, "email") != 0)
-    goto out;
-
-  ret = TRUE;
-
- out:
-  g_free (element_type);
-  g_free (name);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-build_object (GoaProvider         *provider,
-              GoaObjectSkeleton   *object,
-              GKeyFile            *key_file,
-              const gchar         *group,
-              GDBusConnection     *connection,
-              gboolean             just_added,
-              GError             **error)
-{
-  GoaAccount *account;
-  GoaChat *chat = NULL;
-  GoaPhotos *photos = NULL;
-  GoaMaps *maps = NULL;
-  gboolean chat_enabled;
-  gboolean photos_enabled;
-  gboolean maps_enabled;
-  gboolean ret = FALSE;
-
-  account = NULL;
-
-  /* Chain up */
-  if (!GOA_PROVIDER_CLASS (goa_facebook_provider_parent_class)->build_object (provider,
-                                                                              object,
-                                                                              key_file,
-                                                                              group,
-                                                                              connection,
-                                                                              just_added,
-                                                                              error))
-    goto out;
-
-  account = goa_object_get_account (GOA_OBJECT (object));
-
-  /* Chat */
-  chat = goa_object_get_chat (GOA_OBJECT (object));
-  chat_enabled = g_key_file_get_boolean (key_file, group, "ChatEnabled", NULL);
-  if (chat_enabled)
-    {
-      if (chat == NULL)
-        {
-          chat = goa_chat_skeleton_new ();
-          goa_object_skeleton_set_chat (object, chat);
-        }
-    }
-  else
-    {
-      if (chat != NULL)
-        goa_object_skeleton_set_chat (object, NULL);
-    }
-
-  if (just_added)
-    {
-      goa_account_set_chat_disabled (account, !chat_enabled);
-      g_signal_connect (account,
-                        "notify::chat-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "ChatEnabled");
-    }
-
-  /* Photos */
-  photos = goa_object_get_photos (GOA_OBJECT (object));
-  photos_enabled = g_key_file_get_boolean (key_file, group, "PhotosEnabled", NULL);
-
-  if (photos_enabled)
-    {
-      if (photos == NULL)
-        {
-          photos = goa_photos_skeleton_new ();
-          goa_object_skeleton_set_photos (object, photos);
-        }
-    }
-  else
-    {
-      if (photos != NULL)
-        goa_object_skeleton_set_photos (object, NULL);
-    }
-
-  if (just_added)
-    {
-      goa_account_set_photos_disabled (account, !photos_enabled);
-
-      g_signal_connect (account,
-                        "notify::photos-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "PhotosEnabled");
-    }
-
-  /* Maps */
-  maps = goa_object_get_maps (GOA_OBJECT (object));
-  maps_enabled = g_key_file_get_boolean (key_file, group, "MapsEnabled", NULL);
-
-  if (maps_enabled)
-    {
-      if (maps == NULL)
-        {
-          maps = goa_maps_skeleton_new ();
-          goa_object_skeleton_set_maps (object, maps);
-        }
-    }
-  else
-    {
-      if (maps != NULL)
-        goa_object_skeleton_set_maps (object, NULL);
-    }
-
-  if (just_added)
-    {
-      goa_account_set_maps_disabled (account, !maps_enabled);
-      g_signal_connect (account,
-                        "notify::maps-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "MapsEnabled");
-    }
-
-  ret = TRUE;
-
- out:
-  g_clear_object (&chat);
-  g_clear_object (&account);
-  g_clear_object (&photos);
-  g_clear_object (&maps);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-show_account (GoaProvider         *provider,
-              GoaClient           *client,
-              GoaObject           *object,
-              GtkBox              *vbox,
-              GtkGrid             *grid,
-              G_GNUC_UNUSED GtkGrid *dummy)
-{
-  gint row;
-
-  row = 0;
-
-  goa_util_add_account_info (grid, row++, object);
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   /* Translators: This is a label for a series of
-                                                    * options switches. For example: “Use for Mail”. */
-                                                   _("Use for"),
-                                                   "chat-disabled",
-                                                   _("C_hat"));
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   NULL,
-                                                   "photos-disabled",
-                                                   _("_Photos"));
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   NULL,
-                                                   "maps-disabled",
-                                                   _("_Maps"));
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-add_account_key_values (GoaOAuth2Provider *provider,
-                        GVariantBuilder   *builder)
-{
-  g_variant_builder_add (builder, "{ss}", "ChatEnabled", "true");
-  g_variant_builder_add (builder, "{ss}", "PhotosEnabled", "true");
-  g_variant_builder_add (builder, "{ss}", "MapsEnabled", "true");
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-goa_facebook_provider_init (GoaFacebookProvider *client)
-{
-}
-
-static void
-goa_facebook_provider_class_init (GoaFacebookProviderClass *klass)
-{
-  GoaProviderClass *provider_class;
-  GoaOAuth2ProviderClass *oauth2_class;
-
-  provider_class = GOA_PROVIDER_CLASS (klass);
-  provider_class->get_provider_type          = get_provider_type;
-  provider_class->get_provider_name          = get_provider_name;
-  provider_class->get_provider_group         = get_provider_group;
-  provider_class->get_provider_features      = get_provider_features;
-  provider_class->build_object               = build_object;
-  provider_class->show_account               = show_account;
-  provider_class->get_credentials_generation = get_credentials_generation;
-
-  oauth2_class = GOA_OAUTH2_PROVIDER_CLASS (klass);
-  oauth2_class->get_authorization_uri    = get_authorization_uri;
-  oauth2_class->build_authorization_uri  = build_authorization_uri;
-  oauth2_class->get_redirect_uri         = get_redirect_uri;
-  oauth2_class->get_scope                = get_scope;
-  oauth2_class->get_client_id            = get_client_id;
-  oauth2_class->get_client_secret        = get_client_secret;
-  oauth2_class->get_authentication_cookie = get_authentication_cookie;
-  oauth2_class->get_identity_sync        = get_identity_sync;
-  oauth2_class->is_deny_node             = is_deny_node;
-  oauth2_class->is_identity_node         = is_identity_node;
-  oauth2_class->add_account_key_values   = add_account_key_values;
-}
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goafacebookprovider.h gnome-online-accounts-3.14.0n/src/goabackend/goafacebookprovider.h
--- gnome-online-accounts-3.14.0/src/goabackend/goafacebookprovider.h	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goafacebookprovider.h	1970-01-01 00:00:00.000000000 +0000
@@ -1,40 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#if !defined (__GOA_BACKEND_INSIDE_GOA_BACKEND_H__) && !defined (GOA_BACKEND_COMPILATION)
-#error "Only <goabackend/goabackend.h> can be included directly."
-#endif
-
-#ifndef __GOA_FACEBOOK_PROVIDER_H__
-#define __GOA_FACEBOOK_PROVIDER_H__
-
-#include <glib-object.h>
-
-G_BEGIN_DECLS
-
-#define GOA_TYPE_FACEBOOK_PROVIDER   (goa_facebook_provider_get_type ())
-#define GOA_FACEBOOK_PROVIDER(o)     (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_FACEBOOK_PROVIDER, GoaFacebookProvider))
-#define GOA_IS_FACEBOOK_PROVIDER(o)  (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_FACEBOOK_PROVIDER))
-
-typedef struct _GoaFacebookProvider GoaFacebookProvider;
-
-GType goa_facebook_provider_get_type (void) G_GNUC_CONST;
-
-G_END_DECLS
-
-#endif /* __GOA_FACEBOOK_PROVIDER_H__ */
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goaflickrprovider.c gnome-online-accounts-3.14.0n/src/goabackend/goaflickrprovider.c
--- gnome-online-accounts-3.14.0/src/goabackend/goaflickrprovider.c	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goaflickrprovider.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,459 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011 Willem van Engen <gnome@willem.engen.nl>
- * Copyright (C) 2012 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "config.h"
-#include <glib/gi18n-lib.h>
-
-#include <rest/oauth-proxy.h>
-#include <json-glib/json-glib.h>
-
-#include "goaprovider.h"
-#include "goaprovider-priv.h"
-#include "goaoauthprovider.h"
-#include "goaflickrprovider.h"
-
-/**
- * GoaFlickrProvider:
- *
- * The #GoaFlickrProvider structure contains only private data and should
- * only be accessed using the provided API.
- */
-struct _GoaFlickrProvider
-{
-  /*< private >*/
-  GoaOAuthProvider parent_instance;
-};
-
-typedef struct _GoaFlickrProviderClass GoaFlickrProviderClass;
-
-struct _GoaFlickrProviderClass
-{
-  GoaOAuthProviderClass parent_class;
-};
-
-/**
- * SECTION:goaflickrprovider
- * @title: GoaFlickrProvider
- * @short_description: A provider for Flickr
- *
- * #GoaFlickrProvider is used for handling Flickr accounts.
- */
-
-G_DEFINE_TYPE_WITH_CODE (GoaFlickrProvider, goa_flickr_provider, GOA_TYPE_OAUTH_PROVIDER,
-                         goa_provider_ensure_extension_points_registered ();
-                         g_io_extension_point_implement (GOA_PROVIDER_EXTENSION_POINT_NAME,
-							 g_define_type_id,
-							 GOA_FLICKR_NAME,
-							 0));
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static const gchar *
-get_provider_type (GoaProvider *_provider)
-{
-  return GOA_FLICKR_NAME;
-}
-
-static gchar *
-get_provider_name (GoaProvider *_provider,
-                   GoaObject   *object)
-{
-  return g_strdup (_("Flickr"));
-}
-
-static GoaProviderGroup
-get_provider_group (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_GROUP_BRANDED;
-}
-
-static GoaProviderFeatures
-get_provider_features (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_FEATURE_BRANDED | GOA_PROVIDER_FEATURE_PHOTOS;
-}
-
-static const gchar *
-get_consumer_key (GoaOAuthProvider *provider)
-{
-  return GOA_FLICKR_CONSUMER_KEY;
-}
-
-static const gchar *
-get_consumer_secret (GoaOAuthProvider *provider)
-{
-  return GOA_FLICKR_CONSUMER_SECRET;
-}
-
-static const gchar *
-get_request_uri (GoaOAuthProvider *provider)
-{
-  return "https://m.flickr.com/services/oauth/request_token";
-}
-
-static const gchar *
-get_authorization_uri (GoaOAuthProvider *provider)
-{
-  return "https://m.flickr.com/services/oauth/authorize";
-}
-
-static const gchar *
-get_token_uri (GoaOAuthProvider *provider)
-{
-  return "https://m.flickr.com/services/oauth/access_token";
-}
-
-static const gchar *
-get_callback_uri (GoaOAuthProvider *provider)
-{
-  return "https://www.gnome.org/goa-1.0/oauth";
-}
-
-static const gchar *
-get_authentication_cookie (GoaOAuthProvider *provider)
-{
-  return "cookie_session";
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-get_identity_sync (GoaOAuthProvider  *provider,
-                   const gchar       *access_token,
-                   const gchar       *access_token_secret,
-                   gchar            **out_presentation_identity,
-                   GCancellable      *cancellable,
-                   GError           **error)
-{
-  GError *identity_error;
-  RestProxy *proxy;
-  RestProxyCall *call;
-  JsonParser *parser;
-  JsonObject *json_object;
-  gchar *ret;
-  gchar *id;
-  gchar *presentation_identity;
-
-  ret = NULL;
-
-  identity_error = NULL;
-  proxy = NULL;
-  call = NULL;
-  parser = NULL;
-  id = NULL;
-  presentation_identity = NULL;
-
-  /* TODO: cancellable */
-
-  proxy = oauth_proxy_new_with_token (goa_oauth_provider_get_consumer_key (provider),
-                                      goa_oauth_provider_get_consumer_secret (provider),
-                                      access_token,
-                                      access_token_secret,
-                                      "https://api.flickr.com/services/rest",
-                                      FALSE);
-  call = rest_proxy_new_call (proxy);
-  rest_proxy_call_add_param (call, "method", "flickr.test.login");
-  rest_proxy_call_add_param (call, "format", "json");
-  rest_proxy_call_add_param (call, "nojsoncallback", "1");
-  rest_proxy_call_set_method (call, "GET");
-
-  if (!rest_proxy_call_sync (call, error))
-    goto out;
-  if (rest_proxy_call_get_status_code (call) != 200)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Expected status 200 when requesting your identity, instead got status %d (%s)"),
-                   rest_proxy_call_get_status_code (call),
-                   rest_proxy_call_get_status_message (call));
-      goto out;
-    }
-
-  parser = json_parser_new ();
-  if (!json_parser_load_from_data (parser,
-                                   rest_proxy_call_get_payload (call),
-                                   rest_proxy_call_get_payload_length (call),
-                                   &identity_error))
-    {
-      g_warning ("json_parser_load_from_data() failed: %s (%s, %d)",
-                 identity_error->message,
-                 g_quark_to_string (identity_error->domain),
-                 identity_error->code);
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  json_object = json_node_get_object (json_parser_get_root (parser));
-  json_object = json_object_get_object_member (json_object, "user");
-  if (json_object == NULL)
-    {
-      g_warning ("Did not find user in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-  id = g_strdup (json_object_get_string_member (json_object, "id"));
-  if (id == NULL)
-    {
-      g_warning ("Did not find user.id in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-  json_object = json_object_get_object_member (json_object, "username");
-  if (json_object == NULL)
-    {
-      g_warning ("Did not find user.username in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-  presentation_identity = g_strdup (json_object_get_string_member (json_object, "_content"));
-  if (presentation_identity == NULL)
-    {
-      g_warning ("Did not find user.username._content in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  ret = id;
-  id = NULL;
-  if (out_presentation_identity != NULL)
-    {
-      *out_presentation_identity = presentation_identity;
-      presentation_identity = NULL;
-    }
-
- out:
-  g_clear_error (&identity_error);
-  g_clear_object (&call);
-  g_clear_object (&proxy);
-  g_free (id);
-  g_free (presentation_identity);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-is_deny_node (GoaOAuthProvider *provider, WebKitDOMNode *node)
-{
-  WebKitDOMElement *element;
-  gboolean ret;
-  gchar *id;
-
-  id = NULL;
-  ret = FALSE;
-
-  if (!WEBKIT_DOM_IS_HTML_ANCHOR_ELEMENT (node))
-    goto out;
-
-  element = WEBKIT_DOM_ELEMENT (node);
-  id = webkit_dom_element_get_id (element);
-  if (g_strcmp0 (id, "auth-disallow") != 0)
-    goto out;
-
-  ret = TRUE;
-
- out:
-  g_free (id);
-  return ret;
-}
-
-static gboolean
-is_identity_node (GoaOAuthProvider *provider, WebKitDOMHTMLInputElement *element)
-{
-  /* Flickr does not provide a way to query the string used by the
-   * user to log in via the web interface. The user id and username
-   * returned by flickr.test.login [1] are not what we are looking
-   * for.
-   *
-   * [1] http://www.flickr.com/services/api/flickr.test.login.html
-   */
-  return FALSE;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-parse_request_token_error (GoaOAuthProvider *provider, RestProxyCall *call)
-{
-  const gchar *payload;
-  gchar *msg;
-  guint status;
-
-  msg = NULL;
-
-  payload = rest_proxy_call_get_payload (call);
-  status = rest_proxy_call_get_status_code (call);
-
-  if (status == 401 && g_strcmp0 (payload, "oauth_problem=timestamp_refused") == 0)
-    msg = g_strdup (_("Your system time is invalid. Check your date and time settings."));
-
-  return msg;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-build_object (GoaProvider         *provider,
-              GoaObjectSkeleton   *object,
-              GKeyFile            *key_file,
-              const gchar         *group,
-              GDBusConnection     *connection,
-              gboolean             just_added,
-              GError             **error)
-{
-  GoaAccount *account;
-  GoaPhotos *photos;
-  gboolean photos_enabled;
-  gboolean ret;
-
-  photos = NULL;
-  ret = FALSE;
-
-  /* Chain up */
-  if (!GOA_PROVIDER_CLASS (goa_flickr_provider_parent_class)->build_object (provider,
-                                                                            object,
-                                                                            key_file,
-                                                                            group,
-                                                                            connection,
-                                                                            just_added,
-                                                                            error))
-    goto out;
-
-  account = goa_object_get_account (GOA_OBJECT (object));
-
-  /* Photos */
-  photos = goa_object_get_photos (GOA_OBJECT (object));
-  photos_enabled = g_key_file_get_boolean (key_file, group, "PhotosEnabled", NULL);
-
-  if (photos_enabled)
-    {
-      if (photos == NULL)
-        {
-          photos = goa_photos_skeleton_new ();
-          goa_object_skeleton_set_photos (object, photos);
-        }
-    }
-  else
-    {
-      if (photos != NULL)
-        goa_object_skeleton_set_photos (object, NULL);
-    }
-
-  if (just_added)
-    {
-      goa_account_set_photos_disabled (account, !photos_enabled);
-
-      g_signal_connect (account,
-                        "notify::photos-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "PhotosEnabled");
-    }
-
-  ret = TRUE;
-
- out:
-  g_clear_object (&photos);
-  g_clear_object (&account);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-show_account (GoaProvider         *provider,
-              GoaClient           *client,
-              GoaObject           *object,
-              GtkBox              *vbox,
-              GtkGrid             *grid,
-              G_GNUC_UNUSED GtkGrid *dummy)
-{
-  gint row;
-
-  row = 0;
-
-  goa_util_add_account_info (grid, row++, object);
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   /* Translators: This is a label for a series of
-                                                    * options switches. For example: “Use for Mail”. */
-                                                   _("Use for"),
-                                                   "photos-disabled",
-                                                   _("_Photos"));
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-add_account_key_values (GoaOAuthProvider  *provider,
-                        GVariantBuilder   *builder)
-{
-  g_variant_builder_add (builder, "{ss}", "PhotosEnabled", "true");
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-goa_flickr_provider_init (GoaFlickrProvider *client)
-{
-}
-
-static void
-goa_flickr_provider_class_init (GoaFlickrProviderClass *klass)
-{
-  GoaProviderClass *provider_class;
-  GoaOAuthProviderClass *oauth_class;
-
-  provider_class = GOA_PROVIDER_CLASS (klass);
-  provider_class->get_provider_type     = get_provider_type;
-  provider_class->get_provider_name     = get_provider_name;
-  provider_class->get_provider_group         = get_provider_group;
-  provider_class->get_provider_features      = get_provider_features;
-  provider_class->build_object          = build_object;
-  provider_class->show_account          = show_account;
-
-  oauth_class = GOA_OAUTH_PROVIDER_CLASS (klass);
-  oauth_class->get_identity_sync        = get_identity_sync;
-  oauth_class->is_deny_node             = is_deny_node;
-  oauth_class->is_identity_node         = is_identity_node;
-  oauth_class->get_consumer_key         = get_consumer_key;
-  oauth_class->get_consumer_secret      = get_consumer_secret;
-  oauth_class->get_request_uri          = get_request_uri;
-  oauth_class->get_authorization_uri    = get_authorization_uri;
-  oauth_class->get_token_uri            = get_token_uri;
-  oauth_class->get_callback_uri         = get_callback_uri;
-  oauth_class->get_authentication_cookie = get_authentication_cookie;
-  oauth_class->parse_request_token_error = parse_request_token_error;
-  oauth_class->add_account_key_values    = add_account_key_values;
-}
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goaflickrprovider.h gnome-online-accounts-3.14.0n/src/goabackend/goaflickrprovider.h
--- gnome-online-accounts-3.14.0/src/goabackend/goaflickrprovider.h	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goaflickrprovider.h	1970-01-01 00:00:00.000000000 +0000
@@ -1,40 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2012 Willem van Engen <gnome@willem.engen.nl>
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#if !defined (__GOA_BACKEND_INSIDE_GOA_BACKEND_H__) && !defined (GOA_BACKEND_COMPILATION)
-#error "Only <goabackend/goabackend.h> can be included directly."
-#endif
-
-#ifndef __GOA_FLICKR_PROVIDER_H__
-#define __GOA_FLICKR_PROVIDER_H__
-
-#include <glib-object.h>
-
-G_BEGIN_DECLS
-
-#define GOA_TYPE_FLICKR_PROVIDER   (goa_flickr_provider_get_type ())
-#define GOA_FLICKR_PROVIDER(o)     (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_FLICKR_PROVIDER, GoaFlickrProvider))
-#define GOA_IS_FLICKR_PROVIDER(o)  (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_FLICKR_PROVIDER))
-
-typedef struct _GoaFlickrProvider GoaFlickrProvider;
-
-GType goa_flickr_provider_get_type (void) G_GNUC_CONST;
-
-G_END_DECLS
-
-#endif /* __GOA_FLICKR_PROVIDER_H__ */
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goagoogleprovider.c gnome-online-accounts-3.14.0n/src/goabackend/goagoogleprovider.c
--- gnome-online-accounts-3.14.0/src/goabackend/goagoogleprovider.c	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goagoogleprovider.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,677 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011, 2012, 2013, 2014 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "config.h"
-#include <glib/gi18n-lib.h>
-
-#include <rest/oauth-proxy.h>
-#include <json-glib/json-glib.h>
-
-#include "goaprovider.h"
-#include "goaprovider-priv.h"
-#include "goaoauth2provider.h"
-#include "goagoogleprovider.h"
-
-/**
- * GoaGoogleProvider:
- *
- * The #GoaGoogleProvider structure contains only private data and should
- * only be accessed using the provided API.
- */
-struct _GoaGoogleProvider
-{
-  /*< private >*/
-  GoaOAuth2Provider parent_instance;
-};
-
-typedef struct _GoaGoogleProviderClass GoaGoogleProviderClass;
-
-struct _GoaGoogleProviderClass
-{
-  GoaOAuth2ProviderClass parent_class;
-};
-
-/**
- * SECTION:goagoogleprovider
- * @title: GoaGoogleProvider
- * @short_description: A provider for Google
- *
- * #GoaGoogleProvider is used for handling Google accounts.
- */
-
-G_DEFINE_TYPE_WITH_CODE (GoaGoogleProvider, goa_google_provider, GOA_TYPE_OAUTH2_PROVIDER,
-                         goa_provider_ensure_extension_points_registered ();
-                         g_io_extension_point_implement (GOA_PROVIDER_EXTENSION_POINT_NAME,
-							 g_define_type_id,
-							 GOA_GOOGLE_NAME,
-							 0));
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static const gchar *
-get_provider_type (GoaProvider *_provider)
-{
-  return GOA_GOOGLE_NAME;
-}
-
-static gchar *
-get_provider_name (GoaProvider *_provider,
-                   GoaObject   *object)
-{
-  return g_strdup (_("Google"));
-}
-
-static GoaProviderGroup
-get_provider_group (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_GROUP_BRANDED;
-}
-
-static GoaProviderFeatures
-get_provider_features (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_FEATURE_BRANDED |
-         GOA_PROVIDER_FEATURE_MAIL |
-         GOA_PROVIDER_FEATURE_CALENDAR |
-         GOA_PROVIDER_FEATURE_CONTACTS |
-         GOA_PROVIDER_FEATURE_CHAT |
-         GOA_PROVIDER_FEATURE_DOCUMENTS |
-         GOA_PROVIDER_FEATURE_PHOTOS |
-         GOA_PROVIDER_FEATURE_PRINTERS;
-}
-
-static const gchar *
-get_authorization_uri (GoaOAuth2Provider *provider)
-{
-  return "https://accounts.google.com/o/oauth2/auth";
-}
-
-static const gchar *
-get_token_uri (GoaOAuth2Provider *provider)
-{
-  return "https://accounts.google.com/o/oauth2/token";
-}
-
-static const gchar *
-get_redirect_uri (GoaOAuth2Provider *provider)
-{
-  return "http://localhost";
-}
-
-static const gchar *
-get_scope (GoaOAuth2Provider *provider)
-{
-  return /* Read-only access to the user's email address */
-         "https://www.googleapis.com/auth/userinfo.email "
-
-         /* Name and picture */
-         "https://www.googleapis.com/auth/userinfo.profile "
-
-         /* Google Calendar API (CalDAV and GData) */
-         "https://www.googleapis.com/auth/calendar "
-
-         /* Google Contacts API (GData) */
-         "https://www.google.com/m8/feeds/ "
-
-         /* Google Contacts API (CardDAV) - undocumented */
-         "https://www.googleapis.com/auth/carddav "
-
-         /* Google Documents List Data API */
-         "https://docs.google.com/feeds/ "
-         "https://docs.googleusercontent.com/ "
-         "https://spreadsheets.google.com/feeds/ "
-
-         /* Google PicasaWeb API (GData) */
-         "https://picasaweb.google.com/data/ "
-
-         /* GMail IMAP and SMTP access */
-         "https://mail.google.com/ "
-
-         /* Google Cloud Print */
-         "https://www.googleapis.com/auth/cloudprint "
-
-         /* Google Talk */
-         "https://www.googleapis.com/auth/googletalk "
-
-         /* Google Tasks - undocumented */
-         "https://www.googleapis.com/auth/tasks";
-}
-
-static guint
-get_credentials_generation (GoaProvider *provider)
-{
-  return 9;
-}
-
-static const gchar *
-get_client_id (GoaOAuth2Provider *provider)
-{
-  return GOA_GOOGLE_CLIENT_ID;
-}
-
-static const gchar *
-get_client_secret (GoaOAuth2Provider *provider)
-{
-  return GOA_GOOGLE_CLIENT_SECRET;
-}
-
-static const gchar *
-get_authentication_cookie (GoaOAuth2Provider *provider)
-{
-  return "LSID";
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-get_identity_sync (GoaOAuth2Provider  *provider,
-                   const gchar        *access_token,
-                   gchar             **out_presentation_identity,
-                   GCancellable       *cancellable,
-                   GError            **error)
-{
-  GError *identity_error;
-  RestProxy *proxy;
-  RestProxyCall *call;
-  JsonParser *parser;
-  JsonObject *json_object;
-  gchar *ret;
-  gchar *email;
-
-  ret = NULL;
-
-  identity_error = NULL;
-  proxy = NULL;
-  call = NULL;
-  parser = NULL;
-  email = NULL;
-
-  /* TODO: cancellable */
-
-  proxy = rest_proxy_new ("https://www.googleapis.com/oauth2/v2/userinfo", FALSE);
-  call = rest_proxy_new_call (proxy);
-  rest_proxy_call_set_method (call, "GET");
-  rest_proxy_call_add_param (call, "access_token", access_token);
-
-  if (!rest_proxy_call_sync (call, error))
-    goto out;
-  if (rest_proxy_call_get_status_code (call) != 200)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Expected status 200 when requesting your identity, instead got status %d (%s)"),
-                   rest_proxy_call_get_status_code (call),
-                   rest_proxy_call_get_status_message (call));
-      goto out;
-    }
-
-  parser = json_parser_new ();
-  if (!json_parser_load_from_data (parser,
-                                   rest_proxy_call_get_payload (call),
-                                   rest_proxy_call_get_payload_length (call),
-                                   &identity_error))
-    {
-      g_warning ("json_parser_load_from_data() failed: %s (%s, %d)",
-                 identity_error->message,
-                 g_quark_to_string (identity_error->domain),
-                 identity_error->code);
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  json_object = json_node_get_object (json_parser_get_root (parser));
-  email = g_strdup (json_object_get_string_member (json_object, "email"));
-  if (email == NULL)
-    {
-      g_warning ("Did not find email in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-
-  ret = email;
-  email = NULL;
-  if (out_presentation_identity != NULL)
-    *out_presentation_identity = g_strdup (ret); /* for now: use email as presentation identity */
-
- out:
-  g_clear_error (&identity_error);
-  g_clear_object (&call);
-  g_clear_object (&proxy);
-  g_free (email);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-is_deny_node (GoaOAuth2Provider *provider, WebKitDOMNode *node)
-{
-  return FALSE;
-}
-
-static gboolean
-is_identity_node (GoaOAuth2Provider *provider, WebKitDOMHTMLInputElement *element)
-{
-  gboolean ret;
-  gchar *element_type;
-  gchar *id;
-  gchar *name;
-
-  element_type = NULL;
-  id = NULL;
-  name = NULL;
-
-  ret = FALSE;
-
-  g_object_get (element, "type", &element_type, NULL);
-  if (g_strcmp0 (element_type, "email") != 0)
-    goto out;
-
-  id = webkit_dom_element_get_id (WEBKIT_DOM_ELEMENT (element));
-  if (g_strcmp0 (id, "Email") != 0)
-    goto out;
-
-  name = webkit_dom_html_input_element_get_name (element);
-  if (g_strcmp0 (name, "Email") != 0)
-    goto out;
-
-  ret = TRUE;
-
- out:
-  g_free (element_type);
-  g_free (id);
-  g_free (name);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-build_object (GoaProvider         *provider,
-              GoaObjectSkeleton   *object,
-              GKeyFile            *key_file,
-              const gchar         *group,
-              GDBusConnection     *connection,
-              gboolean             just_added,
-              GError             **error)
-{
-  GoaAccount *account;
-  GoaMail *mail;
-  GoaCalendar *calendar;
-  GoaContacts *contacts;
-  GoaChat *chat;
-  GoaDocuments *documents;
-  GoaPhotos *photos;
-  GoaPrinters *printers;
-  gboolean ret;
-  gboolean mail_enabled;
-  gboolean calendar_enabled;
-  gboolean contacts_enabled;
-  gboolean chat_enabled;
-  gboolean documents_enabled;
-  gboolean photos_enabled;
-  gboolean printers_enabled;
-  const gchar *email_address;
-
-  account = NULL;
-  mail = NULL;
-  calendar = NULL;
-  contacts = NULL;
-  chat = NULL;
-  documents = NULL;
-  photos = NULL;
-  printers = NULL;
-  ret = FALSE;
-
-  /* Chain up */
-  if (!GOA_PROVIDER_CLASS (goa_google_provider_parent_class)->build_object (provider,
-                                                                            object,
-                                                                            key_file,
-                                                                            group,
-                                                                            connection,
-                                                                            just_added,
-                                                                            error))
-    goto out;
-
-  account = goa_object_get_account (GOA_OBJECT (object));
-  email_address = goa_account_get_identity (account);
-
-  /* Email */
-  mail = goa_object_get_mail (GOA_OBJECT (object));
-  mail_enabled = g_key_file_get_boolean (key_file, group, "MailEnabled", NULL);
-  if (mail_enabled)
-    {
-      if (mail == NULL)
-        {
-          mail = goa_mail_skeleton_new ();
-          g_object_set (G_OBJECT (mail),
-                        "email-address",   email_address,
-                        "imap-supported",  TRUE,
-                        "imap-host",       "imap.gmail.com",
-                        "imap-user-name",  email_address,
-                        "imap-use-ssl",    TRUE,
-                        "smtp-supported",  TRUE,
-                        "smtp-host",       "smtp.gmail.com",
-                        "smtp-user-name",  email_address,
-                        "smtp-use-auth",   TRUE,
-                        "smtp-auth-xoauth2", TRUE,
-                        "smtp-use-tls",    TRUE,
-                        NULL);
-          goa_object_skeleton_set_mail (object, mail);
-        }
-    }
-  else
-    {
-      if (mail != NULL)
-        goa_object_skeleton_set_mail (object, NULL);
-    }
-
-  /* Calendar */
-  calendar = goa_object_get_calendar (GOA_OBJECT (object));
-  calendar_enabled = g_key_file_get_boolean (key_file, group, "CalendarEnabled", NULL);
-  if (calendar_enabled)
-    {
-      if (calendar == NULL)
-        {
-          gchar *uri_caldav;
-
-          uri_caldav = g_strconcat ("https://apidata.googleusercontent.com/caldav/v2/",
-                                    email_address,
-                                    "/user",
-                                    NULL);
-
-          calendar = goa_calendar_skeleton_new ();
-          g_object_set (G_OBJECT (calendar),
-                        "uri", uri_caldav,
-                        NULL);
-          goa_object_skeleton_set_calendar (object, calendar);
-          g_free (uri_caldav);
-        }
-    }
-  else
-    {
-      if (calendar != NULL)
-        goa_object_skeleton_set_calendar (object, NULL);
-    }
-
-  /* Contacts */
-  contacts = goa_object_get_contacts (GOA_OBJECT (object));
-  contacts_enabled = g_key_file_get_boolean (key_file, group, "ContactsEnabled", NULL);
-  if (contacts_enabled)
-    {
-      if (contacts == NULL)
-        {
-          contacts = goa_contacts_skeleton_new ();
-          g_object_set (G_OBJECT (contacts),
-                        "uri", "https://www.googleapis.com/.well-known/carddav",
-                        NULL);
-          goa_object_skeleton_set_contacts (object, contacts);
-        }
-    }
-  else
-    {
-      if (contacts != NULL)
-        goa_object_skeleton_set_contacts (object, NULL);
-    }
-
-  /* Chat */
-  chat = goa_object_get_chat (GOA_OBJECT (object));
-  chat_enabled = g_key_file_get_boolean (key_file, group, "ChatEnabled", NULL);
-  if (chat_enabled)
-    {
-      if (chat == NULL)
-        {
-          chat = goa_chat_skeleton_new ();
-          goa_object_skeleton_set_chat (object, chat);
-        }
-    }
-  else
-    {
-      if (chat != NULL)
-        goa_object_skeleton_set_chat (object, NULL);
-    }
-
-  /* Documents */
-  documents = goa_object_get_documents (GOA_OBJECT (object));
-  documents_enabled = g_key_file_get_boolean (key_file, group, "DocumentsEnabled", NULL);
-
-  if (documents_enabled)
-    {
-      if (documents == NULL)
-        {
-          documents = goa_documents_skeleton_new ();
-          goa_object_skeleton_set_documents (object, documents);
-        }
-    }
-  else
-    {
-      if (documents != NULL)
-        goa_object_skeleton_set_documents (object, NULL);
-    }
-
-  /* Photos */
-  photos = goa_object_get_photos (GOA_OBJECT (object));
-  photos_enabled = g_key_file_get_boolean (key_file, group, "PhotosEnabled", NULL);
-
-  if (photos_enabled)
-    {
-      if (photos == NULL)
-        {
-          photos = goa_photos_skeleton_new ();
-          goa_object_skeleton_set_photos (object, photos);
-        }
-    }
-  else
-    {
-      if (photos != NULL)
-        goa_object_skeleton_set_photos (object, NULL);
-    }
-
-  /* Printers */
-  printers = goa_object_get_printers (GOA_OBJECT (object));
-  printers_enabled = g_key_file_get_boolean (key_file, group, "PrintersEnabled", NULL);
-
-  if (printers_enabled)
-    {
-      if (printers == NULL)
-        {
-          printers = goa_printers_skeleton_new ();
-          goa_object_skeleton_set_printers (object, printers);
-        }
-    }
-  else
-    {
-      if (printers != NULL)
-        goa_object_skeleton_set_printers (object, NULL);
-    }
-
-  if (just_added)
-    {
-      goa_account_set_mail_disabled (account, !mail_enabled);
-      goa_account_set_calendar_disabled (account, !calendar_enabled);
-      goa_account_set_contacts_disabled (account, !contacts_enabled);
-      goa_account_set_chat_disabled (account, !chat_enabled);
-      goa_account_set_documents_disabled (account, !documents_enabled);
-      goa_account_set_photos_disabled (account, !photos_enabled);
-      goa_account_set_printers_disabled (account, !printers_enabled);
-
-      g_signal_connect (account,
-                        "notify::mail-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "MailEnabled");
-      g_signal_connect (account,
-                        "notify::calendar-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "CalendarEnabled");
-      g_signal_connect (account,
-                        "notify::contacts-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "ContactsEnabled");
-      g_signal_connect (account,
-                        "notify::chat-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "ChatEnabled");
-      g_signal_connect (account,
-                        "notify::documents-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "DocumentsEnabled");
-      g_signal_connect (account,
-                        "notify::photos-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "PhotosEnabled");
-      g_signal_connect (account,
-                        "notify::printers-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "PrintersEnabled");
-    }
-
-  ret = TRUE;
-
- out:
-  g_clear_object (&printers);
-  g_clear_object (&photos);
-  g_clear_object (&documents);
-  g_clear_object (&chat);
-  g_clear_object (&contacts);
-  g_clear_object (&calendar);
-  g_clear_object (&mail);
-  g_clear_object (&account);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-get_use_mobile_browser (GoaOAuth2Provider *provider)
-{
-  return TRUE;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-show_account (GoaProvider         *provider,
-              GoaClient           *client,
-              GoaObject           *object,
-              GtkBox              *vbox,
-              GtkGrid             *grid,
-              G_GNUC_UNUSED GtkGrid *dummy)
-{
-  gint row;
-
-  row = 0;
-
-  goa_util_add_account_info (grid, row++, object);
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   /* Translators: This is a label for a series of
-                                                    * options switches. For example: “Use for Mail”. */
-                                                   _("Use for"),
-                                                   "mail-disabled",
-                                                   _("_Mail"));
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   NULL,
-                                                   "calendar-disabled",
-                                                   _("Cale_ndar"));
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   NULL,
-                                                   "contacts-disabled",
-                                                   _("_Contacts"));
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   NULL,
-                                                   "chat-disabled",
-                                                   _("C_hat"));
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   NULL,
-                                                   "documents-disabled",
-                                                   _("_Documents"));
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   NULL,
-                                                   "photos-disabled",
-                                                   _("_Photos"));
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   NULL,
-                                                   "printers-disabled",
-                                                   _("Prin_ters"));
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-add_account_key_values (GoaOAuth2Provider  *provider,
-                        GVariantBuilder   *builder)
-{
-  g_variant_builder_add (builder, "{ss}", "MailEnabled", "true");
-  g_variant_builder_add (builder, "{ss}", "CalendarEnabled", "true");
-  g_variant_builder_add (builder, "{ss}", "ContactsEnabled", "true");
-  g_variant_builder_add (builder, "{ss}", "ChatEnabled", "true");
-  g_variant_builder_add (builder, "{ss}", "DocumentsEnabled", "true");
-  g_variant_builder_add (builder, "{ss}", "PhotosEnabled", "true");
-  g_variant_builder_add (builder, "{ss}", "PrintersEnabled", "true");
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-goa_google_provider_init (GoaGoogleProvider *client)
-{
-}
-
-static void
-goa_google_provider_class_init (GoaGoogleProviderClass *klass)
-{
-  GoaProviderClass *provider_class;
-  GoaOAuth2ProviderClass *oauth2_class;
-
-  provider_class = GOA_PROVIDER_CLASS (klass);
-  provider_class->get_provider_type          = get_provider_type;
-  provider_class->get_provider_name          = get_provider_name;
-  provider_class->get_provider_group         = get_provider_group;
-  provider_class->get_provider_features      = get_provider_features;
-  provider_class->build_object               = build_object;
-  provider_class->show_account               = show_account;
-  provider_class->get_credentials_generation = get_credentials_generation;
-
-  oauth2_class = GOA_OAUTH2_PROVIDER_CLASS (klass);
-  oauth2_class->get_authentication_cookie = get_authentication_cookie;
-  oauth2_class->get_authorization_uri     = get_authorization_uri;
-  oauth2_class->get_client_id             = get_client_id;
-  oauth2_class->get_client_secret         = get_client_secret;
-  oauth2_class->get_identity_sync         = get_identity_sync;
-  oauth2_class->get_redirect_uri          = get_redirect_uri;
-  oauth2_class->get_scope                 = get_scope;
-  oauth2_class->is_deny_node              = is_deny_node;
-  oauth2_class->is_identity_node          = is_identity_node;
-  oauth2_class->get_token_uri             = get_token_uri;
-  oauth2_class->get_use_mobile_browser    = get_use_mobile_browser;
-  oauth2_class->add_account_key_values    = add_account_key_values;
-}
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goagoogleprovider.h gnome-online-accounts-3.14.0n/src/goabackend/goagoogleprovider.h
--- gnome-online-accounts-3.14.0/src/goabackend/goagoogleprovider.h	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goagoogleprovider.h	1970-01-01 00:00:00.000000000 +0000
@@ -1,40 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#if !defined (__GOA_BACKEND_INSIDE_GOA_BACKEND_H__) && !defined (GOA_BACKEND_COMPILATION)
-#error "Only <goabackend/goabackend.h> can be included directly."
-#endif
-
-#ifndef __GOA_GOOGLE_PROVIDER_H__
-#define __GOA_GOOGLE_PROVIDER_H__
-
-#include <glib-object.h>
-
-G_BEGIN_DECLS
-
-#define GOA_TYPE_GOOGLE_PROVIDER   (goa_google_provider_get_type ())
-#define GOA_GOOGLE_PROVIDER(o)     (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_GOOGLE_PROVIDER, GoaGoogleProvider))
-#define GOA_IS_GOOGLE_PROVIDER(o)  (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_GOOGLE_PROVIDER))
-
-typedef struct _GoaGoogleProvider GoaGoogleProvider;
-
-GType goa_google_provider_get_type (void) G_GNUC_CONST;
-
-G_END_DECLS
-
-#endif /* __GOA_GOOGLE_PROVIDER_H__ */
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goaoauth2provider.c gnome-online-accounts-3.14.0n/src/goabackend/goaoauth2provider.c
--- gnome-online-accounts-3.14.0/src/goabackend/goaoauth2provider.c	2014-09-16 14:08:58.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goaoauth2provider.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,1797 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011, 2012, 2013, 2014 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "config.h"
-#include <glib/gi18n-lib.h>
-#include <stdlib.h>
-
-#include <rest/oauth2-proxy.h>
-#include <libsoup/soup.h>
-#include <json-glib/json-glib.h>
-
-#include "goaprovider.h"
-#include "goautils.h"
-#include "goawebview.h"
-#include "goaoauth2provider.h"
-
-/**
- * SECTION:goaoauth2provider
- * @title: GoaOAuth2Provider
- * @short_description: Abstract base class for OAuth 2.0 providers
- *
- * #GoaOAuth2Provider is an abstract base class for <ulink
- * url="http://tools.ietf.org/html/draft-ietf-oauth-v2-15">OAuth
- * 2.0</ulink> based providers.
- *
- * Subclasses must implement
- * #GoaOAuth2ProviderClass.get_authorization_uri,
- * #GoaOAuth2ProviderClass.get_token_uri,
- * #GoaOAuth2ProviderClass.get_redirect_uri,
- * #GoaOAuth2ProviderClass.get_scope,
- * #GoaOAuth2ProviderClass.get_client_id,
- * #GoaOAuth2ProviderClass.get_client_secret and
- * #GoaOAuth2ProviderClass.get_identity_sync methods.
- *
- * Additionally, the
- * #GoaProviderClass.get_provider_type,
- * #GoaProviderClass.get_provider_name,
- * #GoaProviderClass.build_object (this should chain up to its
- * parent class) methods must be implemented.
- *
- * Note that the #GoaProviderClass.add_account,
- * #GoaProviderClass.refresh_account and
- * #GoaProviderClass.ensure_credentials_sync methods do not
- * need to be implemented - this type implements these methods..
- */
-
-struct _GoaOAuth2ProviderPrivate
-{
-  GtkDialog *dialog;
-  GError *error;
-  GMainLoop *loop;
-
-  WebKitDOMHTMLInputElement *password_node;
-  const gchar *existing_identity;
-
-  gchar *account_object_path;
-
-  gchar *authorization_code;
-  gchar *access_token;
-  gint   access_token_expires_in;
-  gchar *refresh_token;
-  gchar *identity;
-  gchar *presentation_identity;
-  gchar *password;
-};
-
-#define GOA_OAUTH2_PROVIDER_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GOA_TYPE_OAUTH2_PROVIDER, GoaOAuth2ProviderPrivate))
-
-G_LOCK_DEFINE_STATIC (provider_lock);
-
-G_DEFINE_ABSTRACT_TYPE (GoaOAuth2Provider, goa_oauth2_provider, GOA_TYPE_PROVIDER);
-
-static gboolean
-is_authorization_error (GError *error)
-{
-  gboolean ret;
-
-  g_return_val_if_fail (error != NULL, FALSE);
-
-  ret = FALSE;
-  if (error->domain == REST_PROXY_ERROR || error->domain == SOUP_HTTP_ERROR)
-    {
-      if (SOUP_STATUS_IS_CLIENT_ERROR (error->code))
-        ret = TRUE;
-    }
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-goa_oauth2_provider_get_use_mobile_browser_default (GoaOAuth2Provider  *provider)
-{
-  return FALSE;
-}
-
-/**
- * goa_oauth2_provider_get_use_mobile_browser:
- * @provider: A #GoaOAuth2Provider.
- *
- * Returns whether there is a need for the embedded browser to identify
- * itself as running on a mobile phone in order to get a more compact
- * version of the approval page.
- *
- * This is a virtual method where the default implementation returns
- * %FALSE.
- *
- * Returns: %TRUE if the embedded browser should identify itself as
- * running on a mobile platform, %FALSE otherwise.
- */
-gboolean
-goa_oauth2_provider_get_use_mobile_browser (GoaOAuth2Provider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), FALSE);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->get_use_mobile_browser (provider);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-goa_oauth2_provider_is_password_node_default (GoaOAuth2Provider *provider, WebKitDOMHTMLInputElement *element)
-{
-  return FALSE;
-}
-
-/**
- * goa_oauth2_provider_is_password_node:
- * @provider: A #GoaOAuth2Provider.
- * @element: A WebKitDOMHTMLInputElement
- *
- * Checks whether @element is the HTML UI element that the user can
- * use to enter her password. This can be used to offer a
- * #GoaPasswordBased interface by saving the user's
- * password. Providers usually frown upon doing this, so this is not
- * recommended.
- *
- * This is a virtual method where the default implementation returns
- * %FALSE.
- *
- * Returns: %TRUE if @element can be used to enter the password.
- */
-gboolean
-goa_oauth2_provider_is_password_node (GoaOAuth2Provider *provider, WebKitDOMHTMLInputElement *element)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), FALSE);
-  g_return_val_if_fail (WEBKIT_DOM_IS_HTML_INPUT_ELEMENT (element), FALSE);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->is_password_node (provider, element);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-goa_oauth2_provider_add_account_key_values_default (GoaOAuth2Provider *provider,
-                                                    GVariantBuilder   *builder)
-{
-  /* do nothing */
-}
-
-/**
- * goa_oauth2_provider_add_account_key_values:
- * @provider: A #GoaProvider.
- * @builder: A #GVariantBuilder for a <literal>a{ss}</literal> variant.
- *
- * Hook for implementations to add key/value pairs to the key-file
- * when creating an account.
- *
- * This is a virtual method where the default implementation does nothing.
- */
-void
-goa_oauth2_provider_add_account_key_values (GoaOAuth2Provider  *provider,
-                                            GVariantBuilder    *builder)
-{
-  g_return_if_fail (GOA_IS_OAUTH2_PROVIDER (provider));
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->add_account_key_values (provider, builder);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-goa_oauth2_provider_build_authorization_uri_default (GoaOAuth2Provider  *provider,
-                                                     const gchar        *authorization_uri,
-                                                     const gchar        *escaped_redirect_uri,
-                                                     const gchar        *escaped_client_id,
-                                                     const gchar        *escaped_scope)
-{
-  return g_strdup_printf ("%s"
-                          "?response_type=code"
-                          "&redirect_uri=%s"
-                          "&client_id=%s"
-                          "&scope=%s",
-                          authorization_uri,
-                          escaped_redirect_uri,
-                          escaped_client_id,
-                          escaped_scope);
-}
-
-/**
- * goa_oauth2_provider_build_authorization_uri:
- * @provider: A #GoaOAuth2Provider.
- * @authorization_uri: An authorization URI.
- * @escaped_redirect_uri: An escaped redirect URI
- * @escaped_client_id: An escaped client id
- * @escaped_scope: (allow-none): The escaped scope or %NULL
- *
- * Builds the URI that can be opened in a web browser (or embedded web
- * browser widget) to start authenticating an user.
- *
- * The default implementation just returns the expected URI
- * (e.g. <literal>http://example.com/dialog/oauth2?response_type=code&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb&client_id=foo&scope=email%20stuff</literal>)
- * - override (and chain up) if you e.g. need to to pass additional
- * parameters.
- *
- * The @authorization_uri, @escaped_redirect_uri, @escaped_client_id
- * and @escaped_scope parameters originate from the result of the
- * the goa_oauth2_provider_get_authorization_uri(), goa_oauth2_provider_get_redirect_uri(), goa_oauth2_provider_get_client_id()
- * and goa_oauth2_provider_get_scope() methods with the latter
- * three escaped using g_uri_escape_string().
- *
- * Returns: (transfer full): An authorization URI that must be freed with g_free().
- */
-gchar *
-goa_oauth2_provider_build_authorization_uri (GoaOAuth2Provider  *provider,
-                                             const gchar        *authorization_uri,
-                                             const gchar        *escaped_redirect_uri,
-                                             const gchar        *escaped_client_id,
-                                             const gchar        *escaped_scope)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  g_return_val_if_fail (authorization_uri != NULL, NULL);
-  g_return_val_if_fail (escaped_redirect_uri != NULL, NULL);
-  g_return_val_if_fail (escaped_client_id != NULL, NULL);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->build_authorization_uri (provider,
-                                                                                    authorization_uri,
-                                                                                    escaped_redirect_uri,
-                                                                                    escaped_client_id,
-                                                                                    escaped_scope);
-}
-
-/**
- * goa_oauth2_provider_process_redirect_url:
- * @provider: A #GoaOAuth2Provider.
- * @redirect_url: A redirect URI from the web browser
- * @authorization_code: (out): Return location for access token
- * @error: Return location for error or %NULL
- *
- * Certain OAuth2-like, but not exactly <ulink
- * url="http://tools.ietf.org/html/draft-ietf-oauth-v2-15">OAuth2</ulink>,
- * providers do not follow the standard mechanisms for extracting the
- * access token or auth code from the redirect URI. They use some
- * non-standard technique to do so. This is a provider specific hook
- * to accommodate them and will only be used if implemented.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation if needed.
- *
- * Returns: %TRUE if @provider could process @redirect_url, %FALSE
- * otherwise.
- */
-gboolean
-goa_oauth2_provider_process_redirect_url (GoaOAuth2Provider  *provider,
-                                          const gchar        *redirect_url,
-                                          gchar             **authorization_code,
-                                          GError            **error)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  g_return_val_if_fail (redirect_url != NULL, NULL);
-  g_return_val_if_fail (authorization_code != NULL, NULL);
-  g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
-
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->process_redirect_url (provider,
-                                                                         redirect_url,
-                                                                         authorization_code,
-                                                                         error);
-}
-
-/**
- * goa_oauth2_provider_get_authorization_uri:
- * @provider: A #GoaOAuth2Provider.
- *
- * Gets the <ulink
- * url="http://tools.ietf.org/html/draft-ietf-oauth-v2-15#section-2.1">authorization
- * endpoint</ulink> used for authenticating the user and obtaining
- * authorization.
- *
- * You should not include any parameters in the returned URI. If you
- * need to include additional parameters than the standard ones,
- * override #GoaOAuth2ProviderClass.build_authorization_uri -
- * see goa_oauth2_provider_build_authorization_uri() for more
- * details.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth2_provider_get_authorization_uri (GoaOAuth2Provider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->get_authorization_uri (provider);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static const gchar *
-goa_oauth2_provider_get_token_uri_default (GoaOAuth2Provider  *provider)
-{
-  return NULL;
-}
-
-/**
- * goa_oauth2_provider_get_token_uri:
- * @provider: A #GoaOAuth2Provider.
- *
- * Gets the <ulink
- * url="http://tools.ietf.org/html/draft-ietf-oauth-v2-15#section-2.2">token
- * endpoint</ulink> used for obtaining an access token.
- *
- * A token URI is only needed when the OAuth2 provider does not support
- * a separate client-side flow. In such cases, override
- * #GoaOAuth2ProviderClass.get_token_uri. You should not include any
- * parameters in the returned URI.
- *
- * This is a virtual method where the default implementation returns
- * %NULL.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth2_provider_get_token_uri (GoaOAuth2Provider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->get_token_uri (provider);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-/**
- * goa_oauth2_provider_get_redirect_uri:
- * @provider: A #GoaOAuth2Provider.
- *
- * Gets the <ulink
- * url="http://tools.ietf.org/html/draft-ietf-oauth-v2-15#section-2.1.1">redirect_uri</ulink>
- * used when requesting authorization.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth2_provider_get_redirect_uri (GoaOAuth2Provider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->get_redirect_uri (provider);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static const gchar *
-goa_oauth2_provider_get_scope_default (GoaOAuth2Provider *provider)
-{
-  return NULL;
-}
-
-/**
- * goa_oauth2_provider_get_scope:
- * @provider: A #GoaOAuth2Provider.
- *
- * Gets the <ulink
- * url="http://tools.ietf.org/html/draft-ietf-oauth-v2-15#section-2.1.1">scope</ulink>
- * used when requesting authorization.
- *
- * This is a virtual method where the default implementation returns
- * %NULL.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth2_provider_get_scope (GoaOAuth2Provider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->get_scope (provider);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-/**
- * goa_oauth2_provider_get_client_id:
- * @provider: A #GoaOAuth2Provider.
- *
- * Gets the <ulink
- * url="http://tools.ietf.org/html/draft-ietf-oauth-v2-15#section-3">client_id</ulink>
- * identifying the client.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth2_provider_get_client_id (GoaOAuth2Provider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->get_client_id (provider);
-}
-
-/**
- * goa_oauth2_provider_get_client_secret:
- * @provider: A #GoaOAuth2Provider.
- *
- * Gets the <ulink
- * url="http://tools.ietf.org/html/draft-ietf-oauth-v2-15#section-3">client_secret</ulink>
- * associated with the client.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth2_provider_get_client_secret (GoaOAuth2Provider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->get_client_secret (provider);
-}
-
-/**
- * goa_oauth2_provider_get_authentication_cookie:
- * @provider: A #GoaOAuth2Provider.
- *
- * Gets the name of a cookie whose presence indicates that the user has been able to
- * log in during the authorization step. This is used to modify the embedded web
- * browser UI that is presented to the user.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth2_provider_get_authentication_cookie (GoaOAuth2Provider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->get_authentication_cookie (provider);
-}
-
-/**
- * goa_oauth2_provider_get_identity_sync:
- * @provider: A #GoaOAuth2Provider.
- * @access_token: A valid OAuth 2.0 access token.
- * @out_presentation_identity: (out): Return location for presentation identity or %NULL.
- * @cancellable: (allow-none): A #GCancellable or %NULL.
- * @error: Return location for @error or %NULL.
- *
- * Method that returns the identity corresponding to
- * @access_token.
- *
- * The identity is needed because all authentication happens out of
- * band. In addition to the identity, an implementation also returns a
- * <emphasis>presentation identity</emphasis> that is more suitable
- * for presentation (the identity could be a GUID for example).
- *
- * The calling thread is blocked while the identity is obtained.
- *
- * Returns: The identity or %NULL if error is set. The returned string
- * must be freed with g_free().
- */
-gchar *
-goa_oauth2_provider_get_identity_sync (GoaOAuth2Provider    *provider,
-                                       const gchar          *access_token,
-                                       gchar               **out_presentation_identity,
-                                       GCancellable         *cancellable,
-                                       GError              **error)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  g_return_val_if_fail (access_token != NULL, NULL);
-  g_return_val_if_fail (cancellable == NULL || G_IS_CANCELLABLE (cancellable), NULL);
-  g_return_val_if_fail (error == NULL || *error == NULL, NULL);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->get_identity_sync (provider, access_token, out_presentation_identity, cancellable, error);
-}
-
-/**
- * goa_oauth2_provider_is_deny_node:
- * @provider: A #GoaOAuth2Provider.
- * @node: A WebKitDOMNode.
- *
- * Checks whether @node is the HTML UI element that the user can use
- * to deny permission to access his account. Usually they are either a
- * WebKitDOMHTMLButtonElement or a WebKitDOMHTMLInputElement.
- *
- * Please note that providers may have multiple such elements in their
- * UI and this method should catch all of them.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: %TRUE if the @node can be used to deny permission.
- */
-gboolean
-goa_oauth2_provider_is_deny_node (GoaOAuth2Provider *provider, WebKitDOMNode *node)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), FALSE);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->is_deny_node (provider, node);
-}
-
-/**
- * goa_oauth2_provider_is_identity_node:
- * @provider: A #GoaOAuth2Provider.
- * @element: A WebKitDOMHTMLInputElement.
- *
- * Checks whether @element is the HTML UI element that the user can
- * use to identify herself at the provider.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: %TRUE if the @element can be used to deny permission.
- */
-gboolean
-goa_oauth2_provider_is_identity_node (GoaOAuth2Provider *provider, WebKitDOMHTMLInputElement *element)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), FALSE);
-  return GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->is_identity_node (provider, element);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static SoupCookie*
-create_cookie_from_variant (GVariant *variant)
-{
-  SoupCookie *cookie;
-  gchar *name, *value, *domain, *path;
-  gboolean secure, http_only;
-
-  g_return_val_if_fail (g_variant_is_of_type (variant, G_VARIANT_TYPE_VARDICT), NULL);
-
-  g_variant_lookup (variant, "name", "&s", &name);
-  g_variant_lookup (variant, "value", "&s", &value);
-  g_variant_lookup (variant, "domain", "&s", &domain);
-  g_variant_lookup (variant, "path", "&s", &path);
-  g_variant_lookup (variant, "secure", "b", &secure);
-  g_variant_lookup (variant, "http_only", "b", &http_only);
-
-  cookie = soup_cookie_new (name, value, domain, path, -1);
-  soup_cookie_set_secure (cookie, secure);
-  soup_cookie_set_http_only (cookie, http_only);
-
-  return cookie;
-}
-
-static GSList*
-extract_cookies_from_preseed_data (GVariant *preseed)
-{
-  GVariant *cookies_v, *cookie_v;
-  GSList *cookies = NULL;
-  GVariantIter iter;
-
-  if (preseed == NULL)
-    return NULL;
-
-  cookies_v = g_variant_lookup_value (preseed, "cookies", NULL);
-  if (cookies_v == NULL)
-    return NULL;
-
-  if (!g_variant_is_of_type (cookies_v, G_VARIANT_TYPE ("av")))
-    {
-      g_warning ("Wrong type for the 'cookies' GVariant, expected 'av' but got '%s'",
-                 (gchar *)g_variant_get_type (cookies_v));
-      goto out;
-    }
-
-  g_variant_iter_init (&iter, cookies_v);
-  while ((cookie_v = g_variant_iter_next_value (&iter)) != NULL)
-    {
-      SoupCookie *cookie = create_cookie_from_variant (g_variant_get_variant (cookie_v));
-      if (cookie != NULL)
-          cookies = g_slist_prepend (cookies, cookie);
-      g_variant_unref(cookie_v);
-    }
-out:
-  g_variant_unref(cookies_v);
-  return cookies;
-}
-
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-get_tokens_sync (GoaOAuth2Provider  *provider,
-                 const gchar        *authorization_code,
-                 const gchar        *refresh_token,
-                 gchar             **out_refresh_token,
-                 gint               *out_access_token_expires_in,
-                 GCancellable       *cancellable,
-                 GError            **error)
-{
-  GError *tokens_error;
-  RestProxy *proxy;
-  RestProxyCall *call;
-  gchar *ret;
-  guint status_code;
-  gchar *ret_access_token;
-  gint ret_access_token_expires_in;
-  gchar *ret_refresh_token;
-  const gchar *payload;
-  gsize payload_length;
-  const gchar *client_secret;
-
-  ret = NULL;
-  ret_access_token = NULL;
-  ret_access_token_expires_in = 0;
-  ret_refresh_token = NULL;
-
-  tokens_error = NULL;
-
-  proxy = rest_proxy_new (goa_oauth2_provider_get_token_uri (provider), FALSE);
-  call = rest_proxy_new_call (proxy);
-
-  rest_proxy_call_set_method (call, "POST");
-  rest_proxy_call_add_header (call, "Content-Type", "application/x-www-form-urlencoded");
-  rest_proxy_call_add_param (call, "client_id", goa_oauth2_provider_get_client_id (provider));
-
-  client_secret = goa_oauth2_provider_get_client_secret (provider);
-  if (client_secret != NULL)
-    rest_proxy_call_add_param (call, "client_secret", client_secret);
-
-  if (refresh_token != NULL)
-    {
-      /* Swell, we have a refresh code - just use that */
-      rest_proxy_call_add_param (call, "grant_type", "refresh_token");
-      rest_proxy_call_add_param (call, "refresh_token", refresh_token);
-    }
-  else
-    {
-      /* No refresh code.. request an access token using the authorization code instead */
-      rest_proxy_call_add_param (call, "grant_type", "authorization_code");
-      rest_proxy_call_add_param (call, "redirect_uri", goa_oauth2_provider_get_redirect_uri (provider));
-      rest_proxy_call_add_param (call, "code", authorization_code);
-    }
-
-  /* TODO: cancellable support? */
-  if (!rest_proxy_call_sync (call, error))
-    goto out;
-
-  status_code = rest_proxy_call_get_status_code (call);
-  if (status_code != 200)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Expected status 200 when requesting access token, instead got status %d (%s)"),
-                   status_code,
-                   rest_proxy_call_get_status_message (call));
-      goto out;
-    }
-
-  payload = rest_proxy_call_get_payload (call);
-  payload_length = rest_proxy_call_get_payload_length (call);
-  /* some older OAuth2 implementations does not return json - handle that too */
-  if (g_str_has_prefix (payload, "access_token="))
-    {
-      GHashTable *hash;
-      const gchar *expires_in_str;
-
-      g_debug ("Response is not JSON - possibly old OAuth2 implementation");
-
-      hash = soup_form_decode (payload);
-      ret_access_token = g_strdup (g_hash_table_lookup (hash, "access_token"));
-      if (ret_access_token == NULL)
-        {
-          g_warning ("Did not find access_token in non-JSON data");
-          g_set_error (error,
-                       GOA_ERROR,
-                       GOA_ERROR_FAILED,
-                       _("Could not parse response"));
-          g_hash_table_unref (hash);
-          goto out;
-        }
-      /* refresh_token is optional */
-      ret_refresh_token = g_hash_table_lookup (hash, "refresh_token");
-      /* expires_in is optional */
-      expires_in_str = g_hash_table_lookup (hash, "expires_in");
-      /* sometimes "expires_in" appears as "expires" */
-      if (expires_in_str == NULL)
-        expires_in_str = g_hash_table_lookup (hash, "expires");
-      if (expires_in_str != NULL)
-        ret_access_token_expires_in = atoi (expires_in_str);
-      g_hash_table_unref (hash);
-    }
-  else
-    {
-      JsonParser *parser;
-      JsonObject *object;
-
-      parser = json_parser_new ();
-      if (!json_parser_load_from_data (parser, payload, payload_length, &tokens_error))
-        {
-          g_warning ("json_parser_load_from_data() failed: %s (%s, %d)",
-                     tokens_error->message,
-                     g_quark_to_string (tokens_error->domain),
-                     tokens_error->code);
-          g_set_error (error,
-                       GOA_ERROR,
-                       GOA_ERROR_FAILED,
-                       _("Could not parse response"));
-          g_object_unref (parser);
-          goto out;
-        }
-      object = json_node_get_object (json_parser_get_root (parser));
-      ret_access_token = g_strdup (json_object_get_string_member (object, "access_token"));
-      if (ret_access_token == NULL)
-        {
-          g_warning ("Did not find access_token in JSON data");
-          g_set_error (error,
-                       GOA_ERROR,
-                       GOA_ERROR_FAILED,
-                       _("Could not parse response"));
-          goto out;
-        }
-      /* refresh_token is optional... */
-      if (json_object_has_member (object, "refresh_token"))
-        ret_refresh_token = g_strdup (json_object_get_string_member (object, "refresh_token"));
-      if (json_object_has_member (object, "expires_in"))
-        ret_access_token_expires_in = json_object_get_int_member (object, "expires_in");
-      g_object_unref (parser);
-    }
-
-  ret = ret_access_token;
-  ret_access_token = NULL;
-  if (out_access_token_expires_in != NULL)
-    *out_access_token_expires_in = ret_access_token_expires_in;
-  if (out_refresh_token != NULL)
-    {
-      *out_refresh_token = ret_refresh_token;
-      ret_refresh_token = NULL;
-    }
-
- out:
-  g_clear_error (&tokens_error);
-  g_free (ret_access_token);
-  g_free (ret_refresh_token);
-  if (call != NULL)
-    g_object_unref (call);
-  if (proxy != NULL)
-    g_object_unref (proxy);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-on_dom_node_click (WebKitDOMNode *element, WebKitDOMEvent *event, gpointer user_data)
-{
-  GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (user_data);
-  GoaOAuth2ProviderPrivate *priv = provider->priv;
-  gtk_dialog_response (priv->dialog, GTK_RESPONSE_CANCEL);
-}
-
-static void
-on_form_submit (WebKitDOMNode *element, WebKitDOMEvent *event, gpointer user_data)
-{
-  GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (user_data);
-  GoaOAuth2ProviderPrivate *priv = provider->priv;
-
-  if (priv->password_node == NULL)
-    return;
-
-  priv->password = webkit_dom_html_input_element_get_value (priv->password_node);
-  priv->password_node = NULL;
-}
-
-static void
-on_web_view_document_load_finished (WebKitWebView *web_view, WebKitWebFrame *frame, gpointer user_data)
-{
-  GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (user_data);
-  GoaOAuth2ProviderPrivate *priv = provider->priv;
-  WebKitDOMDocument *document;
-  WebKitDOMNodeList *elements;
-  gulong element_count;
-  gulong i;
-
-  document = webkit_web_view_get_dom_document (WEBKIT_WEB_VIEW (web_view));
-  elements = webkit_dom_document_get_elements_by_tag_name (document, "*");
-  element_count = webkit_dom_node_list_get_length (elements);
-
-  for (i = 0; i < element_count; i++)
-    {
-      WebKitDOMNode *element = webkit_dom_node_list_item (elements, i);
-
-      if (goa_oauth2_provider_is_deny_node (provider, element))
-        {
-          webkit_dom_event_target_add_event_listener (WEBKIT_DOM_EVENT_TARGET (element),
-                                                      "click",
-                                                      G_CALLBACK (on_dom_node_click),
-                                                      FALSE,
-                                                      provider);
-        }
-      else if (priv->existing_identity != NULL
-               && WEBKIT_DOM_IS_HTML_INPUT_ELEMENT (element)
-               && goa_oauth2_provider_is_identity_node (provider, WEBKIT_DOM_HTML_INPUT_ELEMENT (element)))
-        {
-          webkit_dom_html_input_element_set_value (WEBKIT_DOM_HTML_INPUT_ELEMENT (element),
-                                                   priv->existing_identity);
-          webkit_dom_html_input_element_set_read_only (WEBKIT_DOM_HTML_INPUT_ELEMENT (element), TRUE);
-        }
-      else if (WEBKIT_DOM_IS_HTML_INPUT_ELEMENT (element)
-               && goa_oauth2_provider_is_password_node (provider, WEBKIT_DOM_HTML_INPUT_ELEMENT (element)))
-        {
-          WebKitDOMHTMLFormElement *form;
-
-          form = webkit_dom_html_input_element_get_form (WEBKIT_DOM_HTML_INPUT_ELEMENT (element));
-          if (form != NULL)
-            {
-              priv->password_node = WEBKIT_DOM_HTML_INPUT_ELEMENT (element);
-              g_clear_pointer (&priv->password, g_free);
-              webkit_dom_event_target_add_event_listener (WEBKIT_DOM_EVENT_TARGET (form),
-                                                          "submit",
-                                                          G_CALLBACK (on_form_submit),
-                                                          FALSE,
-                                                          provider);
-            }
-        }
-    }
-}
-
-static gboolean
-on_web_view_navigation_policy_decision_requested (WebKitWebView             *webView,
-                                                  WebKitWebFrame            *frame,
-                                                  WebKitNetworkRequest      *request,
-                                                  WebKitWebNavigationAction *navigation_action,
-                                                  WebKitWebPolicyDecision   *policy_decision,
-                                                  gpointer                   user_data)
-{
-  GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (user_data);
-  GoaOAuth2ProviderPrivate *priv = provider->priv;
-  GHashTable *key_value_pairs;
-  SoupMessage *message;
-  SoupURI *uri;
-  const gchar *fragment;
-  const gchar *oauth2_error;
-  const gchar *query;
-  const gchar *redirect_uri;
-  const gchar *requested_uri;
-  gint response_id;
-
-  /* TODO: use oauth2_proxy_extract_access_token() */
-
-  requested_uri = webkit_network_request_get_uri (request);
-  redirect_uri = goa_oauth2_provider_get_redirect_uri (provider);
-  if (!g_str_has_prefix (requested_uri, redirect_uri))
-    goto default_behaviour;
-
-  message = webkit_network_request_get_message (request);
-  uri = soup_message_get_uri (message);
-  fragment = soup_uri_get_fragment (uri);
-  query = soup_uri_get_query (uri);
-
-  /* Three cases:
-   * 1) we can either have the backend handle the URI for us, or
-   * 2) we can either have the access_token and other information
-   *    directly in the fragment part of the URI, or
-   * 3) the auth code can be in the query part of the URI, with which
-   *    we'll obtain the token later.
-   */
-  if (GOA_OAUTH2_PROVIDER_GET_CLASS (provider)->process_redirect_url)
-    {
-      gchar *url;
-
-      url = soup_uri_to_string (uri, FALSE);
-      if (!goa_oauth2_provider_process_redirect_url (provider, url, &priv->access_token, &priv->error))
-        {
-          g_prefix_error (&priv->error, _("Authorization response: "));
-          priv->error->domain = GOA_ERROR;
-          priv->error->code = GOA_ERROR_NOT_AUTHORIZED;
-          response_id = GTK_RESPONSE_CLOSE;
-        }
-      else
-        response_id = GTK_RESPONSE_OK;
-
-      g_free (url);
-      goto ignore_request;
-    }
-
-  if (fragment != NULL)
-    {
-      /* fragment is encoded into a key/value pairs for the token and
-       * expiration values, using the same syntax as a URL query */
-      key_value_pairs = soup_form_decode (fragment);
-
-      /* We might use oauth2_proxy_extract_access_token() here but
-       * we can also extract other information.
-       */
-      priv->access_token = g_strdup (g_hash_table_lookup (key_value_pairs, "access_token"));
-      if (priv->access_token != NULL)
-        {
-          gchar *expires_in_str = NULL;
-
-          expires_in_str = g_hash_table_lookup (key_value_pairs, "expires_in");
-          /* sometimes "expires_in" appears as "expires" */
-          if (expires_in_str == NULL)
-            expires_in_str = g_hash_table_lookup (key_value_pairs, "expires");
-
-          if (expires_in_str != NULL)
-            priv->access_token_expires_in = atoi (expires_in_str);
-
-          priv->refresh_token = g_strdup (g_hash_table_lookup (key_value_pairs, "refresh_token"));
-
-          response_id = GTK_RESPONSE_OK;
-        }
-      g_hash_table_unref (key_value_pairs);
-    }
-
-  if (priv->access_token != NULL)
-    goto ignore_request;
-
-  if (query != NULL)
-    {
-      key_value_pairs = soup_form_decode (query);
-
-      priv->authorization_code = g_strdup (g_hash_table_lookup (key_value_pairs, "code"));
-      if (priv->authorization_code != NULL)
-        response_id = GTK_RESPONSE_OK;
-
-      g_hash_table_unref (key_value_pairs);
-    }
-
-  if (priv->authorization_code != NULL)
-    goto ignore_request;
-
-  /* In case we don't find the access_token or auth code, then look
-   * for the error in the query part of the URI.
-   */
-  key_value_pairs = soup_form_decode (query);
-  oauth2_error = (const gchar *) g_hash_table_lookup (key_value_pairs, "error");
-  if (g_strcmp0 (oauth2_error, GOA_OAUTH2_ACCESS_DENIED) == 0)
-    response_id = GTK_RESPONSE_CANCEL;
-  else
-    {
-      g_set_error (&priv->error,
-                   GOA_ERROR,
-                   GOA_ERROR_NOT_AUTHORIZED,
-                   _("Authorization response: %s"),
-                   oauth2_error);
-      response_id = GTK_RESPONSE_CLOSE;
-    }
-  g_hash_table_unref (key_value_pairs);
-  goto ignore_request;
-
- ignore_request:
-  gtk_dialog_response (priv->dialog, response_id);
-  webkit_web_policy_decision_ignore (policy_decision);
-  return TRUE;
-
- default_behaviour:
-  return FALSE;
-}
-
-static gboolean
-get_tokens_and_identity (GoaOAuth2Provider  *provider,
-                         gboolean            add_account,
-                         const gchar        *existing_identity,
-                         GtkDialog          *dialog,
-                         GtkBox             *vbox)
-{
-  GoaOAuth2ProviderPrivate *priv = provider->priv;
-  gboolean ret;
-  gchar *url;
-  GSList *cookies;
-  GtkWidget *embed;
-  GtkWidget *grid;
-  GVariant *preseed_data;
-  GtkWidget *web_view;
-  const gchar *scope;
-  gchar *escaped_redirect_uri;
-  gchar *escaped_client_id;
-  gchar *escaped_scope;
-
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), FALSE);
-  g_return_val_if_fail ((!add_account && existing_identity != NULL && existing_identity[0] != '\0')
-                        || (add_account && existing_identity == NULL), FALSE);
-  g_return_val_if_fail (GTK_IS_DIALOG (dialog), FALSE);
-  g_return_val_if_fail (GTK_IS_BOX (vbox), FALSE);
-  g_return_val_if_fail (priv->error == NULL, FALSE);
-
-  ret = FALSE;
-  escaped_redirect_uri = NULL;
-  escaped_client_id = NULL;
-  escaped_scope = NULL;
-
-  /* TODO: check with NM whether we're online, if not - return error */
-
-  priv->dialog = dialog;
-  priv->existing_identity = existing_identity;
-
-  g_clear_pointer (&priv->password, g_free);
-  g_clear_pointer (&priv->identity, g_free);
-  g_clear_pointer (&priv->presentation_identity, g_free);
-  g_clear_pointer (&priv->authorization_code, g_free);
-  g_clear_pointer (&priv->access_token, g_free);
-  g_clear_pointer (&priv->refresh_token, g_free);
-
-  /* TODO: use oauth2_proxy_build_login_url_full() */
-  escaped_redirect_uri = g_uri_escape_string (goa_oauth2_provider_get_redirect_uri (provider), NULL, TRUE);
-  escaped_client_id = g_uri_escape_string (goa_oauth2_provider_get_client_id (provider), NULL, TRUE);
-  scope = goa_oauth2_provider_get_scope (provider);
-  if (scope != NULL)
-    escaped_scope = g_uri_escape_string (goa_oauth2_provider_get_scope (provider), NULL, TRUE);
-  else
-    escaped_scope = NULL;
-  url = goa_oauth2_provider_build_authorization_uri (provider,
-                                                     goa_oauth2_provider_get_authorization_uri (provider),
-                                                     escaped_redirect_uri,
-                                                     escaped_client_id,
-                                                     escaped_scope);
-
-  goa_utils_set_dialog_title (GOA_PROVIDER (provider), dialog, add_account);
-
-  grid = gtk_grid_new ();
-  gtk_container_set_border_width (GTK_CONTAINER (grid), 5);
-  gtk_widget_set_margin_bottom (grid, 6);
-  gtk_orientable_set_orientation (GTK_ORIENTABLE (grid), GTK_ORIENTATION_VERTICAL);
-  gtk_grid_set_row_spacing (GTK_GRID (grid), 12);
-  gtk_container_add (GTK_CONTAINER (vbox), grid);
-
-  web_view = goa_web_view_new ();
-  gtk_widget_set_hexpand (web_view, TRUE);
-  gtk_widget_set_vexpand (web_view, TRUE);
-  embed = goa_web_view_get_view (GOA_WEB_VIEW (web_view));
-
-  preseed_data = goa_provider_get_preseed_data (GOA_PROVIDER (provider));
-  cookies = extract_cookies_from_preseed_data (preseed_data);
-  goa_web_view_add_cookies (GOA_WEB_VIEW (web_view), cookies);
-  soup_cookies_free (cookies);
-
-  if (goa_oauth2_provider_get_use_mobile_browser (provider))
-    goa_web_view_fake_mobile (GOA_WEB_VIEW (web_view));
-
-  webkit_web_view_load_uri (WEBKIT_WEB_VIEW (embed), url);
-  g_signal_connect (embed, "document-load-finished", G_CALLBACK (on_web_view_document_load_finished), provider);
-  g_signal_connect (embed,
-                    "navigation-policy-decision-requested",
-                    G_CALLBACK (on_web_view_navigation_policy_decision_requested),
-                    provider);
-
-  gtk_container_add (GTK_CONTAINER (grid), web_view);
-
-  gtk_widget_show_all (GTK_WIDGET (vbox));
-  gtk_dialog_run (GTK_DIALOG (dialog));
-
-  /* We can have either the auth code, with which we'll obtain the token, or
-   * the token directly if we are using a client side flow, since we don't
-   * need to pass the code to the remote application.
-   */
-  if (priv->authorization_code == NULL && priv->access_token == NULL)
-    {
-      if (priv->error == NULL)
-        {
-          g_set_error (&priv->error,
-                       GOA_ERROR,
-                       GOA_ERROR_DIALOG_DISMISSED,
-                       _("Dialog was dismissed"));
-        }
-      goto out;
-    }
-  g_assert (priv->error == NULL);
-
-  gtk_widget_hide (GTK_WIDGET (dialog));
-
-  if (priv->authorization_code != NULL)
-    {
-      /* OK, we now have the authorization code... now we need to get the
-       * email address (to e.g. check if the account already exists on
-       * @client).. for that we need to get a (short-lived) access token
-       * and a refresh_token
-       */
-
-      /* TODO: run in worker thread */
-      priv->access_token = get_tokens_sync (provider,
-                                            priv->authorization_code,
-                                            NULL, /* refresh_token */
-                                            &priv->refresh_token,
-                                            &priv->access_token_expires_in,
-                                            NULL, /* GCancellable */
-                                            &priv->error);
-      if (priv->access_token == NULL)
-        {
-          g_prefix_error (&priv->error, _("Error getting an Access Token: "));
-          goto out;
-        }
-    }
-
-  g_assert (priv->access_token != NULL);
-
-  /* TODO: run in worker thread */
-  priv->identity = goa_oauth2_provider_get_identity_sync (provider,
-                                                          priv->access_token,
-                                                          &priv->presentation_identity,
-                                                          NULL, /* TODO: GCancellable */
-                                                          &priv->error);
-  if (priv->identity == NULL)
-    {
-      g_prefix_error (&priv->error, _("Error getting identity: "));
-      goto out;
-    }
-
-  ret = TRUE;
-
- out:
-  g_free (url);
-  g_free (escaped_redirect_uri);
-  g_free (escaped_client_id);
-  g_free (escaped_scope);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-add_account_cb (GoaManager   *manager,
-                GAsyncResult *res,
-                gpointer      user_data)
-{
-  GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (user_data);
-  GoaOAuth2ProviderPrivate *priv = provider->priv;
-  goa_manager_call_add_account_finish (manager,
-                                       &priv->account_object_path,
-                                       res,
-                                       &priv->error);
-  g_main_loop_quit (priv->loop);
-}
-
-static gint64
-duration_to_abs_usec (gint duration_sec)
-{
-  gint64 ret;
-  GTimeVal now;
-
-  g_get_current_time (&now);
-  ret = ((gint64) now.tv_sec) * 1000L * 1000L + ((gint64) now.tv_usec);
-  ret += ((gint64) duration_sec) * 1000L * 1000L;
-  return ret;
-}
-
-static gint
-abs_usec_to_duration (gint64 abs_usec)
-{
-  gint64 ret;
-  GTimeVal now;
-
-  g_get_current_time (&now);
-  ret = abs_usec - (((gint64) now.tv_sec) * 1000L * 1000L + ((gint64) now.tv_usec));
-  ret /= 1000L * 1000L;
-  return ret;
-}
-
-static void
-add_credentials_key_values (GoaOAuth2Provider *provider,
-                            GVariantBuilder *credentials)
-{
-  GoaOAuth2ProviderPrivate *priv = provider->priv;
-
-  if (priv->authorization_code != NULL)
-    g_variant_builder_add (credentials, "{sv}", "authorization_code",
-                           g_variant_new_string (priv->authorization_code));
-  g_variant_builder_add (credentials, "{sv}", "access_token", g_variant_new_string (priv->access_token));
-  if (priv->access_token_expires_in > 0)
-    g_variant_builder_add (credentials, "{sv}", "access_token_expires_at",
-                           g_variant_new_int64 (duration_to_abs_usec (priv->access_token_expires_in)));
-  if (priv->refresh_token != NULL)
-    g_variant_builder_add (credentials, "{sv}", "refresh_token", g_variant_new_string (priv->refresh_token));
-  if (priv->password != NULL)
-    g_variant_builder_add (credentials, "{sv}", "password", g_variant_new_string (priv->password));
-}
-
-static GoaObject *
-goa_oauth2_provider_add_account (GoaProvider *_provider,
-                                         GoaClient          *client,
-                                         GtkDialog          *dialog,
-                                         GtkBox             *vbox,
-                                         GError            **error)
-{
-  GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (_provider);
-  GoaOAuth2ProviderPrivate *priv = provider->priv;
-  GoaObject *ret;
-  GVariantBuilder credentials;
-  GVariantBuilder details;
-
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  g_return_val_if_fail (GOA_IS_CLIENT (client), NULL);
-  g_return_val_if_fail (GTK_IS_DIALOG (dialog), NULL);
-  g_return_val_if_fail (GTK_IS_BOX (vbox), NULL);
-  g_return_val_if_fail (error == NULL || *error == NULL, NULL);
-
-  ret = NULL;
-
-  if (!get_tokens_and_identity (provider,
-                                TRUE,
-                                NULL,
-                                dialog,
-                                vbox))
-    goto out;
-
-  /* OK, got the identity... see if there's already an account
-   * of this type with the given identity
-   */
-  if (!goa_utils_check_duplicate (client,
-                                  priv->identity,
-                                  priv->presentation_identity,
-                                  goa_provider_get_provider_type (GOA_PROVIDER (provider)),
-                                  (GoaPeekInterfaceFunc) goa_object_peek_oauth2_based,
-                                  &priv->error))
-    goto out;
-
-  g_variant_builder_init (&credentials, G_VARIANT_TYPE_VARDICT);
-  add_credentials_key_values (provider, &credentials);
-
-  g_variant_builder_init (&details, G_VARIANT_TYPE ("a{ss}"));
-  goa_oauth2_provider_add_account_key_values (provider, &details);
-
-  /* we want the GoaClient to update before this method returns (so it
-   * can create a proxy for the new object) so run the mainloop while
-   * waiting for this to complete
-   */
-  goa_manager_call_add_account (goa_client_get_manager (client),
-                                goa_provider_get_provider_type (GOA_PROVIDER (provider)),
-                                priv->identity,
-                                priv->presentation_identity,
-                                g_variant_builder_end (&credentials),
-                                g_variant_builder_end (&details),
-                                NULL, /* GCancellable* */
-                                (GAsyncReadyCallback) add_account_cb,
-                                provider);
-  priv->loop = g_main_loop_new (NULL, FALSE);
-  g_main_loop_run (priv->loop);
-  if (priv->error != NULL)
-    goto out;
-
-  ret = GOA_OBJECT (g_dbus_object_manager_get_object (goa_client_get_object_manager (client),
-                                                      priv->account_object_path));
-
- out:
-  /* We might have an object even when priv->error is set.
-   * eg., if we failed to store the credentials in the keyring.
-   */
-  if (priv->error != NULL)
-    g_propagate_error (error, priv->error);
-  else
-    g_assert (ret != NULL);
-
-  g_clear_pointer (&priv->account_object_path, g_free);
-  g_clear_pointer (&priv->loop, g_main_loop_unref);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-goa_oauth2_provider_refresh_account (GoaProvider  *_provider,
-                                     GoaClient    *client,
-                                     GoaObject    *object,
-                                     GtkWindow    *parent,
-                                     GError      **error)
-{
-  GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (_provider);
-  GoaOAuth2ProviderPrivate *priv = provider->priv;
-  GoaAccount *account;
-  GtkWidget *dialog;
-  const gchar *existing_identity;
-  const gchar *existing_presentation_identity;
-  GVariantBuilder builder;
-  gboolean ret;
-
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), FALSE);
-  g_return_val_if_fail (GOA_IS_CLIENT (client), FALSE);
-  g_return_val_if_fail (GOA_IS_OBJECT (object), FALSE);
-  g_return_val_if_fail (parent == NULL || GTK_IS_WINDOW (parent), FALSE);
-  g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
-
-  ret = FALSE;
-
-  dialog = gtk_dialog_new_with_buttons (NULL,
-                                        parent,
-                                        GTK_DIALOG_MODAL
-                                        | GTK_DIALOG_DESTROY_WITH_PARENT
-                                        | GTK_DIALOG_USE_HEADER_BAR,
-                                        NULL,
-                                        NULL);
-  gtk_container_set_border_width (GTK_CONTAINER (dialog), 12);
-  gtk_window_set_resizable (GTK_WINDOW (dialog), FALSE);
-  gtk_widget_show_all (dialog);
-
-  account = goa_object_peek_account (object);
-
-  /* We abuse presentation identity here because for some providers
-   * identity can be a machine readable ID, which can not be used to
-   * log in via the provider's web interface.
-   */
-  existing_presentation_identity = goa_account_get_presentation_identity (account);
-  if (!get_tokens_and_identity (provider,
-                                FALSE,
-                                existing_presentation_identity,
-                                GTK_DIALOG (dialog),
-                                GTK_BOX (gtk_dialog_get_content_area (GTK_DIALOG (dialog)))))
-    goto out;
-
-  /* Changes made to the web interface by the providers can break our
-   * DOM parsing. So we should still query and check the identity
-   * afterwards.
-   */
-  existing_identity = goa_account_get_identity (account);
-  if (g_strcmp0 (priv->identity, existing_identity) != 0)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Was asked to log in as %s, but logged in as %s"),
-                   existing_identity,
-                   priv->identity);
-      goto out;
-    }
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE_VARDICT);
-  add_credentials_key_values (provider, &builder);
-  if (!goa_utils_store_credentials_for_object_sync (GOA_PROVIDER (provider),
-                                                    object,
-                                                    g_variant_builder_end (&builder),
-                                                    NULL, /* GCancellable */
-                                                    error))
-    goto out;
-
-  goa_account_call_ensure_credentials (goa_object_peek_account (object),
-                                       NULL, /* GCancellable */
-                                       NULL, NULL); /* callback, user_data */
-
-  ret = TRUE;
-
- out:
-  if (priv->error != NULL)
-    g_propagate_error (error, priv->error);
-
-  gtk_widget_destroy (dialog);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-free_mutex (GMutex *mutex)
-{
-  g_mutex_clear (mutex);
-  g_slice_free (GMutex, mutex);
-}
-
-/**
- * goa_oauth2_provider_get_access_token_sync:
- * @provider: A #GoaOAuth2Provider.
- * @object: A #GoaObject.
- * @force_refresh: If set to %TRUE, forces a refresh of the access token, if possible.
- * @out_access_token_expires_in: (out): Return location for how many seconds the returned token is valid for (0 if unknown) or %NULL.
- * @cancellable: (allow-none): A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
- *
- * Synchronously gets an access token for @object. The calling thread
- * is blocked while the operation is pending.
- *
- * The resulting token is typically read from the local cache so most
- * of the time only a local roundtrip to the storage for the token
- * cache (e.g. <command>gnome-keyring-daemon</command>) is
- * needed. However, the operation may involve refreshing the token
- * with the service provider so a full network round-trip may be
- * needed.
- *
- * Note that multiple calls are serialized to avoid multiple
- * outstanding requests to the service provider.
- *
- * This operation may fail if e.g. unable to refresh the credentials
- * or if network connectivity is not available. Note that even if a
- * token is returned, the returned token isn't guaranteed to work -
- * use goa_provider_ensure_credentials_sync() if you need
- * stronger guarantees.
- *
- * Returns: The access token or %NULL if error is set. The returned
- * string must be freed with g_free().
- */
-gchar *
-goa_oauth2_provider_get_access_token_sync (GoaOAuth2Provider  *provider,
-                                           GoaObject          *object,
-                                           gboolean            force_refresh,
-                                           gint               *out_access_token_expires_in,
-                                           GCancellable       *cancellable,
-                                           GError            **error)
-{
-  GVariant *credentials;
-  GVariantIter iter;
-  const gchar *key;
-  GVariant *value;
-  gchar *authorization_code;
-  gchar *access_token;
-  gint access_token_expires_in;
-  gchar *refresh_token;
-  gchar *old_refresh_token;
-  gchar *password;
-  gboolean success;
-  GVariantBuilder builder;
-  gchar *ret;
-  GMutex *lock;
-
-  g_return_val_if_fail (GOA_IS_OAUTH2_PROVIDER (provider), NULL);
-  g_return_val_if_fail (GOA_IS_OBJECT (object), NULL);
-  g_return_val_if_fail (cancellable == NULL || G_IS_CANCELLABLE (cancellable), NULL);
-  g_return_val_if_fail (error == NULL || *error == NULL, NULL);
-
-  ret = NULL;
-  credentials = NULL;
-  authorization_code = NULL;
-  access_token = NULL;
-  refresh_token = NULL;
-  old_refresh_token = NULL;
-  password = NULL;
-  access_token_expires_in = 0;
-  success = FALSE;
-
-  /* provider_lock is too coarse, use a per-object lock instead */
-  G_LOCK (provider_lock);
-  lock = g_object_get_data (G_OBJECT (object), "-goa-oauth2-provider-get-access-token-lock");
-  if (lock == NULL)
-    {
-      lock = g_slice_new0 (GMutex);
-      g_mutex_init (lock);
-      g_object_set_data_full (G_OBJECT (object),
-                              "-goa-oauth2-provider-get-access-token-lock",
-                              lock,
-                              (GDestroyNotify) free_mutex);
-    }
-  G_UNLOCK (provider_lock);
-
-  g_mutex_lock (lock);
-
-  /* First, get the credentials from the keyring */
-  credentials = goa_utils_lookup_credentials_sync (GOA_PROVIDER (provider),
-                                                   object,
-                                                   cancellable,
-                                                   error);
-  if (credentials == NULL)
-    {
-      if (error != NULL)
-        {
-          (*error)->domain = GOA_ERROR;
-          (*error)->code = GOA_ERROR_NOT_AUTHORIZED;
-        }
-      goto out;
-    }
-
-  g_variant_iter_init (&iter, credentials);
-  while (g_variant_iter_next (&iter, "{&sv}", &key, &value))
-    {
-      if (g_strcmp0 (key, "access_token") == 0)
-        access_token = g_variant_dup_string (value, NULL);
-      else if (g_strcmp0 (key, "access_token_expires_at") == 0)
-        access_token_expires_in = abs_usec_to_duration (g_variant_get_int64 (value));
-      else if (g_strcmp0 (key, "refresh_token") == 0)
-        refresh_token = g_variant_dup_string (value, NULL);
-      else if (g_strcmp0 (key, "authorization_code") == 0)
-        authorization_code = g_variant_dup_string (value, NULL);
-      else if (g_strcmp0 (key, "password") == 0)
-        password = g_variant_dup_string (value, NULL);
-      g_variant_unref (value);
-    }
-
-  if (access_token == NULL)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_NOT_AUTHORIZED,
-                   _("Credentials do not contain access_token"));
-      goto out;
-    }
-
-  /* if we can't refresh the token, just return it no matter what */
-  if (refresh_token == NULL)
-    {
-      g_debug ("Returning locally cached credentials that cannot be refreshed");
-      success = TRUE;
-      goto out;
-    }
-
-  /* If access_token is still "fresh enough" (e.g. more than ten
-   * minutes of life left in it), just return it unless we've been
-   * asked to forcibly refresh it
-   */
-  if (!force_refresh && access_token_expires_in > 10*60)
-    {
-      g_debug ("Returning locally cached credentials (expires in %d seconds)", access_token_expires_in);
-      success = TRUE;
-      goto out;
-    }
-
-  g_debug ("Refreshing locally cached credentials (expires in %d seconds, force_refresh=%d)", access_token_expires_in, force_refresh);
-
-  /* Otherwise, refresh it */
-  old_refresh_token = refresh_token; refresh_token = NULL;
-  g_free (access_token); access_token = NULL;
-  access_token = get_tokens_sync (provider,
-                                  authorization_code,
-                                  old_refresh_token,
-                                  &refresh_token,
-                                  &access_token_expires_in,
-                                  cancellable,
-                                  error);
-  if (access_token == NULL)
-    {
-      if (error != NULL)
-        {
-          g_prefix_error (error, _("Failed to refresh access token (%s, %d): "),
-                          g_quark_to_string ((*error)->domain), (*error)->code);
-          (*error)->code = is_authorization_error (*error) ? GOA_ERROR_NOT_AUTHORIZED : GOA_ERROR_FAILED;
-          (*error)->domain = GOA_ERROR;
-        }
-      goto out;
-    }
-
-  /* It's not a sure thing we get a new refresh_token, so use our old
-   * old if we didn't get a new one
-   */
-  if (refresh_token == NULL)
-    {
-      refresh_token = old_refresh_token;
-      old_refresh_token = NULL;
-    }
-
-  /* Good. Now update the keyring with the refreshed credentials */
-  g_variant_builder_init (&builder, G_VARIANT_TYPE_VARDICT);
-  g_variant_builder_add (&builder, "{sv}", "authorization_code", g_variant_new_string (authorization_code));
-  g_variant_builder_add (&builder, "{sv}", "access_token", g_variant_new_string (access_token));
-  if (access_token_expires_in > 0)
-    g_variant_builder_add (&builder, "{sv}", "access_token_expires_at",
-                           g_variant_new_int64 (duration_to_abs_usec (access_token_expires_in)));
-  if (refresh_token != NULL)
-    g_variant_builder_add (&builder, "{sv}", "refresh_token", g_variant_new_string (refresh_token));
-  if (password != NULL)
-    g_variant_builder_add (&builder, "{sv}", "password", g_variant_new_string (password));
-
-  if (!goa_utils_store_credentials_for_object_sync (GOA_PROVIDER (provider),
-                                                    object,
-                                                    g_variant_builder_end (&builder),
-                                                    cancellable,
-                                                    error))
-    {
-      if (error != NULL)
-        {
-          (*error)->domain = GOA_ERROR;
-          (*error)->code = GOA_ERROR_NOT_AUTHORIZED;
-        }
-      goto out;
-    }
-
-  success = TRUE;
-
- out:
-  if (success)
-    {
-      ret = access_token; access_token = NULL;
-      g_assert (ret != NULL);
-      if (out_access_token_expires_in != NULL)
-        *out_access_token_expires_in = access_token_expires_in;
-    }
-  g_free (authorization_code);
-  g_free (access_token);
-  g_free (refresh_token);
-  g_free (old_refresh_token);
-  g_free (password);
-  if (credentials != NULL)
-    g_variant_unref (credentials);
-
-  g_mutex_unlock (lock);
-
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean on_handle_get_access_token (GoaOAuth2Based        *object,
-                                            GDBusMethodInvocation *invocation,
-                                            gpointer               user_data);
-
-static gboolean
-goa_oauth2_provider_build_object (GoaProvider         *provider,
-                                  GoaObjectSkeleton   *object,
-                                  GKeyFile            *key_file,
-                                  const gchar         *group,
-                                  GDBusConnection     *connection,
-                                  gboolean             just_added,
-                                  GError             **error)
-{
-  GoaOAuth2Based *oauth2_based;
-
-  oauth2_based = goa_object_get_oauth2_based (GOA_OBJECT (object));
-  if (oauth2_based != NULL)
-    goto out;
-
-  oauth2_based = goa_oauth2_based_skeleton_new ();
-  goa_oauth2_based_set_client_id (oauth2_based,
-                                    goa_oauth2_provider_get_client_id (GOA_OAUTH2_PROVIDER (provider)));
-  goa_oauth2_based_set_client_secret (oauth2_based,
-                                       goa_oauth2_provider_get_client_secret (GOA_OAUTH2_PROVIDER (provider)));
-  /* Ensure D-Bus method invocations run in their own thread */
-  g_dbus_interface_skeleton_set_flags (G_DBUS_INTERFACE_SKELETON (oauth2_based),
-                                       G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD);
-  goa_object_skeleton_set_oauth2_based (object, oauth2_based);
-  g_signal_connect (oauth2_based,
-                    "handle-get-access-token",
-                    G_CALLBACK (on_handle_get_access_token),
-                    NULL);
-
- out:
-  g_object_unref (oauth2_based);
-  return TRUE;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-goa_oauth2_provider_ensure_credentials_sync (GoaProvider   *_provider,
-                                             GoaObject     *object,
-                                             gint          *out_expires_in,
-                                             GCancellable  *cancellable,
-                                             GError       **error)
-{
-  GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (_provider);
-  gboolean ret;
-  gchar *access_token;
-  gint access_token_expires_in;
-  gchar *identity;
-  gboolean force_refresh;
-
-  ret = FALSE;
-  access_token = NULL;
-  identity = NULL;
-  force_refresh = FALSE;
-
- again:
-  access_token = goa_oauth2_provider_get_access_token_sync (provider,
-                                                            object,
-                                                            force_refresh,
-                                                            &access_token_expires_in,
-                                                            cancellable,
-                                                            error);
-  if (access_token == NULL)
-    goto out;
-
-  identity = goa_oauth2_provider_get_identity_sync (provider,
-                                                    access_token,
-                                                    NULL, /* out_presentation_identity */
-                                                    cancellable,
-                                                    error);
-  if (identity == NULL)
-    {
-      /* OK, try again, with forcing the locally cached credentials to be refreshed */
-      if (!force_refresh)
-        {
-          force_refresh = TRUE;
-          g_free (access_token); access_token = NULL;
-          g_clear_error (error);
-          goto again;
-        }
-      else
-        {
-          goto out;
-        }
-    }
-
-  /* TODO: maybe check with the identity we have */
-  ret = TRUE;
-  if (out_expires_in != NULL)
-    *out_expires_in = access_token_expires_in;
-
- out:
-  g_free (identity);
-  g_free (access_token);
-  return ret;
-}
-
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-goa_oauth2_provider_finalize (GObject *object)
-{
-  GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (object);
-  GoaOAuth2ProviderPrivate *priv = provider->priv;
-
-  g_clear_pointer (&priv->loop, g_main_loop_unref);
-
-  g_free (priv->account_object_path);
-  g_free (priv->password);
-  g_free (priv->identity);
-  g_free (priv->presentation_identity);
-  g_free (priv->authorization_code);
-  g_free (priv->access_token);
-  g_free (priv->refresh_token);
-
-  G_OBJECT_CLASS (goa_oauth2_provider_parent_class)->finalize (object);
-}
-
-static void
-goa_oauth2_provider_init (GoaOAuth2Provider *provider)
-{
-  provider->priv = GOA_OAUTH2_PROVIDER_GET_PRIVATE (provider);
-}
-
-static void
-goa_oauth2_provider_class_init (GoaOAuth2ProviderClass *klass)
-{
-  GObjectClass *object_class;
-  GoaProviderClass *provider_class;
-
-  object_class = G_OBJECT_CLASS (klass);
-  object_class->finalize = goa_oauth2_provider_finalize;
-
-  provider_class = GOA_PROVIDER_CLASS (klass);
-  provider_class->add_account                = goa_oauth2_provider_add_account;
-  provider_class->refresh_account            = goa_oauth2_provider_refresh_account;
-  provider_class->build_object               = goa_oauth2_provider_build_object;
-  provider_class->ensure_credentials_sync    = goa_oauth2_provider_ensure_credentials_sync;
-
-  klass->build_authorization_uri  = goa_oauth2_provider_build_authorization_uri_default;
-  klass->get_token_uri            = goa_oauth2_provider_get_token_uri_default;
-  klass->get_scope                = goa_oauth2_provider_get_scope_default;
-  klass->get_use_mobile_browser   = goa_oauth2_provider_get_use_mobile_browser_default;
-  klass->is_password_node         = goa_oauth2_provider_is_password_node_default;
-  klass->add_account_key_values   = goa_oauth2_provider_add_account_key_values_default;
-
-  g_type_class_add_private (object_class, sizeof (GoaOAuth2ProviderPrivate));
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-/* runs in a thread dedicated to handling @invocation */
-static gboolean
-on_handle_get_access_token (GoaOAuth2Based        *interface,
-                            GDBusMethodInvocation *invocation,
-                            gpointer               user_data)
-{
-  GoaObject *object;
-  GoaAccount *account;
-  GoaProvider *provider;
-  GError *error;
-  gchar *access_token;
-  gint access_token_expires_in;
-
-  /* TODO: maybe log what app is requesting access */
-
-  access_token = NULL;
-
-  object = GOA_OBJECT (g_dbus_interface_get_object (G_DBUS_INTERFACE (interface)));
-  account = goa_object_peek_account (object);
-  provider = goa_provider_get_for_provider_type (goa_account_get_provider_type (account));
-
-  error = NULL;
-  access_token = goa_oauth2_provider_get_access_token_sync (GOA_OAUTH2_PROVIDER (provider),
-                                                            object,
-                                                            FALSE, /* force_refresh */
-                                                            &access_token_expires_in,
-                                                            NULL, /* GCancellable* */
-                                                            &error);
-  if (access_token == NULL)
-    {
-      g_dbus_method_invocation_return_gerror (invocation, error);
-      g_error_free (error);
-    }
-  else
-    {
-      goa_oauth2_based_complete_get_access_token (interface,
-                                                  invocation,
-                                                  access_token,
-                                                  access_token_expires_in);
-    }
-  g_free (access_token);
-  g_object_unref (provider);
-  return TRUE; /* invocation was handled */
-}
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goaoauth2provider.h gnome-online-accounts-3.14.0n/src/goabackend/goaoauth2provider.h
--- gnome-online-accounts-3.14.0/src/goabackend/goaoauth2provider.h	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goaoauth2provider.h	1970-01-01 00:00:00.000000000 +0000
@@ -1,167 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011, 2012, 2014 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#if !defined (__GOA_BACKEND_INSIDE_GOA_BACKEND_H__) && !defined (GOA_BACKEND_COMPILATION)
-#error "Only <goabackend/goabackend.h> can be included directly."
-#endif
-
-#ifndef __GOA_OAUTH2_PROVIDER_H__
-#define __GOA_OAUTH2_PROVIDER_H__
-
-#include <goabackend/goaprovider.h>
-#include <goabackend/goaprovider-priv.h>
-#include <webkit/webkit.h>
-
-G_BEGIN_DECLS
-
-#define GOA_TYPE_OAUTH2_PROVIDER         (goa_oauth2_provider_get_type ())
-#define GOA_OAUTH2_PROVIDER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OAUTH2_PROVIDER, GoaOAuth2Provider))
-#define GOA_OAUTH2_PROVIDER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_OAUTH2_PROVIDER, GoaOAuth2ProviderClass))
-#define GOA_OAUTH2_PROVIDER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_OAUTH2_PROVIDER, GoaOAuth2ProviderClass))
-#define GOA_IS_OAUTH2_PROVIDER(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OAUTH2_PROVIDER))
-
-#define GOA_IS_OAUTH2_PROVIDER_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_OAUTH2_PROVIDER))
-
-typedef struct _GoaOAuth2Provider GoaOAuth2Provider;
-typedef struct _GoaOAuth2ProviderClass GoaOAuth2ProviderClass;
-typedef struct _GoaOAuth2ProviderPrivate GoaOAuth2ProviderPrivate;
-
-/**
- * GoaOAuth2Provider:
- *
- * The #GoaOAuth2Provider structure contains only private data and should
- * only be accessed using the provided API.
- */
-struct _GoaOAuth2Provider
-{
-  /*< private >*/
-  GoaProvider parent_instance;
-  GoaOAuth2ProviderPrivate *priv;
-};
-
-/**
- * GoaOAuth2ProviderClass:
- * @parent_class: The parent class.
- * @get_authorization_uri: Virtual function for goa_oauth2_provider_get_authorization_uri().
- * @get_token_uri: Virtual function for goa_oauth2_provider_get_token_uri().
- * @get_redirect_uri: Virtual function for goa_oauth2_provider_get_redirect_uri().
- * @get_scope: Virtual function for goa_oauth2_provider_get_scope().
- * @get_client_id: Virtual function for goa_oauth2_provider_get_client_id().
- * @get_client_secret: Virtual function for goa_oauth2_provider_get_client_secret().
- * @get_authentication_cookie: Virtual function for goa_oauth2_provider_get_authentication_cookie().
- * @get_identity_sync: Virtual function for goa_oauth2_provider_get_identity_sync().
- * @build_authorization_uri: Virtual function for goa_oauth2_provider_build_authorization_uri().
- * @get_use_mobile_browser: Virtual function for goa_oauth2_provider_get_use_mobile_browser().
- * @add_account_key_values: Virtual function for goa_oauth2_provider_add_account_key_values().
- * @process_redirect_url: Virtual function for goa_oauth2_provider_process_redirect_url().
- * @is_deny_node: Virtual function for goa_oauth2_provider_is_deny_node().
- * @is_identity_node: Virtual function for goa_oauth2_provider_is_identity_node().
- * @is_password_node: Virtual function for goa_oauth2_provider_is_password_node().
- *
- * Class structure for #GoaOAuth2Provider.
- */
-struct _GoaOAuth2ProviderClass
-{
-  GoaProviderClass parent_class;
-
-  /* pure virtual */
-  const gchar *(*get_authorization_uri)        (GoaOAuth2Provider            *provider);
-  const gchar *(*get_redirect_uri)             (GoaOAuth2Provider            *provider);
-  const gchar *(*get_client_id)                (GoaOAuth2Provider            *provider);
-  const gchar *(*get_client_secret)            (GoaOAuth2Provider            *provider);
-  const gchar *(*get_authentication_cookie)    (GoaOAuth2Provider            *provider);
-  gchar       *(*get_identity_sync)            (GoaOAuth2Provider            *provider,
-                                                const gchar                  *access_token,
-                                                gchar                       **out_presentation_identity,
-                                                GCancellable                 *cancellable,
-                                                GError                      **error);
-
-  /* virtual but with default implementation */
-  gchar       *(*build_authorization_uri)      (GoaOAuth2Provider            *provider,
-                                                const gchar                  *authorization_uri,
-                                                const gchar                  *escaped_redirect_uri,
-                                                const gchar                  *escaped_client_id,
-                                                const gchar                  *escaped_scope);
-  const gchar *(*get_token_uri)                (GoaOAuth2Provider            *provider);
-  const gchar *(*get_scope)                    (GoaOAuth2Provider            *provider);
-  gboolean     (*get_use_mobile_browser)       (GoaOAuth2Provider            *provider);
-  void         (*add_account_key_values)       (GoaOAuth2Provider            *provider,
-                                                GVariantBuilder              *builder);
-
-  /* pure virtual */
-  gboolean     (*is_deny_node)                 (GoaOAuth2Provider            *provider,
-                                                WebKitDOMNode                *node);
-  gboolean     (*is_identity_node)             (GoaOAuth2Provider            *provider,
-                                                WebKitDOMHTMLInputElement    *element);
-
-  /* virtual but with default implementation */
-  gboolean     (*is_password_node)             (GoaOAuth2Provider            *provider,
-                                                WebKitDOMHTMLInputElement    *element);
-
-  gboolean     (*process_redirect_url)         (GoaOAuth2Provider            *provider,
-                                                const gchar                  *redirect_url,
-                                                gchar                       **access_token,
-                                                GError                      **error);
-
-
-  /*< private >*/
-  /* Padding for future expansion */
-  gpointer goa_reserved[28];
-};
-
-GType        goa_oauth2_provider_get_type                     (void) G_GNUC_CONST;
-const gchar *goa_oauth2_provider_get_authorization_uri        (GoaOAuth2Provider             *provider);
-const gchar *goa_oauth2_provider_get_token_uri                (GoaOAuth2Provider             *provider);
-const gchar *goa_oauth2_provider_get_redirect_uri             (GoaOAuth2Provider             *provider);
-const gchar *goa_oauth2_provider_get_scope                    (GoaOAuth2Provider             *provider);
-const gchar *goa_oauth2_provider_get_client_id                (GoaOAuth2Provider             *provider);
-const gchar *goa_oauth2_provider_get_client_secret            (GoaOAuth2Provider             *provider);
-const gchar *goa_oauth2_provider_get_authentication_cookie    (GoaOAuth2Provider             *provider);
-gchar       *goa_oauth2_provider_get_identity_sync            (GoaOAuth2Provider             *provider,
-                                                               const gchar              *access_token,
-                                                               gchar                   **out_presentation_identity,
-                                                               GCancellable             *cancellable,
-                                                               GError                  **error);
-gboolean     goa_oauth2_provider_is_deny_node                 (GoaOAuth2Provider             *provider,
-                                                               WebKitDOMNode                 *node);
-gboolean     goa_oauth2_provider_is_identity_node             (GoaOAuth2Provider             *provider,
-                                                               WebKitDOMHTMLInputElement     *element);
-gboolean     goa_oauth2_provider_is_password_node             (GoaOAuth2Provider             *provider,
-                                                               WebKitDOMHTMLInputElement     *element);
-gchar       *goa_oauth2_provider_get_access_token_sync        (GoaOAuth2Provider        *provider,
-                                                               GoaObject                *object,
-                                                               gboolean                 force_refresh,
-                                                               gint                     *out_access_token_expires_in,
-                                                               GCancellable             *cancellable,
-                                                               GError                  **error);
-gchar       *goa_oauth2_provider_build_authorization_uri      (GoaOAuth2Provider             *provider,
-                                                               const gchar                   *authorization_uri,
-                                                               const gchar                   *escaped_redirect_uri,
-                                                               const gchar                   *escaped_client_id,
-                                                               const gchar                   *escaped_scope);
-gboolean     goa_oauth2_provider_get_use_mobile_browser       (GoaOAuth2Provider             *provider);
-void         goa_oauth2_provider_add_account_key_values       (GoaOAuth2Provider             *provider,
-                                                               GVariantBuilder               *builder);
-gboolean     goa_oauth2_provider_process_redirect_url         (GoaOAuth2Provider             *provider,
-                                                               const gchar                   *redirect_url,
-                                                               gchar                        **authorization_code,
-                                                               GError                       **error);
-
-G_END_DECLS
-
-#endif /* __GOA_OAUTH2_PROVIDER_H__ */
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goaoauthprovider.c gnome-online-accounts-3.14.0n/src/goabackend/goaoauthprovider.c
--- gnome-online-accounts-3.14.0/src/goabackend/goaoauthprovider.c	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goaoauthprovider.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,1744 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011, 2012, 2014 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "config.h"
-#include <glib/gi18n-lib.h>
-#include <stdlib.h>
-
-#include <rest/oauth-proxy.h>
-#include <libsoup/soup.h>
-#include <json-glib/json-glib.h>
-
-#include "goaprovider.h"
-#include "goautils.h"
-#include "goawebview.h"
-#include "goaoauthprovider.h"
-
-/**
- * SECTION:goaoauthprovider
- * @title: GoaOAuthProvider
- * @short_description: Abstract base class for OAuth 1.0a providers
- *
- * #GoaOAuthProvider is an abstract base class for OAuth 1.0a
- * compliant implementations as defined by <ulink
- * url="http://tools.ietf.org/html/rfc5849">RFC
- * 5849</ulink>. Additionally, the code works with providers
- * implementing <ulink
- * url="http://oauth.googlecode.com/svn/spec/ext/session/1.0/drafts/1/spec.html">OAuth
- * Session 1.0 Draft 1</ulink> for refreshing access tokens.
- *
- * Subclasses must implement
- * #GoaOAuthProviderClass.get_consumer_key,
- * #GoaOAuthProviderClass.get_consumer_secret,
- * #GoaOAuthProviderClass.get_request_uri,
- * #GoaOAuthProviderClass.get_authorization_uri,
- * #GoaOAuthProviderClass.get_token_uri,
- * #GoaOAuthProviderClass.get_callback_uri and
- * #GoaOAuthProviderClass.get_identity_sync methods.
- *
- * Additionally, the
- * #GoaProviderClass.get_provider_type,
- * #GoaProviderClass.get_provider_name,
- * #GoaProviderClass.build_object (this should chain up to its
- * parent class) methods must be implemented.
- *
- * Note that the #GoaProviderClass.add_account,
- * #GoaProviderClass.refresh_account and
- * #GoaProviderClass.ensure_credentials_sync methods do not
- * need to be implemented - this type implements these methods.
- */
-
-G_LOCK_DEFINE_STATIC (provider_lock);
-
-G_DEFINE_ABSTRACT_TYPE (GoaOAuthProvider, goa_oauth_provider, GOA_TYPE_PROVIDER);
-
-static gboolean
-is_authorization_error (GError *error)
-{
-  gboolean ret;
-
-  g_return_val_if_fail (error != NULL, FALSE);
-
-  ret = FALSE;
-  if (error->domain == REST_PROXY_ERROR || error->domain == SOUP_HTTP_ERROR)
-    {
-      if (SOUP_STATUS_IS_CLIENT_ERROR (error->code))
-        ret = TRUE;
-    }
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-goa_oauth_provider_get_use_mobile_browser_default (GoaOAuthProvider  *provider)
-{
-  return FALSE;
-}
-
-/**
- * goa_oauth_provider_get_use_mobile_browser:
- * @provider: A #GoaOAuthProvider.
- *
- * Returns whether there is a need for the embedded browser to identify
- * itself as running on a mobile phone in order to get a more compact
- * version of the approval page.
- *
- * This is a virtual method where the default implementation returns
- * %FALSE.
- *
- * Returns: %TRUE if the embedded browser should identify itself as
- * running on a mobile platform, %FALSE otherwise.
- */
-gboolean
-goa_oauth_provider_get_use_mobile_browser (GoaOAuthProvider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), FALSE);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->get_use_mobile_browser (provider);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-goa_oauth_provider_is_password_node_default (GoaOAuthProvider *provider, WebKitDOMHTMLInputElement *element)
-{
-  return FALSE;
-}
-
-/**
- * goa_oauth_provider_is_password_node:
- * @provider: A #GoaOAuthProvider.
- * @element: A WebKitDOMHTMLInputElement
- *
- * Checks whether @element is the HTML UI element that the user can
- * use to enter her password. This can be used to offer a
- * #GoaPasswordBased interface by saving the user's
- * password. Providers usually frown upon doing this, so this is not
- * recommended.
- *
- * This is a virtual method where the default implementation returns
- * %FALSE.
- *
- * Returns: %TRUE if @element can be used to enter the password.
- */
-gboolean
-goa_oauth_provider_is_password_node (GoaOAuthProvider *provider, WebKitDOMHTMLInputElement *element)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), FALSE);
-  g_return_val_if_fail (WEBKIT_DOM_IS_HTML_INPUT_ELEMENT (element), FALSE);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->is_password_node (provider, element);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-goa_oauth_provider_add_account_key_values_default (GoaOAuthProvider  *provider,
-                                                   GVariantBuilder   *builder)
-{
-  /* do nothing */
-}
-
-/**
- * goa_oauth_provider_add_account_key_values:
- * @provider: A #GoaProvider.
- * @builder: A #GVariantBuilder for a <literal>a{ss}</literal> variant.
- *
- * Hook for implementations to add key/value pairs to the key-file
- * when creating an account.
- *
- * This is a virtual method where the default implementation does nothing.
- */
-void
-goa_oauth_provider_add_account_key_values (GoaOAuthProvider  *provider,
-                                           GVariantBuilder   *builder)
-{
-  g_return_if_fail (GOA_IS_OAUTH_PROVIDER (provider));
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->add_account_key_values (provider, builder);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-goa_oauth_provider_build_authorization_uri_default (GoaOAuthProvider  *provider,
-                                                    const gchar       *authorization_uri,
-                                                    const gchar       *escaped_oauth_token)
-{
-  return g_strdup_printf ("%s"
-                          "?oauth_token=%s",
-                          authorization_uri,
-                          escaped_oauth_token);
-}
-
-/**
- * goa_oauth_provider_build_authorization_uri:
- * @provider: A #GoaOAuthProvider.
- * @authorization_uri: An authorization URI.
- * @escaped_oauth_token: An escaped oauth token.
- *
- * Builds the URI that can be opened in a web browser (or embedded web
- * browser widget) to start authenticating an user.
- *
- * The default implementation just returns the expected URI
- * (e.g. <literal>http://example.com/dialog/oauth?auth_token=1234567890</literal>)
- * - override (and chain up) if you e.g. need to to pass additional
- * parameters.
- *
- * The @authorization_uri parameter originate from the result of the
- * the goa_oauth_provider_get_authorization_uri() method. The
- * @escaped_oauth_token parameter is the temporary credentials identifier
- * escaped using g_uri_escape_string().
- *
- * Returns: (transfer full): An authorization URI that must be freed with g_free().
- */
-gchar *
-goa_oauth_provider_build_authorization_uri (GoaOAuthProvider  *provider,
-                                            const gchar       *authorization_uri,
-                                            const gchar       *escaped_oauth_token)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  g_return_val_if_fail (authorization_uri != NULL, NULL);
-  g_return_val_if_fail (escaped_oauth_token != NULL, NULL);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->build_authorization_uri (provider,
-                                                                                   authorization_uri,
-                                                                                   escaped_oauth_token);
-}
-
-/**
- * goa_oauth_provider_get_consumer_key:
- * @provider: A #GoaOAuthProvider.
- *
- * Gets the consumer key identifying the client.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth_provider_get_consumer_key (GoaOAuthProvider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->get_consumer_key (provider);
-}
-
-/**
- * goa_oauth_provider_get_consumer_secret:
- * @provider: A #GoaOAuthProvider.
- *
- * Gets the consumer secret identifying the client.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth_provider_get_consumer_secret (GoaOAuthProvider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->get_consumer_secret (provider);
-}
-
-/**
- * goa_oauth_provider_get_request_uri:
- * @provider: A #GoaOAuthProvider.
- *
- * Gets the request uri.
- *
- * http://tools.ietf.org/html/rfc5849#section-2.1
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth_provider_get_request_uri (GoaOAuthProvider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->get_request_uri (provider);
-}
-
-/**
- * goa_oauth_provider_get_request_uri_params:
- * @provider: A #GoaOAuthProvider.
- *
- * Gets additional parameters for the request URI.
- *
- * http://tools.ietf.org/html/rfc5849#section-2.1
- *
- * This is a virtual method where the default implementation returns
- * %NULL.
- *
- * Returns: (transfer full): %NULL (for no parameters) or a
- * %NULL-terminated array of (key, value) pairs that will be added to
- * the URI. The caller will free the returned value with g_strfreev().
- */
-gchar **
-goa_oauth_provider_get_request_uri_params (GoaOAuthProvider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->get_request_uri_params (provider);
-}
-
-static gchar **
-goa_oauth_provider_get_request_uri_params_default (GoaOAuthProvider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  return NULL;
-}
-
-/**
- * goa_oauth_provider_get_authorization_uri:
- * @provider: A #GoaOAuthProvider.
- *
- * Gets the authorization uri.
- *
- * http://tools.ietf.org/html/rfc5849#section-2.2
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth_provider_get_authorization_uri (GoaOAuthProvider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->get_authorization_uri (provider);
-}
-
-/**
- * goa_oauth_provider_get_token_uri:
- * @provider: A #GoaOAuthProvider.
- *
- * Gets the token uri.
- *
- * http://tools.ietf.org/html/rfc5849#section-2.3
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth_provider_get_token_uri (GoaOAuthProvider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->get_token_uri (provider);
-}
-
-/**
- * goa_oauth_provider_get_callback_uri:
- * @provider: A #GoaOAuthProvider.
- *
- * Gets the callback uri.
- *
- * http://tools.ietf.org/html/rfc5849#section-2.1
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth_provider_get_callback_uri (GoaOAuthProvider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->get_callback_uri (provider);
-}
-
-/**
- * goa_oauth_provider_get_authentication_cookie:
- * @provider: A #GoaOAuthProvider.
- *
- * Gets the name of a cookie whose presence indicates that the user has been able to
- * log in during the authorization step. This is used to modify the embedded web
- * browser UI that is presented to the user.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: (transfer none): A string owned by @provider - do not free.
- */
-const gchar *
-goa_oauth_provider_get_authentication_cookie (GoaOAuthProvider *provider)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->get_authentication_cookie (provider);
-}
-
-/**
- * goa_oauth_provider_get_identity_sync:
- * @provider: A #GoaOAuthProvider.
- * @access_token: A valid OAuth 1.0 access token.
- * @access_token_secret: The valid secret for @access_token.
- * @out_presentation_identity: (out): Return location for presentation identity or %NULL.
- * @cancellable: (allow-none): A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
- *
- * Method that returns the identity corresponding to @access_token and
- * @access_token_secret.
- *
- * The identity is needed because all authentication happens out of
- * band. In addition to the identity, an implementation also returns a
- * <emphasis>presentation identity</emphasis> that is more suitable
- * for presentation (the identity could be a GUID for example).
- *
- * The calling thread is blocked while the identity is obtained.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: The identity or %NULL if error is set. The returned string
- * must be freed with g_free().
- */
-gchar *
-goa_oauth_provider_get_identity_sync (GoaOAuthProvider *provider,
-                                      const gchar      *access_token,
-                                      const gchar      *access_token_secret,
-                                      gchar           **out_presentation_identity,
-                                      GCancellable     *cancellable,
-                                      GError          **error)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  g_return_val_if_fail (access_token != NULL, NULL);
-  g_return_val_if_fail (cancellable == NULL || G_IS_CANCELLABLE (cancellable), NULL);
-  g_return_val_if_fail (error == NULL || *error == NULL, NULL);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->get_identity_sync (provider, access_token, access_token_secret, out_presentation_identity, cancellable, error);
-}
-
-/**
- * goa_oauth_provider_is_deny_node:
- * @provider: A #GoaOAuthProvider.
- * @node: A WebKitDOMNode.
- *
- * Checks whether @node is the HTML UI element that the user can use
- * to deny permission to access his account. Usually they are either a
- * WebKitDOMHTMLButtonElement or a WebKitDOMHTMLInputElement.
- *
- * Please note that providers may have multiple such elements in their
- * UI and this method should catch all of them.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: %TRUE if the @node can be used to deny permission.
- */
-gboolean
-goa_oauth_provider_is_deny_node (GoaOAuthProvider *provider, WebKitDOMNode *node)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), FALSE);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->is_deny_node (provider, node);
-}
-
-/**
- * goa_oauth_provider_is_identity_node:
- * @provider: A #GoaOAuthProvider.
- * @element: A WebKitDOMHTMLInputElement.
- *
- * Checks whether @element is the HTML UI element that the user can
- * use to identify herself at the provider.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: %TRUE if the @element can be used to deny permission.
- */
-gboolean
-goa_oauth_provider_is_identity_node (GoaOAuthProvider *provider, WebKitDOMHTMLInputElement *element)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), FALSE);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->is_identity_node (provider, element);
-}
-
-/**
- * goa_oauth_provider_parse_request_token_error:
- * @provider: A #GoaOAuthProvider.
- * @call: The #RestProxyCall that was used to fetch the request token.
- *
- * Tries to parse the headers and payload within @call to provide a
- * human readable error message in case the request token could not
- * be fetched.
- *
- * This is a pure virtual method - a subclass must provide an
- * implementation.
- *
- * Returns: A human readable error message or %NULL if the cause of the
- * error could not be determined. The returned string must be freed with
- * g_free().
- */
-gchar *
-goa_oauth_provider_parse_request_token_error (GoaOAuthProvider *provider, RestProxyCall *call)
-{
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  return GOA_OAUTH_PROVIDER_GET_CLASS (provider)->parse_request_token_error (provider, call);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-get_tokens_sync (GoaOAuthProvider  *provider,
-                 const gchar       *token,
-                 const gchar       *token_secret,
-                 const gchar       *session_handle, /* may be NULL */
-                 const gchar       *verifier,       /* may be NULL */
-                 gchar            **out_access_token_secret,
-                 gint              *out_access_token_expires_in,
-                 gchar            **out_session_handle,
-                 gint              *out_session_handle_expires_in,
-                 GCancellable      *cancellable,
-                 GError           **error)
-{
-  RestProxy *proxy;
-  RestProxyCall *call;
-  gchar *ret;
-  guint status_code;
-  GHashTable *f;
-  const gchar *expires_in_str;
-  gchar *ret_access_token;
-  gchar *ret_access_token_secret;
-  gint ret_access_token_expires_in;
-  gchar *ret_session_handle;
-  gint ret_session_handle_expires_in;
-
-  ret = NULL;
-  ret_access_token = NULL;
-  ret_access_token_secret = NULL;
-  ret_access_token_expires_in = 0;
-  ret_session_handle = NULL;
-  ret_session_handle_expires_in = 0;
-
-  proxy = oauth_proxy_new (goa_oauth_provider_get_consumer_key (provider),
-                           goa_oauth_provider_get_consumer_secret (provider),
-                           goa_oauth_provider_get_token_uri (provider),
-                           FALSE);
-  oauth_proxy_set_token (OAUTH_PROXY (proxy), token);
-  oauth_proxy_set_token_secret (OAUTH_PROXY (proxy), token_secret);
-  call = rest_proxy_new_call (proxy);
-  rest_proxy_call_set_method (call, "POST");
-  if (verifier != NULL)
-    rest_proxy_call_add_param (call, "oauth_verifier", verifier);
-  if (session_handle != NULL)
-    rest_proxy_call_add_param (call, "oauth_session_handle", session_handle);
-  /* TODO: cancellable support? */
-  if (!rest_proxy_call_sync (call, error))
-    goto out;
-
-  status_code = rest_proxy_call_get_status_code (call);
-  if (status_code != 200)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   /* Translators: the %d is a HTTP status code and the %s is a textual description of it */
-                   _("Expected status 200 when requesting access token, instead got status %d (%s)"),
-                   status_code,
-                   rest_proxy_call_get_status_message (call));
-      goto out;
-    }
-
-  f = soup_form_decode (rest_proxy_call_get_payload (call));
-  ret_access_token = g_strdup (g_hash_table_lookup (f, "oauth_token"));
-  ret_access_token_secret = g_strdup (g_hash_table_lookup (f, "oauth_token_secret"));
-  ret_session_handle = g_strdup (g_hash_table_lookup (f, "oauth_session_handle"));
-  expires_in_str = g_hash_table_lookup (f, "oauth_expires_in");
-  if (expires_in_str != NULL)
-    ret_access_token_expires_in = atoi (expires_in_str);
-  expires_in_str = g_hash_table_lookup (f, "oauth_authorization_expires_in");
-  if (expires_in_str != NULL)
-    ret_session_handle_expires_in = atoi (expires_in_str);
-  g_hash_table_unref (f);
-
-  if (ret_access_token == NULL || ret_access_token_secret == NULL)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Missing access_token or access_token_secret headers in response"));
-      goto out;
-    }
-
-  ret = ret_access_token; ret_access_token = NULL;
-  if (out_access_token_secret != NULL)
-    {
-      *out_access_token_secret = ret_access_token_secret;
-      ret_access_token_secret = NULL;
-    }
-  if (out_access_token_expires_in != NULL)
-    *out_access_token_expires_in = ret_access_token_expires_in;
-  if (out_session_handle != NULL)
-    {
-      *out_session_handle = ret_session_handle;
-      ret_session_handle = NULL;
-    }
-  if (out_session_handle_expires_in != NULL)
-    *out_session_handle_expires_in = ret_session_handle_expires_in;
-
- out:
-  g_free (ret_access_token);
-  g_free (ret_access_token_secret);
-  g_free (ret_session_handle);
-  if (call != NULL)
-    g_object_unref (call);
-  if (proxy != NULL)
-    g_object_unref (proxy);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-typedef struct
-{
-  GoaOAuthProvider *provider;
-  GtkDialog *dialog;
-  GError *error;
-  GMainLoop *loop;
-
-  WebKitDOMHTMLInputElement *password_node;
-  gchar *password;
-
-  gchar *oauth_verifier;
-
-  const gchar *existing_identity;
-
-  gchar *identity;
-  gchar *presentation_identity;
-
-  gchar *request_token;
-  gchar *request_token_secret;
-  gchar *access_token;
-  gchar *access_token_secret;
-  gint access_token_expires_in;
-  gchar *session_handle;
-  gint session_handle_expires_in;
-} IdentifyData;
-
-static void
-on_dom_node_click (WebKitDOMNode *element, WebKitDOMEvent *event, gpointer user_data)
-{
-  IdentifyData *data = user_data;
-  gtk_dialog_response (data->dialog, GTK_RESPONSE_CANCEL);
-}
-
-static void
-on_form_submit (WebKitDOMNode *element, WebKitDOMEvent *event, gpointer user_data)
-{
-  IdentifyData *data = user_data;
-
-  if (data->password_node == NULL)
-    return;
-
-  data->password = webkit_dom_html_input_element_get_value (data->password_node);
-  data->password_node = NULL;
-}
-
-static void
-on_web_view_document_load_finished (WebKitWebView *web_view, WebKitWebFrame *frame, gpointer user_data)
-{
-  IdentifyData *data = user_data;
-  GoaOAuthProvider *provider = data->provider;
-  WebKitDOMDocument *document;
-  WebKitDOMNodeList *elements;
-  gulong element_count;
-  gulong i;
-
-  document = webkit_web_view_get_dom_document (WEBKIT_WEB_VIEW (web_view));
-  elements = webkit_dom_document_get_elements_by_tag_name (document, "*");
-  element_count = webkit_dom_node_list_get_length (elements);
-
-  for (i = 0; i < element_count; i++)
-    {
-      WebKitDOMNode *element = webkit_dom_node_list_item (elements, i);
-
-      if (goa_oauth_provider_is_deny_node (provider, element))
-        {
-          webkit_dom_event_target_add_event_listener (WEBKIT_DOM_EVENT_TARGET (element),
-                                                      "click",
-                                                      G_CALLBACK (on_dom_node_click),
-                                                      FALSE,
-                                                      data);
-        }
-      else if (data->existing_identity != NULL
-               && WEBKIT_DOM_IS_HTML_INPUT_ELEMENT (element)
-               && goa_oauth_provider_is_identity_node (provider, WEBKIT_DOM_HTML_INPUT_ELEMENT (element)))
-        {
-          webkit_dom_html_input_element_set_value (WEBKIT_DOM_HTML_INPUT_ELEMENT (element),
-                                                   data->existing_identity);
-          webkit_dom_html_input_element_set_read_only (WEBKIT_DOM_HTML_INPUT_ELEMENT (element), TRUE);
-        }
-      else if (WEBKIT_DOM_IS_HTML_INPUT_ELEMENT (element)
-               && goa_oauth_provider_is_password_node (provider, WEBKIT_DOM_HTML_INPUT_ELEMENT (element)))
-        {
-          WebKitDOMHTMLFormElement *form;
-
-          form = webkit_dom_html_input_element_get_form (WEBKIT_DOM_HTML_INPUT_ELEMENT (element));
-          if (form != NULL)
-            {
-              data->password_node = WEBKIT_DOM_HTML_INPUT_ELEMENT (element);
-              g_clear_pointer (&data->password, g_free);
-              webkit_dom_event_target_add_event_listener (WEBKIT_DOM_EVENT_TARGET (form),
-                                                          "submit",
-                                                          G_CALLBACK (on_form_submit),
-                                                          FALSE,
-                                                          data);
-            }
-        }
-    }
-}
-
-static gboolean
-on_web_view_navigation_policy_decision_requested (WebKitWebView             *webView,
-                                                  WebKitWebFrame            *frame,
-                                                  WebKitNetworkRequest      *request,
-                                                  WebKitWebNavigationAction *navigation_action,
-                                                  WebKitWebPolicyDecision   *policy_decision,
-                                                  gpointer                   user_data)
-{
-  IdentifyData *data = user_data;
-  const gchar *redirect_uri;
-  const gchar *requested_uri;
-
-  /* TODO: use oauth_proxy_extract_access_token() */
-
-  requested_uri = webkit_network_request_get_uri (request);
-  redirect_uri = goa_oauth_provider_get_callback_uri (data->provider);
-  if (g_str_has_prefix (requested_uri, redirect_uri))
-    {
-      SoupMessage *message;
-      SoupURI *uri;
-      GHashTable *key_value_pairs;
-
-      message = webkit_network_request_get_message (request);
-      uri = soup_message_get_uri (message);
-      key_value_pairs = soup_form_decode (uri->query);
-
-      /* TODO: error handling? */
-      data->oauth_verifier = g_strdup (g_hash_table_lookup (key_value_pairs, "oauth_verifier"));
-      if (data->oauth_verifier != NULL)
-        {
-          gtk_dialog_response (data->dialog, GTK_RESPONSE_OK);
-        }
-      g_hash_table_unref (key_value_pairs);
-      webkit_web_policy_decision_ignore (policy_decision);
-      return TRUE; /* ignore the request */
-    }
-  else
-    {
-      return FALSE; /* make default behavior apply */
-    }
-}
-
-static void
-rest_proxy_call_cb (RestProxyCall *call, const GError *error, GObject *weak_object, gpointer user_data)
-{
-  IdentifyData *data = user_data;
-  g_main_loop_quit (data->loop);
-}
-
-static gboolean
-get_tokens_and_identity (GoaOAuthProvider *provider,
-                         gboolean          add_account,
-                         const gchar      *existing_identity,
-                         GtkDialog        *dialog,
-                         GtkBox           *vbox,
-                         gchar           **out_access_token,
-                         gchar           **out_access_token_secret,
-                         gint             *out_access_token_expires_in,
-                         gchar           **out_session_handle,
-                         gint             *out_session_handle_expires_in,
-                         gchar           **out_identity,
-                         gchar           **out_presentation_identity,
-                         gchar           **out_password,
-                         GError          **error)
-{
-  gboolean ret;
-  gchar *url;
-  IdentifyData data;
-  gchar *escaped_request_token;
-  RestProxy *proxy;
-  RestProxyCall *call;
-  GHashTable *f;
-  GtkWidget *embed;
-  GtkWidget *grid;
-  GtkWidget *spinner;
-  GtkWidget *web_view;
-  gchar **request_params;
-  guint n;
-
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), FALSE);
-  g_return_val_if_fail ((!add_account && existing_identity != NULL && existing_identity[0] != '\0')
-                        || (add_account && existing_identity == NULL), FALSE);
-  g_return_val_if_fail (GTK_IS_DIALOG (dialog), FALSE);
-  g_return_val_if_fail (GTK_IS_BOX (vbox), FALSE);
-  g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
-
-  ret = FALSE;
-  escaped_request_token = NULL;
-  proxy = NULL;
-  call = NULL;
-  url = NULL;
-  request_params = NULL;
-
-  /* TODO: check with NM whether we're online, if not - return error */
-
-  memset (&data, '\0', sizeof (IdentifyData));
-  data.provider = provider;
-  data.dialog = dialog;
-  data.loop = g_main_loop_new (NULL, FALSE);
-  data.existing_identity = existing_identity;
-
-  proxy = oauth_proxy_new (goa_oauth_provider_get_consumer_key (provider),
-                           goa_oauth_provider_get_consumer_secret (provider),
-                           goa_oauth_provider_get_request_uri (provider), FALSE);
-  call = rest_proxy_new_call (proxy);
-  rest_proxy_call_set_method (call, "POST");
-  rest_proxy_call_add_param (call, "oauth_callback", goa_oauth_provider_get_callback_uri (provider));
-
-  request_params = goa_oauth_provider_get_request_uri_params (provider);
-  if (request_params != NULL)
-    {
-      g_assert (g_strv_length (request_params) % 2 == 0);
-      for (n = 0; request_params[n] != NULL; n += 2)
-        rest_proxy_call_add_param (call, request_params[n], request_params[n+1]);
-    }
-  if (!rest_proxy_call_async (call, rest_proxy_call_cb, NULL, &data, &data.error))
-    {
-      g_prefix_error (&data.error, _("Error getting a Request Token: "));
-      goto out;
-    }
-
-  goa_utils_set_dialog_title (GOA_PROVIDER (provider), dialog, add_account);
-
-  grid = gtk_grid_new ();
-  gtk_container_set_border_width (GTK_CONTAINER (grid), 5);
-  gtk_widget_set_margin_bottom (grid, 6);
-  gtk_orientable_set_orientation (GTK_ORIENTABLE (grid), GTK_ORIENTATION_VERTICAL);
-  gtk_grid_set_row_spacing (GTK_GRID (grid), 12);
-  gtk_container_add (GTK_CONTAINER (vbox), grid);
-
-  spinner = gtk_spinner_new ();
-  gtk_widget_set_hexpand (spinner, TRUE);
-  gtk_widget_set_halign (spinner, GTK_ALIGN_CENTER);
-  gtk_widget_set_vexpand (spinner, TRUE);
-  gtk_widget_set_valign (spinner, GTK_ALIGN_CENTER);
-  gtk_widget_set_size_request (GTK_WIDGET (spinner), 24, 24);
-  gtk_spinner_start (GTK_SPINNER (spinner));
-  gtk_container_add (GTK_CONTAINER (grid), spinner);
-  gtk_widget_show_all (GTK_WIDGET (vbox));
-
-  g_main_loop_run (data.loop);
-  gtk_container_remove (GTK_CONTAINER (grid), spinner);
-
-  if (rest_proxy_call_get_status_code (call) != 200)
-    {
-      gchar *msg;
-
-      msg = goa_oauth_provider_parse_request_token_error (provider, call);
-      if (msg == NULL)
-        /* Translators: the %d is a HTTP status code and the %s is a textual description of it */
-        msg = g_strdup_printf (_("Expected status 200 for getting a Request Token, instead got status %d (%s)"),
-                               rest_proxy_call_get_status_code (call),
-                               rest_proxy_call_get_status_message (call));
-
-      g_set_error_literal (&data.error, GOA_ERROR, GOA_ERROR_FAILED, msg);
-      g_free (msg);
-      goto out;
-    }
-  f = soup_form_decode (rest_proxy_call_get_payload (call));
-  data.request_token = g_strdup (g_hash_table_lookup (f, "oauth_token"));
-  data.request_token_secret = g_strdup (g_hash_table_lookup (f, "oauth_token_secret"));
-  g_hash_table_unref (f);
-  if (data.request_token == NULL || data.request_token_secret == NULL)
-    {
-      g_set_error (&data.error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Missing request_token or request_token_secret headers in response"));
-      goto out;
-    }
-
-  escaped_request_token = g_uri_escape_string (data.request_token, NULL, TRUE);
-  url = goa_oauth_provider_build_authorization_uri (provider,
-                                                            goa_oauth_provider_get_authorization_uri (provider),
-                                                            escaped_request_token);
-
-  web_view = goa_web_view_new ();
-  gtk_widget_set_hexpand (web_view, TRUE);
-  gtk_widget_set_vexpand (web_view, TRUE);
-  embed = goa_web_view_get_view (GOA_WEB_VIEW (web_view));
-
-  if (goa_oauth_provider_get_use_mobile_browser (provider))
-    goa_web_view_fake_mobile (GOA_WEB_VIEW (web_view));
-
-  webkit_web_view_load_uri (WEBKIT_WEB_VIEW (embed), url);
-  g_signal_connect (embed, "document-load-finished", G_CALLBACK (on_web_view_document_load_finished), &data);
-  g_signal_connect (embed,
-                    "navigation-policy-decision-requested",
-                    G_CALLBACK (on_web_view_navigation_policy_decision_requested),
-                    &data);
-
-  gtk_container_add (GTK_CONTAINER (grid), web_view);
-
-  gtk_widget_show_all (GTK_WIDGET (vbox));
-  gtk_dialog_run (GTK_DIALOG (dialog));
-
-  if (data.oauth_verifier == NULL)
-    {
-      if (data.error == NULL)
-        {
-          g_set_error (&data.error,
-                       GOA_ERROR,
-                       GOA_ERROR_DIALOG_DISMISSED,
-                       _("Dialog was dismissed"));
-        }
-      goto out;
-    }
-  g_assert (data.error == NULL);
-
-  /* OK, we are done interacting with the user ... but before we can
-   * make up our mind, there are two more RPC calls to make and these
-   * call may take some time. So hide the dialog immediately.
-   */
-  gtk_widget_hide (GTK_WIDGET (dialog));
-
-  /* OK, we now have the request token... we can exchange that for a
-   * (short-lived) access token and session_handle (used to refresh the
-   * access token)..
-   */
-
-  /* TODO: run in worker thread */
-  data.access_token = get_tokens_sync (provider,
-                                       data.request_token,
-                                       data.request_token_secret,
-                                       NULL, /* session_handle */
-                                       data.oauth_verifier,
-                                       &data.access_token_secret,
-                                       &data.access_token_expires_in,
-                                       &data.session_handle,
-                                       &data.session_handle_expires_in,
-                                       NULL, /* GCancellable */
-                                       &data.error);
-  if (data.access_token == NULL)
-    {
-      g_prefix_error (&data.error, _("Error getting an Access Token: "));
-      goto out;
-    }
-
-  /* TODO: run in worker thread */
-  data.identity = goa_oauth_provider_get_identity_sync (provider,
-                                                                data.access_token,
-                                                                data.access_token_secret,
-                                                                &data.presentation_identity,
-                                                                NULL, /* TODO: GCancellable */
-                                                                &data.error);
-  if (data.identity == NULL)
-    {
-      g_prefix_error (&data.error, _("Error getting identity: "));
-      goto out;
-    }
-
-  ret = TRUE;
-
- out:
-  if (call != NULL)
-    g_object_unref (call);
-
-  if (ret)
-    {
-      g_warn_if_fail (data.error == NULL);
-      if (out_access_token != NULL)
-        *out_access_token = g_strdup (data.access_token);
-      if (out_access_token_secret != NULL)
-        *out_access_token_secret = g_strdup (data.access_token_secret);
-      if (out_access_token_expires_in != NULL)
-        *out_access_token_expires_in = data.access_token_expires_in;
-      if (out_session_handle != NULL)
-        *out_session_handle = g_strdup (data.session_handle);
-      if (out_session_handle_expires_in != NULL)
-        *out_session_handle_expires_in = data.session_handle_expires_in;
-      if (out_identity != NULL)
-        *out_identity = g_strdup (data.identity);
-      if (out_presentation_identity != NULL)
-        *out_presentation_identity = g_strdup (data.presentation_identity);
-      if (out_password != NULL)
-        *out_password = g_strdup (data.password);
-    }
-  else
-    {
-      g_warn_if_fail (data.error != NULL);
-      g_propagate_error (error, data.error);
-    }
-
-  g_free (data.password);
-  g_free (data.presentation_identity);
-  g_free (data.identity);
-  g_free (url);
-
-  g_free (data.oauth_verifier);
-  if (data.loop != NULL)
-    g_main_loop_unref (data.loop);
-  g_free (data.access_token);
-  g_free (data.access_token_secret);
-  g_free (escaped_request_token);
-
-  g_free (data.request_token);
-  g_free (data.request_token_secret);
-
-  g_strfreev (request_params);
-  if (proxy != NULL)
-    g_object_unref (proxy);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-typedef struct
-{
-  GError *error;
-  GMainLoop *loop;
-  gchar *account_object_path;
-} AddData;
-
-static void
-add_account_cb (GoaManager   *manager,
-                GAsyncResult *res,
-                gpointer      user_data)
-{
-  AddData *data = user_data;
-  goa_manager_call_add_account_finish (manager,
-                                       &data->account_object_path,
-                                       res,
-                                       &data->error);
-  g_main_loop_quit (data->loop);
-}
-
-static gint64
-duration_to_abs_usec (gint duration_sec)
-{
-  gint64 ret;
-  GTimeVal now;
-
-  g_get_current_time (&now);
-  ret = ((gint64) now.tv_sec) * 1000L * 1000L + ((gint64) now.tv_usec);
-  ret += ((gint64) duration_sec) * 1000L * 1000L;
-  return ret;
-}
-
-static gint
-abs_usec_to_duration (gint64 abs_usec)
-{
-  gint64 ret;
-  GTimeVal now;
-
-  g_get_current_time (&now);
-  ret = abs_usec - (((gint64) now.tv_sec) * 1000L * 1000L + ((gint64) now.tv_usec));
-  ret /= 1000L * 1000L;
-  return ret;
-}
-
-static GoaObject *
-goa_oauth_provider_add_account (GoaProvider *_provider,
-                                GoaClient   *client,
-                                GtkDialog   *dialog,
-                                GtkBox      *vbox,
-                                GError     **error)
-{
-  GoaOAuthProvider *provider = GOA_OAUTH_PROVIDER (_provider);
-  GoaObject *ret;
-  gchar *access_token;
-  gchar *access_token_secret;
-  gint access_token_expires_in;
-  gchar *session_handle;
-  gint session_handle_expires_in;
-  gchar *identity;
-  gchar *presentation_identity;
-  gchar *password;
-  AddData data;
-  GVariantBuilder credentials;
-  GVariantBuilder details;
-
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  g_return_val_if_fail (GOA_IS_CLIENT (client), NULL);
-  g_return_val_if_fail (GTK_IS_DIALOG (dialog), NULL);
-  g_return_val_if_fail (GTK_IS_BOX (vbox), NULL);
-  g_return_val_if_fail (error == NULL || *error == NULL, NULL);
-
-  ret = NULL;
-  access_token = NULL;
-  access_token_secret = NULL;
-  session_handle = NULL;
-  identity = NULL;
-  presentation_identity = NULL;
-  password = NULL;
-
-  memset (&data, '\0', sizeof (AddData));
-  data.loop = g_main_loop_new (NULL, FALSE);
-
-  if (!get_tokens_and_identity (provider,
-                                TRUE,
-                                NULL,
-                                dialog,
-                                vbox,
-                                &access_token,
-                                &access_token_secret,
-                                &access_token_expires_in,
-                                &session_handle,
-                                &session_handle_expires_in,
-                                &identity,
-                                &presentation_identity,
-                                &password,
-                                &data.error))
-    goto out;
-
-  /* OK, got the identity... see if there's already an account
-   * of this type with the given identity
-   */
-  if (!goa_utils_check_duplicate (client,
-                                  identity,
-                                  presentation_identity,
-                                  goa_provider_get_provider_type (GOA_PROVIDER (provider)),
-                                  (GoaPeekInterfaceFunc) goa_object_peek_oauth_based,
-                                  &data.error))
-    goto out;
-
-  g_variant_builder_init (&credentials, G_VARIANT_TYPE_VARDICT);
-  g_variant_builder_add (&credentials, "{sv}", "access_token", g_variant_new_string (access_token));
-  g_variant_builder_add (&credentials, "{sv}", "access_token_secret", g_variant_new_string (access_token_secret));
-  if (access_token_expires_in > 0)
-    g_variant_builder_add (&credentials, "{sv}", "access_token_expires_at",
-                           g_variant_new_int64 (duration_to_abs_usec (access_token_expires_in)));
-  if (session_handle != NULL)
-    g_variant_builder_add (&credentials, "{sv}", "session_handle", g_variant_new_string (session_handle));
-  if (session_handle_expires_in > 0)
-    g_variant_builder_add (&credentials, "{sv}", "session_handle_expires_at",
-                           g_variant_new_int64 (duration_to_abs_usec (session_handle_expires_in)));
-  if (password != NULL)
-    g_variant_builder_add (&credentials, "{sv}", "password", g_variant_new_string (password));
-
-  g_variant_builder_init (&details, G_VARIANT_TYPE ("a{ss}"));
-  goa_oauth_provider_add_account_key_values (provider, &details);
-
-  /* we want the GoaClient to update before this method returns (so it
-   * can create a proxy for the new object) so run the mainloop while
-   * waiting for this to complete
-   */
-  goa_manager_call_add_account (goa_client_get_manager (client),
-                                goa_provider_get_provider_type (GOA_PROVIDER (provider)),
-                                identity,
-                                presentation_identity,
-                                g_variant_builder_end (&credentials),
-                                g_variant_builder_end (&details),
-                                NULL, /* GCancellable* */
-                                (GAsyncReadyCallback) add_account_cb,
-                                &data);
-  g_main_loop_run (data.loop);
-  if (data.error != NULL)
-    goto out;
-
-  ret = GOA_OBJECT (g_dbus_object_manager_get_object (goa_client_get_object_manager (client),
-                                                      data.account_object_path));
-
- out:
-  /* We might have an object even when data.error is set.
-   * eg., if we failed to store the credentials in the keyring.
-   */
-  if (data.error != NULL)
-    g_propagate_error (error, data.error);
-  else
-    g_assert (ret != NULL);
-
-  g_free (identity);
-  g_free (presentation_identity);
-  g_free (password);
-  g_free (access_token);
-  g_free (access_token_secret);
-  g_free (session_handle);
-  g_free (data.account_object_path);
-  if (data.loop != NULL)
-    g_main_loop_unref (data.loop);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-goa_oauth_provider_refresh_account (GoaProvider  *_provider,
-                                    GoaClient    *client,
-                                    GoaObject    *object,
-                                    GtkWindow    *parent,
-                                    GError      **error)
-{
-  GoaOAuthProvider *provider = GOA_OAUTH_PROVIDER (_provider);
-  GoaAccount *account;
-  GtkWidget *dialog;
-  gchar *access_token;
-  gchar *access_token_secret;
-  gchar *password;
-  gint access_token_expires_in;
-  gchar *session_handle;
-  gint session_handle_expires_in;
-  gchar *identity;
-  const gchar *existing_identity;
-  const gchar *existing_presentation_identity;
-  GVariantBuilder builder;
-  gboolean ret;
-
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), FALSE);
-  g_return_val_if_fail (GOA_IS_CLIENT (client), FALSE);
-  g_return_val_if_fail (GOA_IS_OBJECT (object), FALSE);
-  g_return_val_if_fail (parent == NULL || GTK_IS_WINDOW (parent), FALSE);
-  g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
-
-  access_token = NULL;
-  access_token_secret = NULL;
-  password = NULL;
-  session_handle = NULL;
-  identity = NULL;
-
-  ret = FALSE;
-
-  dialog = gtk_dialog_new_with_buttons (NULL,
-                                        parent,
-                                        GTK_DIALOG_MODAL
-                                        | GTK_DIALOG_DESTROY_WITH_PARENT
-                                        | GTK_DIALOG_USE_HEADER_BAR,
-                                        NULL,
-                                        NULL);
-  gtk_container_set_border_width (GTK_CONTAINER (dialog), 12);
-  gtk_window_set_resizable (GTK_WINDOW (dialog), FALSE);
-  gtk_widget_show_all (dialog);
-
-  account = goa_object_peek_account (object);
-
-  /* We abuse presentation identity here because for some providers
-   * identity can be a machine readable ID, which can not be used to
-   * log in via the provider's web interface.
-   */
-  existing_presentation_identity = goa_account_get_presentation_identity (account);
-  if (!get_tokens_and_identity (provider,
-                                FALSE,
-                                existing_presentation_identity,
-                                GTK_DIALOG (dialog),
-                                GTK_BOX (gtk_dialog_get_content_area (GTK_DIALOG (dialog))),
-                                &access_token,
-                                &access_token_secret,
-                                &access_token_expires_in,
-                                &session_handle,
-                                &session_handle_expires_in,
-                                &identity,
-                                NULL, /* out_presentation_identity */
-                                &password,
-                                error))
-    goto out;
-
-  /* Changes made to the web interface by the providers can break our
-   * DOM parsing. So we should still query and check the identity
-   * afterwards.
-   */
-  existing_identity = goa_account_get_identity (account);
-  if (g_strcmp0 (identity, existing_identity) != 0)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Was asked to log in as %s, but logged in as %s"),
-                   existing_identity,
-                   identity);
-      goto out;
-    }
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE_VARDICT);
-  g_variant_builder_add (&builder, "{sv}", "access_token", g_variant_new_string (access_token));
-  g_variant_builder_add (&builder, "{sv}", "access_token_secret", g_variant_new_string (access_token_secret));
-  if (access_token_expires_in > 0)
-    g_variant_builder_add (&builder, "{sv}", "access_token_expires_at",
-                           g_variant_new_int64 (duration_to_abs_usec (access_token_expires_in)));
-  if (session_handle != NULL)
-    g_variant_builder_add (&builder, "{sv}", "session_handle", g_variant_new_string (session_handle));
-  if (session_handle_expires_in > 0)
-    g_variant_builder_add (&builder, "{sv}", "session_handle_expires_at",
-                           g_variant_new_int64 (duration_to_abs_usec (session_handle_expires_in)));
-  if (password != NULL)
-    g_variant_builder_add (&builder, "{sv}", "password", g_variant_new_string (password));
-  /* TODO: run in worker thread */
-  if (!goa_utils_store_credentials_for_object_sync (GOA_PROVIDER (provider),
-                                                    object,
-                                                    g_variant_builder_end (&builder),
-                                                    NULL, /* GCancellable  */
-                                                    error))
-    goto out;
-
-  goa_account_call_ensure_credentials (goa_object_peek_account (object),
-                                       NULL, /* GCancellable */
-                                       NULL, NULL); /* callback, user_data */
-
-  ret = TRUE;
-
- out:
-  gtk_widget_destroy (dialog);
-
-  g_free (identity);
-  g_free (access_token);
-  g_free (access_token_secret);
-  g_free (password);
-  g_free (session_handle);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-free_mutex (GMutex *mutex)
-{
-  g_mutex_clear (mutex);
-  g_slice_free (GMutex, mutex);
-}
-
-/**
- * goa_oauth_provider_get_access_token_sync:
- * @provider: A #GoaOAuthProvider.
- * @object: A #GoaObject.
- * @force_refresh: If set to %TRUE, forces a refresh of the access token, if possible.
- * @out_access_token_secret: (out): The secret for the return access token.
- * @out_access_token_expires_in: (out): Return location for how many seconds the returned token is valid for (0 if unknown) or %NULL.
- * @cancellable: (allow-none): A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
- *
- * Synchronously gets an access token for @object. The calling thread
- * is blocked while the operation is pending.
- *
- * The resulting token is typically read from the local cache so most
- * of the time only a local roundtrip to the storage for the token
- * cache (e.g. <command>gnome-keyring-daemon</command>) is
- * needed. However, the operation may involve refreshing the token
- * with the service provider so a full network round-trip may be
- * needed.
- *
- * Note that multiple calls are serialized to avoid multiple
- * outstanding requests to the service provider.
- *
- * This operation may fail if e.g. unable to refresh the credentials
- * or if network connectivity is not available. Note that even if a
- * token is returned, the returned token isn't guaranteed to work -
- * use goa_provider_ensure_credentials_sync() if you need
- * stronger guarantees.
- *
- * Returns: The access token or %NULL if error is set. The returned
- * string must be freed with g_free().
- */
-gchar *
-goa_oauth_provider_get_access_token_sync (GoaOAuthProvider   *provider,
-                                          GoaObject          *object,
-                                          gboolean            force_refresh,
-                                          gchar             **out_access_token_secret,
-                                          gint               *out_access_token_expires_in,
-                                          GCancellable       *cancellable,
-                                          GError            **error)
-{
-  GVariant *credentials;
-  GVariantIter iter;
-  const gchar *key;
-  GVariant *value;
-  gchar *access_token;
-  gchar *access_token_secret;
-  gchar *session_handle;
-  gchar *access_token_for_refresh;
-  gchar *access_token_secret_for_refresh;
-  gchar *session_handle_for_refresh;
-  gchar *password;
-  gint access_token_expires_in;
-  gint session_handle_expires_in;
-  gboolean success;
-  GVariantBuilder builder;
-  gchar *ret;
-  GMutex *lock;
-
-  g_return_val_if_fail (GOA_IS_OAUTH_PROVIDER (provider), NULL);
-  g_return_val_if_fail (GOA_IS_OBJECT (object), NULL);
-  g_return_val_if_fail (cancellable == NULL || G_IS_CANCELLABLE (cancellable), NULL);
-  g_return_val_if_fail (error == NULL || *error == NULL, NULL);
-
-  ret = NULL;
-  credentials = NULL;
-  access_token = NULL;
-  access_token_secret = NULL;
-  access_token_expires_in = 0;
-  session_handle = NULL;
-  session_handle_expires_in = 0;
-  access_token_for_refresh = NULL;
-  access_token_secret_for_refresh = NULL;
-  session_handle_for_refresh = NULL;
-  password = NULL;
-  success = FALSE;
-
-  /* provider_lock is too coarse, use a per-object lock instead */
-  G_LOCK (provider_lock);
-  lock = g_object_get_data (G_OBJECT (object), "-goa-oauth-provider-get-access-token-lock");
-  if (lock == NULL)
-    {
-      lock = g_slice_new0 (GMutex);
-      g_mutex_init (lock);
-      g_object_set_data_full (G_OBJECT (object),
-                              "-goa-oauth-provider-get-access-token-lock",
-                              lock,
-                              (GDestroyNotify) free_mutex);
-    }
-  G_UNLOCK (provider_lock);
-
-  g_mutex_lock (lock);
-
-  /* First, get the credentials from the keyring */
-  credentials = goa_utils_lookup_credentials_sync (GOA_PROVIDER (provider),
-                                                   object,
-                                                   cancellable,
-                                                   error);
-  if (credentials == NULL)
-    {
-      if (error != NULL)
-        {
-          (*error)->domain = GOA_ERROR;
-          (*error)->code = GOA_ERROR_NOT_AUTHORIZED;
-        }
-      goto out;
-    }
-
-  g_variant_iter_init (&iter, credentials);
-  while (g_variant_iter_next (&iter, "{&sv}", &key, &value))
-    {
-      if (g_strcmp0 (key, "access_token") == 0)
-        access_token = g_variant_dup_string (value, NULL);
-      else if (g_strcmp0 (key, "access_token_secret") == 0)
-        access_token_secret = g_variant_dup_string (value, NULL);
-      else if (g_strcmp0 (key, "access_token_expires_at") == 0)
-        access_token_expires_in = abs_usec_to_duration (g_variant_get_int64 (value));
-      else if (g_strcmp0 (key, "session_handle") == 0)
-        session_handle = g_variant_dup_string (value, NULL);
-      else if (g_strcmp0 (key, "session_handle_expires_at") == 0)
-        session_handle_expires_in = abs_usec_to_duration (g_variant_get_int64 (value));
-      else if (g_strcmp0 (key, "password") == 0)
-        password = g_variant_dup_string (value, NULL);
-      g_variant_unref (value);
-    }
-
-  if (access_token == NULL || access_token_secret == NULL)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_NOT_AUTHORIZED,
-                   _("Credentials do not contain access_token or access_token_secret"));
-      goto out;
-    }
-
-  /* if we can't refresh the token, just return it no matter what */
-  if (session_handle == NULL)
-    {
-      g_debug ("Returning locally cached credentials that cannot be refreshed");
-      success = TRUE;
-      goto out;
-    }
-
-  /* If access_token is still "fresh enough" (e.g. more than ten
-   * minutes of life left in it), just return it unless we've been
-   * asked to forcibly refresh it
-   */
-  if (!force_refresh && access_token_expires_in > 10*60)
-    {
-      g_debug ("Returning locally cached credentials (expires in %d seconds)", access_token_expires_in);
-      success = TRUE;
-      goto out;
-    }
-
-  g_debug ("Refreshing locally cached credentials (expires in %d seconds, force_refresh=%d)", access_token_expires_in, force_refresh);
-
-  /* Otherwise, refresh it */
-  access_token_for_refresh        = access_token; access_token = NULL;
-  access_token_secret_for_refresh = access_token_secret; access_token_secret = NULL;
-  session_handle_for_refresh      = session_handle; session_handle = NULL;
-  access_token = get_tokens_sync (provider,
-                                  access_token_for_refresh,
-                                  access_token_secret_for_refresh,
-                                  session_handle_for_refresh,
-                                  NULL, /* verifier */
-                                  &access_token_secret,
-                                  &access_token_expires_in,
-                                  &session_handle,
-                                  &session_handle_expires_in,
-                                  cancellable,
-                                  error);
-  if (access_token == NULL)
-    {
-      if (error != NULL)
-        {
-          g_prefix_error (error, _("Failed to refresh access token (%s, %d): "),
-                          g_quark_to_string ((*error)->domain), (*error)->code);
-          (*error)->code = is_authorization_error (*error) ? GOA_ERROR_NOT_AUTHORIZED : GOA_ERROR_FAILED;
-          (*error)->domain = GOA_ERROR;
-        }
-      goto out;
-    }
-
-  /* Good. Now update the keyring with the refreshed credentials */
-  g_variant_builder_init (&builder, G_VARIANT_TYPE_VARDICT);
-  g_variant_builder_add (&builder, "{sv}", "access_token", g_variant_new_string (access_token));
-  g_variant_builder_add (&builder, "{sv}", "access_token_secret", g_variant_new_string (access_token_secret));
-  if (access_token_expires_in > 0)
-    g_variant_builder_add (&builder, "{sv}", "access_token_expires_at",
-                           g_variant_new_int64 (duration_to_abs_usec (access_token_expires_in)));
-  if (session_handle != NULL)
-    g_variant_builder_add (&builder, "{sv}", "session_handle", g_variant_new_string (session_handle));
-  if (session_handle_expires_in > 0)
-    g_variant_builder_add (&builder, "{sv}", "session_handle_expires_at",
-                           g_variant_new_int64 (duration_to_abs_usec (session_handle_expires_in)));
-  if (password != NULL)
-    g_variant_builder_add (&builder, "{sv}", "password", g_variant_new_string (password));
-
-  /* TODO: run in worker thread */
-  if (!goa_utils_store_credentials_for_object_sync (GOA_PROVIDER (provider),
-                                                    object,
-                                                    g_variant_builder_end (&builder),
-                                                    cancellable,
-                                                    error))
-    {
-      if (error != NULL)
-        {
-          (*error)->domain = GOA_ERROR;
-          (*error)->code = GOA_ERROR_NOT_AUTHORIZED;
-        }
-      goto out;
-    }
-
-  success = TRUE;
-
- out:
-  if (success)
-    {
-      ret = access_token; access_token = NULL;
-      g_assert (ret != NULL);
-      if (out_access_token_secret != NULL)
-        {
-          *out_access_token_secret = access_token_secret; access_token_secret = NULL;
-        }
-      if (out_access_token_expires_in != NULL)
-        *out_access_token_expires_in = access_token_expires_in;
-    }
-  g_free (access_token);
-  g_free (access_token_secret);
-  g_free (session_handle);
-  g_free (access_token_for_refresh);
-  g_free (access_token_secret_for_refresh);
-  g_free (session_handle_for_refresh);
-  g_free (password);
-  if (credentials != NULL)
-    g_variant_unref (credentials);
-
-  g_mutex_unlock (lock);
-
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean on_handle_get_access_token (GoaOAuthBased         *object,
-                                            GDBusMethodInvocation *invocation,
-                                            gpointer               user_data);
-
-static gboolean
-goa_oauth_provider_build_object (GoaProvider         *provider,
-                                 GoaObjectSkeleton   *object,
-                                 GKeyFile            *key_file,
-                                 const gchar         *group,
-                                 GDBusConnection     *connection,
-                                 gboolean             just_added,
-                                 GError             **error)
-{
-  GoaOAuthBased *oauth_based;
-  gchar *identity;
-
-  identity = NULL;
-
-  oauth_based = goa_object_get_oauth_based (GOA_OBJECT (object));
-  if (oauth_based != NULL)
-    goto out;
-
-  oauth_based = goa_oauth_based_skeleton_new ();
-  goa_oauth_based_set_consumer_key (oauth_based,
-                                    goa_oauth_provider_get_consumer_key (GOA_OAUTH_PROVIDER (provider)));
-  goa_oauth_based_set_consumer_secret (oauth_based,
-                                       goa_oauth_provider_get_consumer_secret (GOA_OAUTH_PROVIDER (provider)));
-  /* Ensure D-Bus method invocations run in their own thread */
-  g_dbus_interface_skeleton_set_flags (G_DBUS_INTERFACE_SKELETON (oauth_based),
-                                       G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD);
-  goa_object_skeleton_set_oauth_based (object, oauth_based);
-  g_signal_connect (oauth_based,
-                    "handle-get-access-token",
-                    G_CALLBACK (on_handle_get_access_token),
-                    NULL);
-
- out:
-  g_object_unref (oauth_based);
-  g_free (identity);
-  return TRUE;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-goa_oauth_provider_ensure_credentials_sync (GoaProvider    *_provider,
-                                            GoaObject      *object,
-                                            gint           *out_expires_in,
-                                            GCancellable   *cancellable,
-                                            GError        **error)
-{
-  GoaOAuthProvider *provider = GOA_OAUTH_PROVIDER (_provider);
-  gboolean ret;
-  gchar *access_token;
-  gchar *access_token_secret;
-  gint access_token_expires_in;
-  gchar *identity;
-  gboolean force_refresh;
-
-  ret = FALSE;
-  access_token = NULL;
-  access_token_secret = NULL;
-  identity = NULL;
-  force_refresh = FALSE;
-
- again:
-  access_token = goa_oauth_provider_get_access_token_sync (provider,
-                                                                   object,
-                                                                   force_refresh,
-                                                                   &access_token_secret,
-                                                                   &access_token_expires_in,
-                                                                   cancellable,
-                                                                   error);
-  if (access_token == NULL)
-    goto out;
-
-  identity = goa_oauth_provider_get_identity_sync (provider,
-                                                           access_token,
-                                                           access_token_secret,
-                                                           NULL, /* out_presentation_identity */
-                                                           cancellable,
-                                                           error);
-  if (identity == NULL)
-    {
-      /* OK, try again, with forcing the locally cached credentials to be refreshed */
-      if (!force_refresh)
-        {
-          force_refresh = TRUE;
-          g_free (access_token); access_token = NULL;
-          g_free (access_token_secret); access_token_secret = NULL;
-          g_clear_error (error);
-          goto again;
-        }
-      else
-        {
-          goto out;
-        }
-    }
-
-  /* TODO: maybe check with the identity we have */
-  ret = TRUE;
-  if (out_expires_in != NULL)
-    *out_expires_in = access_token_expires_in;
-
- out:
-  g_free (identity);
-  g_free (access_token);
-  g_free (access_token_secret);
-  return ret;
-}
-
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-goa_oauth_provider_init (GoaOAuthProvider *client)
-{
-}
-
-static void
-goa_oauth_provider_class_init (GoaOAuthProviderClass *klass)
-{
-  GoaProviderClass *provider_class;
-
-  provider_class = GOA_PROVIDER_CLASS (klass);
-  provider_class->add_account                = goa_oauth_provider_add_account;
-  provider_class->refresh_account            = goa_oauth_provider_refresh_account;
-  provider_class->build_object               = goa_oauth_provider_build_object;
-  provider_class->ensure_credentials_sync    = goa_oauth_provider_ensure_credentials_sync;
-
-  klass->build_authorization_uri  = goa_oauth_provider_build_authorization_uri_default;
-  klass->get_use_mobile_browser   = goa_oauth_provider_get_use_mobile_browser_default;
-  klass->is_password_node         = goa_oauth_provider_is_password_node_default;
-  klass->get_request_uri_params   = goa_oauth_provider_get_request_uri_params_default;
-  klass->add_account_key_values   = goa_oauth_provider_add_account_key_values_default;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-/* runs in a thread dedicated to handling @invocation */
-static gboolean
-on_handle_get_access_token (GoaOAuthBased         *interface,
-                            GDBusMethodInvocation *invocation,
-                            gpointer               user_data)
-{
-  GoaObject *object;
-  GoaAccount *account;
-  GoaProvider *provider;
-  GError *error;
-  gchar *access_token;
-  gchar *access_token_secret;
-  gint access_token_expires_in;
-
-  /* TODO: maybe log what app is requesting access */
-
-  access_token = NULL;
-  access_token_secret = NULL;
-
-  object = GOA_OBJECT (g_dbus_interface_get_object (G_DBUS_INTERFACE (interface)));
-  account = goa_object_peek_account (object);
-  provider = goa_provider_get_for_provider_type (goa_account_get_provider_type (account));
-
-  error = NULL;
-  access_token = goa_oauth_provider_get_access_token_sync (GOA_OAUTH_PROVIDER (provider),
-                                                                   object,
-                                                                   FALSE, /* force_refresh */
-                                                                   &access_token_secret,
-                                                                   &access_token_expires_in,
-                                                                   NULL, /* GCancellable* */
-                                                                   &error);
-  if (access_token == NULL)
-    {
-      g_dbus_method_invocation_return_gerror (invocation, error);
-      g_error_free (error);
-    }
-  else
-    {
-      goa_oauth_based_complete_get_access_token (interface,
-                                                 invocation,
-                                                 access_token,
-                                                 access_token_secret,
-                                                 access_token_expires_in);
-    }
-  g_free (access_token);
-  g_free (access_token_secret);
-  g_object_unref (provider);
-  return TRUE; /* invocation was handled */
-}
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goaoauthprovider.h gnome-online-accounts-3.14.0n/src/goabackend/goaoauthprovider.h
--- gnome-online-accounts-3.14.0/src/goabackend/goaoauthprovider.h	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goaoauthprovider.h	1970-01-01 00:00:00.000000000 +0000
@@ -1,166 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011, 2012, 2014 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#if !defined (__GOA_BACKEND_INSIDE_GOA_BACKEND_H__) && !defined (GOA_BACKEND_COMPILATION)
-#error "Only <goabackend/goabackend.h> can be included directly."
-#endif
-
-#ifndef __GOA_OAUTH_PROVIDER_H__
-#define __GOA_OAUTH_PROVIDER_H__
-
-#include <goabackend/goaprovider.h>
-#include <goabackend/goaprovider-priv.h>
-#include <rest/rest-proxy-call.h>
-#include <webkit/webkit.h>
-
-G_BEGIN_DECLS
-
-#define GOA_TYPE_OAUTH_PROVIDER         (goa_oauth_provider_get_type ())
-#define GOA_OAUTH_PROVIDER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_OAUTH_PROVIDER, GoaOAuthProvider))
-#define GOA_OAUTH_PROVIDER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GOA_TYPE_OAUTH_PROVIDER, GoaOAuthProviderClass))
-#define GOA_OAUTH_PROVIDER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GOA_TYPE_OAUTH_PROVIDER, GoaOAuthProviderClass))
-#define GOA_IS_OAUTH_PROVIDER(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_OAUTH_PROVIDER))
-
-#define GOA_IS_OAUTH_PROVIDER_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GOA_TYPE_OAUTH_PROVIDER))
-
-typedef struct _GoaOAuthProvider GoaOAuthProvider;
-typedef struct _GoaOAuthProviderClass GoaOAuthProviderClass;
-typedef struct _GoaOAuthProviderPrivate GoaOAuthProviderPrivate;
-
-/**
- * GoaOAuthProvider:
- *
- * The #GoaOAuthProvider structure contains only private data and should
- * only be accessed using the provided API.
- */
-struct _GoaOAuthProvider
-{
-  /*< private >*/
-  GoaProvider parent_instance;
-  GoaOAuthProviderPrivate *priv;
-};
-
-/**
- * GoaOAuthProviderClass:
- * @parent_class: The parent class.
- * @get_consumer_key: Virtual function for goa_oauth_provider_get_consumer_key().
- * @get_consumer_secret: Virtual function for goa_oauth_provider_get_consumer_secret().
- * @get_request_uri: Virtual function for goa_oauth_provider_get_request_uri().
- * @get_authorization_uri: Virtual function for goa_oauth_provider_get_authorization_uri().
- * @get_token_uri: Virtual function for goa_oauth_provider_get_token_uri().
- * @get_callback_uri: Virtual function for goa_oauth_provider_get_callback_uri().
- * @get_authentication_cookie: Virtual function for goa_oauth_provider_get_authentication_cookie().
- * @get_identity_sync: Virtual function for goa_oauth_provider_get_identity_sync().
- * @parse_request_token_error: Virtual function for goa_oauth_provider_parse_request_token_error().
- * @build_authorization_uri: Virtual function for goa_oauth_provider_build_authorization_uri().
- * @get_use_mobile_browser: Virtual function for goa_oauth_provider_get_use_mobile_browser().
- * @get_request_uri_params: Virtual function for goa_oauth_provider_get_request_uri_params().
- * @add_account_key_values: Virtual function for goa_oauth_provider_add_account_key_values().
- * @is_deny_node: Virtual function for goa_oauth_provider_is_deny_node().
- * @is_identity_node: Virtual function for goa_oauth_provider_is_identity_node().
- * @is_password_node: Virtual function for goa_oauth_provider_is_password_node().
- *
- * Class structure for #GoaOAuthProvider.
- */
-struct _GoaOAuthProviderClass
-{
-  GoaProviderClass parent_class;
-
-  /* pure virtual */
-  const gchar *(*get_consumer_key)             (GoaOAuthProvider             *provider);
-  const gchar *(*get_consumer_secret)          (GoaOAuthProvider             *provider);
-  const gchar *(*get_request_uri)              (GoaOAuthProvider             *provider);
-  const gchar *(*get_authorization_uri)        (GoaOAuthProvider             *provider);
-  const gchar *(*get_token_uri)                (GoaOAuthProvider             *provider);
-  const gchar *(*get_callback_uri)             (GoaOAuthProvider             *provider);
-  const gchar *(*get_authentication_cookie)    (GoaOAuthProvider             *provider);
-
-  gchar       *(*get_identity_sync)            (GoaOAuthProvider             *provider,
-                                                const gchar                  *access_token,
-                                                const gchar                  *access_token_secret,
-                                                gchar                       **out_presentation_identity,
-                                                GCancellable                 *cancellable,
-                                                GError                      **error);
-
-  gchar       *(*parse_request_token_error)    (GoaOAuthProvider             *provider,
-                                                RestProxyCall                *call);
-
-  /* virtual but with default implementation */
-  gchar       *(*build_authorization_uri)      (GoaOAuthProvider             *provider,
-                                                const gchar                  *authorization_uri,
-                                                const gchar                  *escaped_oauth_token);
-  gboolean     (*get_use_mobile_browser)       (GoaOAuthProvider             *provider);
-  gchar      **(*get_request_uri_params)       (GoaOAuthProvider             *provider);
-  void         (*add_account_key_values)       (GoaOAuthProvider             *provider,
-                                                GVariantBuilder              *builder);
-
-  /* pure virtual */
-  gboolean     (*is_deny_node)                 (GoaOAuthProvider             *provider,
-                                                WebKitDOMNode                *node);
-  gboolean     (*is_identity_node)             (GoaOAuthProvider             *provider,
-                                                WebKitDOMHTMLInputElement    *element);
-
-  /* virtual but with default implementation */
-  gboolean     (*is_password_node)             (GoaOAuthProvider             *provider,
-                                                WebKitDOMHTMLInputElement    *element);
-
-  /*< private >*/
-  /* Padding for future expansion */
-  gpointer goa_reserved[29];
-};
-
-GType        goa_oauth_provider_get_type                     (void) G_GNUC_CONST;
-const gchar *goa_oauth_provider_get_consumer_key             (GoaOAuthProvider             *provider);
-const gchar *goa_oauth_provider_get_consumer_secret          (GoaOAuthProvider             *provider);
-const gchar *goa_oauth_provider_get_request_uri              (GoaOAuthProvider             *provider);
-gchar      **goa_oauth_provider_get_request_uri_params       (GoaOAuthProvider             *provider);
-const gchar *goa_oauth_provider_get_authorization_uri        (GoaOAuthProvider             *provider);
-const gchar *goa_oauth_provider_get_token_uri                (GoaOAuthProvider             *provider);
-const gchar *goa_oauth_provider_get_callback_uri             (GoaOAuthProvider             *provider);
-const gchar *goa_oauth_provider_get_authentication_cookie    (GoaOAuthProvider             *provider);
-gchar       *goa_oauth_provider_get_identity_sync            (GoaOAuthProvider          *provider,
-                                                              const gchar               *access_token,
-                                                              const gchar               *access_token_secret,
-                                                              gchar                    **out_presentation_identity,
-                                                              GCancellable              *cancellable,
-                                                              GError                   **error);
-gboolean     goa_oauth_provider_is_deny_node                 (GoaOAuthProvider             *provider,
-                                                              WebKitDOMNode                *node);
-gboolean     goa_oauth_provider_is_identity_node             (GoaOAuthProvider             *provider,
-                                                              WebKitDOMHTMLInputElement    *element);
-gboolean     goa_oauth_provider_is_password_node             (GoaOAuthProvider             *provider,
-                                                              WebKitDOMHTMLInputElement    *element);
-gchar       *goa_oauth_provider_parse_request_token_error    (GoaOAuthProvider             *provider,
-                                                              RestProxyCall                *call);
-gchar       *goa_oauth_provider_get_access_token_sync        (GoaOAuthProvider          *provider,
-                                                              GoaObject                 *object,
-                                                              gboolean                   force_refresh,
-                                                              gchar                    **out_access_token_secret,
-                                                              gint                      *out_access_token_expires_in,
-                                                              GCancellable              *cancellable,
-                                                              GError                   **error);
-gchar       *goa_oauth_provider_build_authorization_uri      (GoaOAuthProvider             *provider,
-                                                              const gchar                  *authorization_uri,
-                                                              const gchar                  *escaped_oauth_token);
-gboolean     goa_oauth_provider_get_use_mobile_browser       (GoaOAuthProvider             *provider);
-void         goa_oauth_provider_add_account_key_values       (GoaOAuthProvider             *provider,
-                                                              GVariantBuilder              *builder);
-
-G_END_DECLS
-
-#endif /* __GOA_OAUTH_PROVIDER_H__ */
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goapocketprovider.c gnome-online-accounts-3.14.0n/src/goabackend/goapocketprovider.c
--- gnome-online-accounts-3.14.0/src/goabackend/goapocketprovider.c	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goapocketprovider.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,481 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2013 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "config.h"
-#include <glib/gi18n-lib.h>
-
-#include <rest/rest-proxy.h>
-#include <json-glib/json-glib.h>
-#include <webkit/webkit.h>
-
-#include "goaprovider.h"
-#include "goaprovider-priv.h"
-#include "goaoauth2provider.h"
-#include "goapocketprovider.h"
-
-#define V3_OAUTH_AUTHORIZE_URL "https://getpocket.com/v3/oauth/authorize"
-
-/**
- * GoaPocketProvider:
- *
- * The #GoaPocketProvider structure contains only private data and should
- * only be accessed using the provided API.
- */
-struct _GoaPocketProvider
-{
-  /*< private >*/
-  GoaOAuth2Provider parent_instance;
-
-  /* request token as gathered from Step 2:
-   * http://getpocket.com/developer/docs/authentication */
-  gchar *code;
-  gchar *identity;
-};
-
-typedef struct _GoaPocketProviderClass GoaPocketProviderClass;
-
-struct _GoaPocketProviderClass
-{
-  GoaOAuth2ProviderClass parent_class;
-};
-
-/**
- * SECTION:goapocketprovider
- * @title: GoaPocketProvider
- * @short_description: A provider for Pocket accounts
- *
- * #GoaPocketProvider is used for handling Pocket accounts.
- */
-
-G_DEFINE_TYPE_WITH_CODE (GoaPocketProvider, goa_pocket_provider, GOA_TYPE_OAUTH2_PROVIDER,
-                         goa_provider_ensure_extension_points_registered ();
-                         g_io_extension_point_implement (GOA_PROVIDER_EXTENSION_POINT_NAME,
-                                                         g_define_type_id,
-                                                         GOA_POCKET_NAME,
-                                                         0));
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static const gchar *
-get_provider_type (GoaProvider *_provider)
-{
-  return GOA_POCKET_NAME;
-}
-
-static gchar *
-get_provider_name (GoaProvider *_provider,
-                   GoaObject   *object)
-{
-  return g_strdup (_("Pocket"));
-}
-
-static GoaProviderGroup
-get_provider_group (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_GROUP_BRANDED;
-}
-
-static GoaProviderFeatures
-get_provider_features (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_FEATURE_BRANDED |
-         GOA_PROVIDER_FEATURE_READ_LATER;
-}
-
-static const gchar *
-get_request_uri (GoaOAuth2Provider *provider)
-{
-  return "https://getpocket.com/v3/oauth/request";
-}
-
-static const gchar *
-get_authorization_uri (GoaOAuth2Provider *provider)
-{
-  return "https://getpocket.com/auth/authorize";
-}
-
-static const gchar *
-get_token_uri (GoaOAuth2Provider *provider)
-{
-  return NULL;
-}
-
-static const gchar *
-get_redirect_uri (GoaOAuth2Provider *provider)
-{
-  return "https://localhost";
-}
-
-static const gchar *
-get_client_id (GoaOAuth2Provider *provider)
-{
-  return GOA_POCKET_CLIENT_ID;
-}
-
-static const gchar *
-get_client_secret (GoaOAuth2Provider *provider)
-{
-  return NULL;
-}
-
-static gchar *
-build_authorization_uri (GoaOAuth2Provider  *provider,
-                         const gchar        *authorization_uri,
-                         const gchar        *escaped_redirect_uri,
-                         const gchar        *escaped_client_id,
-                         const gchar        *escaped_scope)
-{
-  GoaPocketProvider *pocket = GOA_POCKET_PROVIDER (provider);
-  RestProxy *proxy;
-  RestProxyCall *call;
-  const gchar *payload;
-  gchar *code, *url;
-  GError *error = NULL;
-  GHashTable *hash;
-
-  g_clear_pointer (&pocket->code, g_free);
-
-  url = NULL;
-
-  proxy = rest_proxy_new (get_request_uri (provider), FALSE);
-  call = rest_proxy_new_call (proxy);
-
-  rest_proxy_call_set_method (call, "POST");
-  rest_proxy_call_add_header (call, "Content-Type", "application/x-www-form-urlencoded");
-  rest_proxy_call_add_param (call, "consumer_key", GOA_POCKET_CLIENT_ID);
-  rest_proxy_call_add_param (call, "redirect_uri", get_redirect_uri (provider));
-
-  if (!rest_proxy_call_sync (call, &error))
-    {
-      g_debug ("Call to %s failed: %s", get_redirect_uri (provider), error->message);
-      g_error_free (error);
-      goto out;
-    }
-
-  payload = rest_proxy_call_get_payload (call);
-  hash = soup_form_decode (payload);
-  code = g_strdup (g_hash_table_lookup (hash, "code"));
-  g_hash_table_unref (hash);
-
-  if (!code)
-    {
-      g_debug ("Failed to get code from answer to %s", get_redirect_uri (provider));
-      goto out;
-    }
-
-  url = g_strdup_printf ("%s"
-                         "?request_token=%s"
-                         "&redirect_uri=%s",
-                         authorization_uri,
-                         code,
-                         escaped_redirect_uri);
-
-  pocket->code = code;
-
-out:
-  g_clear_object (&call);
-  g_clear_object (&proxy);
-  return url;
-}
-
-static gboolean
-process_redirect_url (GoaOAuth2Provider            *provider,
-                      const gchar                  *redirect_url,
-                      gchar                       **access_token,
-                      GError                      **error)
-{
-  GoaPocketProvider *pocket = GOA_POCKET_PROVIDER (provider);
-  RestProxy *proxy;
-  RestProxyCall *call;
-  GHashTable *hash;
-  const gchar *payload;
-  gboolean ret;
-
-  ret = FALSE;
-
-  proxy = rest_proxy_new (V3_OAUTH_AUTHORIZE_URL, FALSE);
-  call = rest_proxy_new_call (proxy);
-
-  rest_proxy_call_set_method (call, "POST");
-  rest_proxy_call_add_header (call, "Content-Type", "application/x-www-form-urlencoded");
-  rest_proxy_call_add_param (call, "consumer_key", GOA_POCKET_CLIENT_ID);
-  rest_proxy_call_add_param (call, "code", pocket->code);
-
-  if (!rest_proxy_call_sync (call, error))
-    goto out;
-
-  payload = rest_proxy_call_get_payload (call);
-  hash = soup_form_decode (payload);
-  pocket->identity = g_strdup (g_hash_table_lookup (hash, "username"));
-  *access_token = g_strdup (g_hash_table_lookup (hash, "access_token"));
-  g_hash_table_unref (hash);
-
-  if (pocket->identity == NULL|| *access_token == NULL)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED, /* TODO: more specific */
-                   _("No username or access_token"));
-      g_clear_pointer (&pocket->identity, g_free);
-      g_clear_pointer (access_token, g_free);
-      goto out;
-    }
-
-  ret = TRUE;
-
-out:
-  g_clear_object (&call);
-  g_clear_object (&proxy);
-  return ret;
-}
-
-static const gchar *
-get_authentication_cookie (GoaOAuth2Provider *provider)
-{
-  return NULL;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-get_identity_sync (GoaOAuth2Provider  *provider,
-                   const gchar        *access_token,
-                   gchar             **out_presentation_identity,
-                   GCancellable       *cancellable,
-                   GError            **error)
-{
-  GoaPocketProvider *pocket = GOA_POCKET_PROVIDER (provider);
-  if (out_presentation_identity != NULL)
-    *out_presentation_identity = g_strdup (pocket->identity);
-  return g_strdup (pocket->identity);
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-is_deny_node (GoaOAuth2Provider *provider, WebKitDOMNode *node)
-{
-  WebKitDOMElement *element;
-  gboolean ret;
-  gchar *id;
-  gchar *class;
-  gchar *text;
-
-  id = NULL;
-  class = NULL;
-  text = NULL;
-  ret = FALSE;
-
-  if (!WEBKIT_DOM_IS_ELEMENT (node))
-    goto out;
-
-  element = WEBKIT_DOM_ELEMENT (node);
-
-  /* Desktop version */
-  id = webkit_dom_element_get_id (element);
-  if (g_strcmp0 (id, "denyButton") == 0)
-    {
-      ret = TRUE;
-      goto out;
-    }
-
-  /* Mobile version */
-  class = webkit_dom_element_get_class_name (element);
-  if (g_strcmp0 (class, "toolbarButton") != 0)
-    goto out;
-
-  /* FIXME: This only seems to work if we don't click on the "Sign Up"
-   * button, does the check need to be done again? */
-  text = webkit_dom_node_get_text_content (node);
-  if (g_strcmp0 (text, "Cancel") != 0)
-    goto out;
-
-  ret = TRUE;
-
- out:
-  g_free (id);
-  g_free (class);
-  g_free (text);
-  return ret;
-}
-
-static gboolean
-is_identity_node (GoaOAuth2Provider *provider, WebKitDOMHTMLInputElement *element)
-{
-  gboolean ret;
-  gchar *name;
-
-  ret = FALSE;
-
-  name = webkit_dom_html_input_element_get_name (element);
-  if (g_strcmp0 (name, "feed_id") != 0)
-    goto out;
-
-  ret = TRUE;
-
-out:
-  g_free (name);
-  return ret;
-
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-build_object (GoaProvider         *provider,
-              GoaObjectSkeleton   *object,
-              GKeyFile            *key_file,
-              const gchar         *group,
-              GDBusConnection     *connection,
-              gboolean             just_added,
-              GError             **error)
-{
-  GoaAccount *account;
-  GoaReadLater *readlater = NULL;
-  gboolean read_later_enabled;
-  gboolean ret = FALSE;
-
-  account = NULL;
-
-  /* Chain up */
-  if (!GOA_PROVIDER_CLASS (goa_pocket_provider_parent_class)->build_object (provider,
-                                                                            object,
-                                                                            key_file,
-                                                                            group,
-                                                                            connection,
-                                                                            just_added,
-                                                                            error))
-    goto out;
-
-  account = goa_object_get_account (GOA_OBJECT (object));
-
-  /* Read Later */
-  readlater = goa_object_get_read_later (GOA_OBJECT (object));
-  read_later_enabled = g_key_file_get_boolean (key_file, group, "ReadLaterEnabled", NULL);
-  if (read_later_enabled)
-    {
-      if (readlater == NULL)
-        {
-          readlater = goa_read_later_skeleton_new ();
-          goa_object_skeleton_set_read_later (object, readlater);
-        }
-    }
-  else
-    {
-      if (readlater != NULL)
-        goa_object_skeleton_set_read_later (object, NULL);
-    }
-
-  if (just_added)
-    {
-      goa_account_set_read_later_disabled (account, !read_later_enabled);
-
-      g_signal_connect (account,
-                        "notify::read-later-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "ReadLaterEnabled");
-    }
-
-  ret = TRUE;
-
- out:
-  g_clear_object (&readlater);
-  g_clear_object (&account);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-show_account (GoaProvider         *provider,
-              GoaClient           *client,
-              GoaObject           *object,
-              GtkBox              *vbox,
-              GtkGrid             *grid,
-              G_GNUC_UNUSED GtkGrid *dummy)
-{
-  gint row;
-
-  row = 0;
-
-  goa_util_add_account_info (grid, row++, object);
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   /* Translators: This is a label for a series of
-                                                    * options switches. For example: “Use for Mail”. */
-                                                   _("Use for"),
-                                                   "read-later-disabled",
-                                                   _("_Read Later"));
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-add_account_key_values (GoaOAuth2Provider *provider,
-                        GVariantBuilder   *builder)
-{
-  g_variant_builder_add (builder, "{ss}", "ReadLaterEnabled", "true");
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-goa_pocket_provider_init (GoaPocketProvider *client)
-{
-}
-
-static void
-goa_pocket_provider_finalize (GObject *object)
-{
-  GoaPocketProvider *provider = GOA_POCKET_PROVIDER (object);
-
-  g_clear_pointer (&provider->code, g_free);
-  g_clear_pointer (&provider->identity, g_free);
-
-  G_OBJECT_CLASS (goa_pocket_provider_parent_class)->finalize (object);
-}
-
-static void
-goa_pocket_provider_class_init (GoaPocketProviderClass *klass)
-{
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-  GoaProviderClass *provider_class = GOA_PROVIDER_CLASS (klass);
-  GoaOAuth2ProviderClass *oauth2_class = GOA_OAUTH2_PROVIDER_CLASS (klass);
-
-  object_class->finalize = goa_pocket_provider_finalize;
-
-  provider_class->get_provider_type          = get_provider_type;
-  provider_class->get_provider_name          = get_provider_name;
-  provider_class->get_provider_group         = get_provider_group;
-  provider_class->get_provider_features      = get_provider_features;
-  provider_class->build_object               = build_object;
-  provider_class->show_account               = show_account;
-
-  oauth2_class->build_authorization_uri   = build_authorization_uri;
-  oauth2_class->get_authorization_uri     = get_authorization_uri;
-  oauth2_class->get_token_uri             = get_token_uri;
-  oauth2_class->get_redirect_uri          = get_redirect_uri;
-  oauth2_class->get_client_id             = get_client_id;
-  oauth2_class->get_client_secret         = get_client_secret;
-  oauth2_class->get_identity_sync         = get_identity_sync;
-  oauth2_class->is_deny_node              = is_deny_node;
-  oauth2_class->is_identity_node          = is_identity_node;
-  oauth2_class->add_account_key_values    = add_account_key_values;
-  oauth2_class->process_redirect_url      = process_redirect_url;
-  oauth2_class->get_authentication_cookie = get_authentication_cookie;
-}
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goapocketprovider.h gnome-online-accounts-3.14.0n/src/goabackend/goapocketprovider.h
--- gnome-online-accounts-3.14.0/src/goabackend/goapocketprovider.h	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goapocketprovider.h	1970-01-01 00:00:00.000000000 +0000
@@ -1,40 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2013 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#if !defined (__GOA_BACKEND_INSIDE_GOA_BACKEND_H__) && !defined (GOA_BACKEND_COMPILATION)
-#error "Only <goabackend/goabackend.h> can be included directly."
-#endif
-
-#ifndef __GOA_POCKET_PROVIDER_H__
-#define __GOA_POCKET_PROVIDER_H__
-
-#include <glib-object.h>
-
-G_BEGIN_DECLS
-
-#define GOA_TYPE_POCKET_PROVIDER   (goa_pocket_provider_get_type ())
-#define GOA_POCKET_PROVIDER(o)     (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_POCKET_PROVIDER, GoaPocketProvider))
-#define GOA_IS_POCKET_PROVIDER(o)  (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_POCKET_PROVIDER))
-
-typedef struct _GoaPocketProvider GoaPocketProvider;
-
-GType goa_pocket_provider_get_type (void) G_GNUC_CONST;
-
-G_END_DECLS
-
-#endif /* __GOA_POCKET_PROVIDER_H__ */
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goawebview.c gnome-online-accounts-3.14.0n/src/goabackend/goawebview.c
--- gnome-online-accounts-3.14.0/src/goabackend/goawebview.c	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goawebview.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,414 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
- *
- * Copyright (C) 2012, 2013, 2014 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-/* Based on code by the Epiphany team.
- */
-
-#include "config.h"
-
-#include <glib.h>
-#include <glib/gi18n-lib.h>
-#include <libsoup/soup.h>
-#include <webkit/webkit.h>
-
-#include "goawebview.h"
-#include "nautilus-floating-bar.h"
-
-struct _GoaWebViewPrivate
-{
-  GtkWidget *floating_bar;
-  GtkWidget *progress_bar;
-  GtkWidget *web_view;
-  gboolean status;
-  gulong clear_notify_progress_id;
-  gulong notify_load_status_id;
-  gulong notify_progress_id;
-};
-
-#define GOA_WEB_VIEW_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GOA_TYPE_WEB_VIEW, GoaWebViewPrivate))
-
-G_DEFINE_TYPE (GoaWebView, goa_web_view, GTK_TYPE_OVERLAY)
-
-static gboolean
-web_view_clear_notify_progress_cb (gpointer user_data)
-{
-  GoaWebView *self = GOA_WEB_VIEW (user_data);
-  GoaWebViewPrivate *priv = self->priv;
-
-  gtk_widget_hide (priv->progress_bar);
-  priv->clear_notify_progress_id = 0;
-  return FALSE;
-}
-
-static char *
-web_view_create_loading_title (const gchar *url)
-{
-  SoupURI *uri;
-  const gchar *hostname;
-  gchar *title;
-
-  g_return_val_if_fail (url != NULL && url[0] != '\0', NULL);
-
-  uri = soup_uri_new (url);
-  hostname = soup_uri_get_host (uri);
-  /* translators: %s here is the address of the web page */
-  title = g_strdup_printf (_("Loading “%s”…"), hostname);
-  soup_uri_free (uri);
-
-  return title;
-}
-
-static void
-web_view_floating_bar_update (GoaWebView *self, const gchar *text)
-{
-  GoaWebViewPrivate *priv = self->priv;
-
-  nautilus_floating_bar_set_label (NAUTILUS_FLOATING_BAR (priv->floating_bar), text);
-
-  if (text == NULL || text[0] == '\0')
-    {
-      gtk_widget_hide (priv->floating_bar);
-      gtk_widget_set_halign (priv->floating_bar, GTK_ALIGN_START);
-    }
-  else
-    gtk_widget_show (priv->floating_bar);
-}
-
-static gboolean
-web_view_is_loading (GoaWebView *self)
-{
-  GoaWebViewPrivate *priv = self->priv;
-  WebKitLoadStatus status;
-
-  status = webkit_web_view_get_load_status (WEBKIT_WEB_VIEW (priv->web_view));
-
-  if ((priv->status == WEBKIT_LOAD_FINISHED || priv->status == WEBKIT_LOAD_FAILED)
-      && status != WEBKIT_LOAD_PROVISIONAL)
-    return FALSE;
-
-  priv->status = status;
-  return status != WEBKIT_LOAD_FINISHED && status != WEBKIT_LOAD_FAILED;
-}
-
-static void
-web_view_log_printer (SoupLogger         *logger,
-                      SoupLoggerLogLevel  level,
-                      gchar               direction,
-                      const gchar        *data,
-                      gpointer            user_data)
-{
-  gchar *message;
-
-  message = g_strdup_printf ("%c %s", direction, data);
-  g_log_default_handler ("goa", G_LOG_LEVEL_DEBUG, message, NULL);
-  g_free (message);
-}
-
-static void
-web_view_notify_load_status_cb (GObject *object, GParamSpec *pspec, gpointer user_data)
-{
-  GoaWebView *self = GOA_WEB_VIEW (user_data);
-  WebKitWebView *web_view = WEBKIT_WEB_VIEW (object);
-  WebKitLoadStatus status;
-
-  status = webkit_web_view_get_load_status (web_view);
-  switch (status)
-    {
-    case WEBKIT_LOAD_PROVISIONAL:
-      {
-        WebKitNetworkRequest *request;
-        WebKitWebDataSource *source;
-        WebKitWebFrame *frame;
-        const gchar *uri;
-        gchar *title;
-
-        frame = webkit_web_view_get_main_frame (web_view);
-        source = webkit_web_frame_get_provisional_data_source (frame);
-        request = webkit_web_data_source_get_initial_request (source);
-        uri = webkit_network_request_get_uri (request);
-        title = web_view_create_loading_title (uri);
-
-        web_view_floating_bar_update (self, title);
-        g_free (title);
-        break;
-      }
-
-    case WEBKIT_LOAD_FAILED:
-    case WEBKIT_LOAD_FINISHED:
-      web_view_floating_bar_update (self, NULL);
-      break;
-
-    default:
-      break;
-    }
-}
-
-static void
-web_view_notify_progress_cb (GObject *object, GParamSpec *pspec, gpointer user_data)
-{
-  GoaWebView *self = GOA_WEB_VIEW (user_data);
-  GoaWebViewPrivate *priv = self->priv;
-  WebKitWebView *web_view = WEBKIT_WEB_VIEW (object);
-  gboolean loading;
-  const gchar *uri;
-  gdouble progress;
-
-  if (priv->clear_notify_progress_id != 0)
-    {
-      g_source_remove (priv->clear_notify_progress_id);
-      priv->clear_notify_progress_id = 0;
-    }
-
-  uri = webkit_web_view_get_uri (web_view);
-  if (!uri || g_str_equal (uri, "about:blank"))
-    return;
-
-  progress = webkit_web_view_get_progress (WEBKIT_WEB_VIEW (priv->web_view));
-  loading = web_view_is_loading (self);
-
-  if (progress == 1.0 || !loading)
-    priv->clear_notify_progress_id = g_timeout_add (500, web_view_clear_notify_progress_cb, self);
-  else
-    gtk_widget_show (priv->progress_bar);
-
-  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (priv->progress_bar),
-                                 (loading || progress == 1.0) ? progress : 0.0);
-}
-
-static void
-goa_web_view_dispose (GObject *object)
-{
-  GoaWebView *self = GOA_WEB_VIEW (object);
-  GoaWebViewPrivate *priv = self->priv;
-
-  if (priv->clear_notify_progress_id != 0)
-    {
-      g_source_remove (priv->clear_notify_progress_id);
-      priv->clear_notify_progress_id = 0;
-    }
-
-  if (priv->notify_load_status_id != 0)
-    {
-      g_signal_handler_disconnect (priv->web_view, priv->notify_load_status_id);
-      priv->notify_load_status_id = 0;
-    }
-
-  if (priv->notify_progress_id != 0)
-    {
-      g_signal_handler_disconnect (priv->web_view, priv->notify_progress_id);
-      priv->notify_progress_id = 0;
-    }
-
-  G_OBJECT_CLASS (goa_web_view_parent_class)->dispose (object);
-}
-
-#ifdef GOA_INSPECTOR_ENABLED
-static WebKitWebView *
-web_inspector_inspect_web_view_cb (WebKitWebInspector *inspector,
-                                   WebKitWebView      *web_view,
-                                   gpointer            user_data)
-{
-  GtkWidget *inspector_web_view;
-  GtkWidget *scrolled_window;
-  GtkWidget *window;
-
-  inspector_web_view = webkit_web_view_new ();
-
-  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
-  gtk_window_resize (GTK_WINDOW (window), 800, 600);
-
-  scrolled_window = gtk_scrolled_window_new (NULL, NULL);
-  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),
-                                  GTK_POLICY_AUTOMATIC,
-                                  GTK_POLICY_AUTOMATIC);
-
-  gtk_container_add (GTK_CONTAINER (window), scrolled_window);
-  gtk_container_add (GTK_CONTAINER (scrolled_window), inspector_web_view);
-
-  g_object_set_data (G_OBJECT (inspector), "window", window);
-
-  return WEBKIT_WEB_VIEW (inspector_web_view);
-}
-
-static gboolean
-web_inspector_show_window_cb (WebKitWebInspector *inspector,
-                              gpointer            user_data)
-{
-  GtkWidget *window;
-  GtkWindowGroup *group;
-
-  group = gtk_window_group_new ();
-
-  window = g_object_get_data (G_OBJECT (inspector), "window");
-  gtk_window_group_add_window (group, GTK_WINDOW (window));
-  gtk_widget_show_all (window);
-  gtk_window_present (GTK_WINDOW (window));
-
-  g_object_unref (group);
-  return GDK_EVENT_STOP;
-}
-#endif /* GOA_INSPECTOR_ENABLED */
-
-static void
-goa_web_view_init (GoaWebView *self)
-{
-  GoaWebViewPrivate *priv;
-  GtkWidget *scrolled_window;
-  SoupCookieJar *cookie_jar;
-  SoupLogger *logger;
-  SoupSession *session;
-  WebKitWebSettings *settings;
-
-  self->priv = GOA_WEB_VIEW_GET_PRIVATE (self);
-  priv = self->priv;
-
-  session = webkit_get_default_session ();
-  g_object_set (session, SOUP_SESSION_SSL_USE_SYSTEM_CA_FILE, TRUE, SOUP_SESSION_SSL_STRICT, TRUE, NULL);
-
-  soup_session_add_feature_by_type (session, SOUP_TYPE_PROXY_RESOLVER_DEFAULT);
-  g_object_set (session, "accept-language-auto", TRUE, NULL);
-
-  soup_session_remove_feature_by_type (session, SOUP_TYPE_COOKIE_JAR);
-  cookie_jar = soup_cookie_jar_new ();
-  soup_session_add_feature (session, SOUP_SESSION_FEATURE (cookie_jar));
-  g_object_unref (cookie_jar);
-
-  logger = soup_logger_new (SOUP_LOGGER_LOG_BODY, -1);
-  soup_logger_set_printer (logger, web_view_log_printer, NULL, NULL);
-  soup_session_add_feature (session, SOUP_SESSION_FEATURE (logger));
-  g_object_unref (logger);
-
-  scrolled_window = gtk_scrolled_window_new (NULL, NULL);
-  gtk_widget_set_size_request (scrolled_window, 500, 400);
-  gtk_scrolled_window_set_shadow_type (GTK_SCROLLED_WINDOW (scrolled_window), GTK_SHADOW_IN);
-  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),
-                                  GTK_POLICY_AUTOMATIC,
-                                  GTK_POLICY_AUTOMATIC);
-  gtk_container_add (GTK_CONTAINER (self), scrolled_window);
-
-  priv->web_view = webkit_web_view_new ();
-  priv->status = WEBKIT_LOAD_PROVISIONAL;
-  gtk_container_add (GTK_CONTAINER (scrolled_window), priv->web_view);
-
-  settings = webkit_web_view_get_settings (WEBKIT_WEB_VIEW (priv->web_view));
-  g_object_set (settings, "user-stylesheet-uri", "file://" PACKAGE_DATA_DIR "/goawebview.css", NULL);
-
-#ifdef GOA_INSPECTOR_ENABLED
-  {
-    WebKitWebInspector *inspector;
-
-    /* Setup the inspector */
-    g_object_set (settings, "enable-developer-extras", TRUE, NULL);
-    inspector = webkit_web_view_get_inspector (WEBKIT_WEB_VIEW (priv->web_view));
-    webkit_web_inspector_show (WEBKIT_WEB_INSPECTOR (inspector));
-
-    g_signal_connect (inspector, "inspect-web-view", G_CALLBACK (web_inspector_inspect_web_view_cb), NULL);
-    g_signal_connect (inspector, "show-window", G_CALLBACK (web_inspector_show_window_cb), NULL);
-  }
-#endif /* GOA_INSPECTOR_ENABLED */
-
-  /* statusbar is hidden by default */
-  priv->floating_bar = nautilus_floating_bar_new (NULL, FALSE);
-  gtk_widget_set_halign (priv->floating_bar, GTK_ALIGN_START);
-  gtk_widget_set_valign (priv->floating_bar, GTK_ALIGN_END);
-  gtk_widget_set_no_show_all (priv->floating_bar, TRUE);
-  gtk_overlay_add_overlay (GTK_OVERLAY (self), priv->floating_bar);
-
-  priv->progress_bar = gtk_progress_bar_new ();
-  gtk_style_context_add_class (gtk_widget_get_style_context (priv->progress_bar),
-                               GTK_STYLE_CLASS_OSD);
-  gtk_widget_set_halign (priv->progress_bar, GTK_ALIGN_FILL);
-  gtk_widget_set_valign (priv->progress_bar, GTK_ALIGN_START);
-  gtk_overlay_add_overlay (GTK_OVERLAY (self), priv->progress_bar);
-
-  priv->notify_progress_id = g_signal_connect (priv->web_view,
-                                               "notify::progress",
-                                               G_CALLBACK (web_view_notify_progress_cb),
-                                               self);
-  priv->notify_load_status_id = g_signal_connect (priv->web_view,
-                                                  "notify::load-status",
-                                                  G_CALLBACK (web_view_notify_load_status_cb),
-                                                  self);
-}
-
-static void
-goa_web_view_class_init (GoaWebViewClass *klass)
-{
-  GObjectClass *object_class;
-
-  object_class = G_OBJECT_CLASS (klass);
-  object_class->dispose = goa_web_view_dispose;
-
-  g_type_class_add_private (object_class, sizeof (GoaWebViewPrivate));
-}
-
-GtkWidget *
-goa_web_view_new (void)
-{
-  return g_object_new (GOA_TYPE_WEB_VIEW, NULL);
-}
-
-GtkWidget *
-goa_web_view_get_view (GoaWebView *self)
-{
-  return self->priv->web_view;
-}
-
-void
-goa_web_view_fake_mobile (GoaWebView *self)
-{
-  WebKitWebSettings *settings;
-
-  settings = webkit_web_view_get_settings (WEBKIT_WEB_VIEW (self->priv->web_view));
-
-  /* This is based on the HTC Wildfire's user agent. Some
-   * providers, like Google, refuse to provide the mobile
-   * version of their authentication pages otherwise. eg.,
-   * in Google's case, passing btmpl=mobile does not help.
-   *
-   * The actual user agent used by a HTC Wildfire is:
-   * Mozilla/5.0 (Linux; U; Android 2.2.1; en-us; HTC Wildfire
-   * Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0
-   * Mobile Safari/533.1
-   *
-   * Also note that the user agents of some mobile browsers may
-   * not work. eg., Nokia N9.
-   */
-  g_object_set (G_OBJECT (settings),
-                "user-agent", "Mozilla/5.0 (GNOME; not Android) "
-                              "AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile",
-                NULL);
-}
-
-void
-goa_web_view_add_cookies (GoaWebView *self,
-                          GSList     *cookies)
-{
-  SoupCookieJar *cookie_jar;
-  SoupSession *session;
-  GSList *l;
-
-  session = webkit_get_default_session ();
-  cookie_jar = SOUP_COOKIE_JAR (soup_session_get_feature (session, SOUP_TYPE_COOKIE_JAR));
-
-  for (l = cookies; l != NULL; l = l->next)
-    {
-      SoupCookie *cookie = l->data;
-      soup_cookie_jar_add_cookie (cookie_jar, soup_cookie_copy (cookie));
-    }
-}
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goawebview.h gnome-online-accounts-3.14.0n/src/goabackend/goawebview.h
--- gnome-online-accounts-3.14.0/src/goabackend/goawebview.h	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goawebview.h	1970-01-01 00:00:00.000000000 +0000
@@ -1,57 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
- *
- * Copyright (C) 2012 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef __GOA_WEB_VIEW_H__
-#define __GOA_WEB_VIEW_H__
-
-#include <gtk/gtk.h>
-
-G_BEGIN_DECLS
-
-#define GOA_TYPE_WEB_VIEW            (goa_web_view_get_type ())
-#define GOA_WEB_VIEW(object)         (G_TYPE_CHECK_INSTANCE_CAST ((object), GOA_TYPE_WEB_VIEW, GoaWebView))
-#define GOA_WEB_VIEW_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GOA_TYPE_WEB_VIEW, GoaWebViewClass))
-#define GOA_IS_WEB_VIEW(object)      (G_TYPE_CHECK_INSTANCE_TYPE ((object), GOA_TYPE_WEB_VIEW))
-#define GOA_IS_WEB_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GOA_TYPE_WEB_VIEW))
-#define GOA_WEB_VIEW_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GOA_TYPE_WEB_VIEW, GoaWebViewClass))
-
-typedef struct _GoaWebView        GoaWebView;
-typedef struct _GoaWebViewClass   GoaWebViewClass;
-typedef struct _GoaWebViewPrivate GoaWebViewPrivate;
-
-struct _GoaWebView
-{
-  GtkOverlay parent_instance;
-  GoaWebViewPrivate *priv;
-};
-
-struct _GoaWebViewClass
-{
-  GtkOverlayClass parent_class;
-};
-
-GType                  goa_web_view_get_type               (void) G_GNUC_CONST;
-GtkWidget             *goa_web_view_new                    (void);
-GtkWidget             *goa_web_view_get_view               (GoaWebView *self);
-void                   goa_web_view_fake_mobile            (GoaWebView *self);
-void                   goa_web_view_add_cookies            (GoaWebView *self,
-                                                            GSList     *cookies);
-
-G_END_DECLS
-
-#endif /* __GOA_WEB_VIEW_H__ */
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goawindowsliveprovider.c gnome-online-accounts-3.14.0n/src/goabackend/goawindowsliveprovider.c
--- gnome-online-accounts-3.14.0/src/goabackend/goawindowsliveprovider.c	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goawindowsliveprovider.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,475 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011, 2012, 2013, 2014 Red Hat, Inc.
- * Copyright (C) 2011 Collabora Ltd.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "config.h"
-#include <glib/gi18n-lib.h>
-
-#include <rest/rest-proxy.h>
-#include <json-glib/json-glib.h>
-#include <webkit/webkit.h>
-
-#include "goaprovider.h"
-#include "goaprovider-priv.h"
-#include "goaoauth2provider.h"
-#include "goawindowsliveprovider.h"
-
-/**
- * GoaWindowsLiveProvider:
- *
- * The #GoaWindowsLiveProvider structure contains only private data and should
- * only be accessed using the provided API.
- */
-struct _GoaWindowsLiveProvider
-{
-  /*< private >*/
-  GoaOAuth2Provider parent_instance;
-};
-
-typedef struct _GoaWindowsLiveProviderClass GoaWindowsLiveProviderClass;
-
-struct _GoaWindowsLiveProviderClass
-{
-  GoaOAuth2ProviderClass parent_class;
-};
-
-/**
- * SECTION:goawindowsliveprovider
- * @title: GoaWindowsLiveProvider
- * @short_description: A provider for Windows Live accounts
- *
- * #GoaWindowsLiveProvider is used for handling Windows Live accounts.
- */
-
-G_DEFINE_TYPE_WITH_CODE (GoaWindowsLiveProvider, goa_windows_live_provider, GOA_TYPE_OAUTH2_PROVIDER,
-                         goa_provider_ensure_extension_points_registered ();
-                         g_io_extension_point_implement (GOA_PROVIDER_EXTENSION_POINT_NAME,
-							 g_define_type_id,
-							 GOA_WINDOWS_LIVE_NAME,
-							 0));
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static const gchar *
-get_provider_type (GoaProvider *_provider)
-{
-  return GOA_WINDOWS_LIVE_NAME;
-}
-
-static gchar *
-get_provider_name (GoaProvider *_provider,
-                   GoaObject   *object)
-{
-  return g_strdup (_("Windows Live"));
-}
-
-static GoaProviderGroup
-get_provider_group (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_GROUP_BRANDED;
-}
-
-static GoaProviderFeatures
-get_provider_features (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_FEATURE_BRANDED |
-         GOA_PROVIDER_FEATURE_MAIL |
-         GOA_PROVIDER_FEATURE_DOCUMENTS;
-}
-
-static const gchar *
-get_authorization_uri (GoaOAuth2Provider *provider)
-{
-  return "https://login.live.com/oauth20_authorize.srf";
-}
-
-
-static const gchar *
-get_token_uri (GoaOAuth2Provider *provider)
-{
-  return "https://login.live.com/oauth20_token.srf";
-}
-
-
-static const gchar *
-get_redirect_uri (GoaOAuth2Provider *provider)
-{
-  return "https://login.live.com/oauth20_desktop.srf";
-}
-
-static const gchar *
-get_scope (GoaOAuth2Provider *provider)
-{
-  return "wl.imap,"
-         "wl.offline_access,"
-         "wl.skydrive_update,"
-         "wl.emails";
-}
-
-static guint
-get_credentials_generation (GoaProvider *provider)
-{
-  return 3;
-}
-
-static const gchar *
-get_client_id (GoaOAuth2Provider *provider)
-{
-  return GOA_WINDOWS_LIVE_CLIENT_ID;
-}
-
-static const gchar *
-get_client_secret (GoaOAuth2Provider *provider)
-{
-  return NULL;
-}
-
-static const gchar *
-get_authentication_cookie (GoaOAuth2Provider *provider)
-{
-  return "PPAuth";
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-get_identity_sync (GoaOAuth2Provider  *provider,
-                   const gchar        *access_token,
-                   gchar             **out_presentation_identity,
-                   GCancellable       *cancellable,
-                   GError            **error)
-{
-  GError *identity_error;
-  RestProxy *proxy;
-  RestProxyCall *call;
-  JsonParser *parser;
-  JsonObject *json_object;
-  gchar *ret;
-  gchar *id;
-  gchar *presentation_identity;
-
-  ret = NULL;
-
-  identity_error = NULL;
-  proxy = NULL;
-  call = NULL;
-  parser = NULL;
-  id = NULL;
-  presentation_identity = NULL;
-
-  /* TODO: cancellable */
-
-  proxy = rest_proxy_new ("https://apis.live.net/v5.0/me", FALSE);
-  call = rest_proxy_new_call (proxy);
-  rest_proxy_call_set_method (call, "GET");
-  rest_proxy_call_add_param (call, "access_token", access_token);
-
-  if (!rest_proxy_call_sync (call, error))
-    goto out;
-  if (rest_proxy_call_get_status_code (call) != 200)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Expected status 200 when requesting your identity, instead got status %d (%s)"),
-                   rest_proxy_call_get_status_code (call),
-                   rest_proxy_call_get_status_message (call));
-      goto out;
-    }
-
-  parser = json_parser_new ();
-  if (!json_parser_load_from_data (parser,
-                                   rest_proxy_call_get_payload (call),
-                                   rest_proxy_call_get_payload_length (call),
-                                   &identity_error))
-    {
-      g_warning ("json_parser_load_from_data() failed: %s (%s, %d)",
-                 identity_error->message,
-                 g_quark_to_string (identity_error->domain),
-                 identity_error->code);
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  json_object = json_node_get_object (json_parser_get_root (parser));
-  id = g_strdup (json_object_get_string_member (json_object, "id"));
-  if (id == NULL)
-    {
-      g_warning ("Did not find id in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  json_object = json_object_get_object_member (json_object, "emails");
-  presentation_identity = g_strdup (json_object_get_string_member (json_object, "account"));
-  if (presentation_identity == NULL)
-    {
-      g_warning ("Did not find emails.account in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  ret = id;
-  id = NULL;
-  if (out_presentation_identity != NULL)
-    {
-      *out_presentation_identity = presentation_identity;
-      presentation_identity = NULL;
-    }
-
- out:
-  g_clear_error (&identity_error);
-  g_clear_object (&call);
-  g_clear_object (&proxy);
-  g_free (id);
-  g_free (presentation_identity);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-is_deny_node (GoaOAuth2Provider *provider, WebKitDOMNode *node)
-{
-  return FALSE;
-}
-
-static gboolean
-is_identity_node (GoaOAuth2Provider *provider, WebKitDOMHTMLInputElement *element)
-{
-  gboolean ret;
-  gchar *element_type;
-  gchar *name;
-
-  element_type = NULL;
-  name = NULL;
-
-  ret = FALSE;
-
-  /* FIXME: This does not show up in
-   *        webkit_dom_document_get_elements_by_tag_name, but can be
-   *        seen in the inspector. Needs further investigation.
-   */
-
-  g_object_get (element, "type", &element_type, NULL);
-  if (g_strcmp0 (element_type, "email") != 0)
-    goto out;
-
-  name = webkit_dom_html_input_element_get_name (element);
-  if (g_strcmp0 (name, "login") != 0)
-    goto out;
-
-  ret = TRUE;
-
- out:
-  g_free (element_type);
-  g_free (name);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-build_object (GoaProvider         *provider,
-              GoaObjectSkeleton   *object,
-              GKeyFile            *key_file,
-              const gchar         *group,
-              GDBusConnection     *connection,
-              gboolean             just_added,
-              GError             **error)
-{
-  GoaAccount *account;
-  GoaMail *mail;
-  GoaDocuments *documents;
-  gboolean mail_enabled;
-  gboolean documents_enabled;
-  gboolean ret = FALSE;
-  const gchar *email_address;
-
-  account = NULL;
-  mail = NULL;
-  documents = NULL;
-
-  /* Chain up */
-  if (!GOA_PROVIDER_CLASS (goa_windows_live_provider_parent_class)->build_object (provider,
-                                                                              object,
-                                                                              key_file,
-                                                                              group,
-                                                                              connection,
-                                                                              just_added,
-                                                                              error))
-    goto out;
-
-  account = goa_object_get_account (GOA_OBJECT (object));
-  email_address = goa_account_get_presentation_identity (account);
-
-  /* Email */
-  mail = goa_object_get_mail (GOA_OBJECT (object));
-  mail_enabled = g_key_file_get_boolean (key_file, group, "MailEnabled", NULL);
-  if (mail_enabled)
-    {
-      if (mail == NULL)
-        {
-          mail = goa_mail_skeleton_new ();
-          g_object_set (G_OBJECT (mail),
-                        "email-address",   email_address,
-                        "imap-supported",  TRUE,
-                        "imap-host",       "imap-mail.outlook.com",
-                        "imap-user-name",  email_address,
-                        "imap-use-ssl",    TRUE,
-                        "smtp-supported",  TRUE,
-                        "smtp-host",       "smtp-mail.outlook.com",
-                        "smtp-user-name",  email_address,
-                        "smtp-use-auth",   TRUE,
-                        "smtp-auth-xoauth2", TRUE,
-                        "smtp-use-tls",    TRUE,
-                        NULL);
-          goa_object_skeleton_set_mail (object, mail);
-        }
-    }
-  else
-    {
-      if (mail != NULL)
-        goa_object_skeleton_set_mail (object, NULL);
-    }
-
-  /* Documents */
-  documents = goa_object_get_documents (GOA_OBJECT (object));
-  documents_enabled = g_key_file_get_boolean (key_file, group, "DocumentsEnabled", NULL);
-
-  if (documents_enabled)
-    {
-      if (documents == NULL)
-        {
-          documents = goa_documents_skeleton_new ();
-          goa_object_skeleton_set_documents (object, documents);
-        }
-    }
-  else
-    {
-      if (documents != NULL)
-        goa_object_skeleton_set_documents (object, NULL);
-    }
-
-  if (just_added)
-    {
-      goa_account_set_mail_disabled (account, !mail_enabled);
-      goa_account_set_documents_disabled (account, !documents_enabled);
-
-      g_signal_connect (account,
-                        "notify::mail-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "MailEnabled");
-      g_signal_connect (account,
-                        "notify::documents-disabled",
-                        G_CALLBACK (goa_util_account_notify_property_cb),
-                        "DocumentsEnabled");
-    }
-
-  ret = TRUE;
-
- out:
-  g_clear_object (&documents);
-  g_clear_object (&mail);
-  g_clear_object (&account);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-show_account (GoaProvider         *provider,
-              GoaClient           *client,
-              GoaObject           *object,
-              GtkBox              *vbox,
-              GtkGrid             *grid,
-              G_GNUC_UNUSED GtkGrid *dummy)
-{
-  gint row;
-
-  row = 0;
-
-  goa_util_add_account_info (grid, row++, object);
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   /* Translators: This is a label for a series of
-                                                    * options switches. For example: “Use for Mail”. */
-                                                   _("Use for"),
-                                                   "mail-disabled",
-                                                   _("_Mail"));
-
-  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
-                                                   NULL,
-                                                   "documents-disabled",
-                                                   _("_Documents"));
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-add_account_key_values (GoaOAuth2Provider *provider,
-                        GVariantBuilder   *builder)
-{
-  g_variant_builder_add (builder, "{ss}", "MailEnabled", "true");
-  g_variant_builder_add (builder, "{ss}", "DocumentsEnabled", "true");
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-goa_windows_live_provider_init (GoaWindowsLiveProvider *client)
-{
-}
-
-static void
-goa_windows_live_provider_class_init (GoaWindowsLiveProviderClass *klass)
-{
-  GoaProviderClass *provider_class;
-  GoaOAuth2ProviderClass *oauth2_class;
-
-  provider_class = GOA_PROVIDER_CLASS (klass);
-  provider_class->get_provider_type          = get_provider_type;
-  provider_class->get_provider_name          = get_provider_name;
-  provider_class->get_provider_group         = get_provider_group;
-  provider_class->get_provider_features      = get_provider_features;
-  provider_class->build_object               = build_object;
-  provider_class->show_account               = show_account;
-  provider_class->get_credentials_generation = get_credentials_generation;
-
-  oauth2_class = GOA_OAUTH2_PROVIDER_CLASS (klass);
-  oauth2_class->get_authorization_uri    = get_authorization_uri;
-  oauth2_class->get_token_uri            = get_token_uri;
-  oauth2_class->get_redirect_uri         = get_redirect_uri;
-  oauth2_class->get_scope                = get_scope;
-  oauth2_class->get_client_id            = get_client_id;
-  oauth2_class->get_client_secret        = get_client_secret;
-  oauth2_class->get_authentication_cookie = get_authentication_cookie;
-  oauth2_class->get_identity_sync        = get_identity_sync;
-  oauth2_class->is_deny_node             = is_deny_node;
-  oauth2_class->is_identity_node         = is_identity_node;
-  oauth2_class->add_account_key_values   = add_account_key_values;
-}
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goawindowsliveprovider.h gnome-online-accounts-3.14.0n/src/goabackend/goawindowsliveprovider.h
--- gnome-online-accounts-3.14.0/src/goabackend/goawindowsliveprovider.h	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goawindowsliveprovider.h	1970-01-01 00:00:00.000000000 +0000
@@ -1,41 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011 Red Hat, Inc.
- * Copyright (C) 2011 Collabora Ltd.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#if !defined (__GOA_BACKEND_INSIDE_GOA_BACKEND_H__) && !defined (GOA_BACKEND_COMPILATION)
-#error "Only <goabackend/goabackend.h> can be included directly."
-#endif
-
-#ifndef __GOA_WINDOWS_LIVE_PROVIDER_H__
-#define __GOA_WINDOWS_LIVE_PROVIDER_H__
-
-#include <glib-object.h>
-
-G_BEGIN_DECLS
-
-#define GOA_TYPE_WINDOWS_LIVE_PROVIDER   (goa_windows_live_provider_get_type ())
-#define GOA_WINDOWS_LIVE_PROVIDER(o)     (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_WINDOWS_LIVE_PROVIDER, GoaWindowsLiveProvider))
-#define GOA_IS_WINDOWS_LIVE_PROVIDER(o)  (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_WINDOWS_LIVE_PROVIDER))
-
-typedef struct _GoaWindowsLiveProvider GoaWindowsLiveProvider;
-
-GType goa_windows_live_provider_get_type (void) G_GNUC_CONST;
-
-G_END_DECLS
-
-#endif /* __GOA_WINDOWS_LIVE_PROVIDER_H__ */
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goayahooprovider.c gnome-online-accounts-3.14.0n/src/goabackend/goayahooprovider.c
--- gnome-online-accounts-3.14.0/src/goabackend/goayahooprovider.c	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goayahooprovider.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,431 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011, 2012, 2013 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "config.h"
-#include <glib/gi18n-lib.h>
-
-#include <rest/oauth-proxy.h>
-#include <json-glib/json-glib.h>
-
-#include "goaprovider.h"
-#include "goaprovider-priv.h"
-#include "goaoauthprovider.h"
-#include "goayahooprovider.h"
-
-/**
- * GoaYahooProvider:
- *
- * The #GoaYahooProvider structure contains only private data and should
- * only be accessed using the provided API.
- */
-struct _GoaYahooProvider
-{
-  /*< private >*/
-  GoaOAuthProvider parent_instance;
-};
-
-typedef struct _GoaYahooProviderClass GoaYahooProviderClass;
-
-struct _GoaYahooProviderClass
-{
-  GoaOAuthProviderClass parent_class;
-};
-
-/**
- * SECTION:goayahooprovider
- * @title: GoaYahooProvider
- * @short_description: A provider for Yahoo
- *
- * #GoaYahooProvider is used for handling Yahoo accounts.
- */
-
-G_DEFINE_TYPE_WITH_CODE (GoaYahooProvider, goa_yahoo_provider, GOA_TYPE_OAUTH_PROVIDER,
-                         goa_provider_ensure_extension_points_registered ();
-                         g_io_extension_point_implement (GOA_PROVIDER_EXTENSION_POINT_NAME,
-							 g_define_type_id,
-							 GOA_YAHOO_NAME,
-							 0));
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static const gchar *
-get_provider_type (GoaProvider *_provider)
-{
-  return GOA_YAHOO_NAME;
-}
-
-static gchar *
-get_provider_name (GoaProvider *_provider,
-                   GoaObject   *object)
-{
-  return g_strdup (_("Yahoo"));
-}
-
-static GoaProviderGroup
-get_provider_group (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_GROUP_BRANDED;
-}
-
-static GoaProviderFeatures
-get_provider_features (GoaProvider *_provider)
-{
-  return GOA_PROVIDER_FEATURE_BRANDED;
-}
-
-static const gchar *
-get_consumer_key (GoaOAuthProvider *provider)
-{
-  return GOA_YAHOO_CONSUMER_KEY;
-}
-
-static const gchar *
-get_consumer_secret (GoaOAuthProvider *provider)
-{
-  return GOA_YAHOO_CONSUMER_SECRET;
-}
-
-static const gchar *
-get_request_uri (GoaOAuthProvider *provider)
-{
-  return "https://api.login.yahoo.com/oauth/v2/get_request_token";
-}
-
-static const gchar *
-get_authorization_uri (GoaOAuthProvider *provider)
-{
-  return "https://api.login.yahoo.com/oauth/v2/request_auth";
-}
-
-static const gchar *
-get_token_uri (GoaOAuthProvider *provider)
-{
-  return "https://api.login.yahoo.com/oauth/v2/get_token";
-}
-
-static const gchar *
-get_callback_uri (GoaOAuthProvider *provider)
-{
-  return "https://www.gnome.org/goa-1.0/oauth";
-}
-
-static const gchar *
-get_authentication_cookie (GoaOAuthProvider *provider)
-{
-  return "";
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-get_identity_sync (GoaOAuthProvider  *provider,
-                   const gchar       *access_token,
-                   const gchar       *access_token_secret,
-                   gchar            **out_presentation_identity,
-                   GCancellable      *cancellable,
-                   GError           **error)
-{
-  GError *identity_error;
-  RestProxy *proxy;
-  RestProxyCall *call;
-  JsonParser *parser;
-  JsonObject *json_object;
-  JsonObject *json_data_object;
-  gchar *ret;
-  gchar *guid;
-  gchar *presentation_identity;
-
-  ret = NULL;
-
-  identity_error = NULL;
-  proxy = NULL;
-  call = NULL;
-  parser = NULL;
-  guid = NULL;
-  presentation_identity = NULL;
-
-  /* TODO: cancellable */
-
-  proxy = oauth_proxy_new_with_token (goa_oauth_provider_get_consumer_key (provider),
-                                      goa_oauth_provider_get_consumer_secret (provider),
-                                      access_token,
-                                      access_token_secret,
-                                      "http://social.yahooapis.com/v1/me/guid",
-                                      FALSE);
-  call = rest_proxy_new_call (proxy);
-  rest_proxy_call_set_method (call, "GET");
-  rest_proxy_call_add_param (call, "format", "json");
-
-  if (!rest_proxy_call_sync (call, error))
-    goto out;
-  if (rest_proxy_call_get_status_code (call) != 200)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   /* Translators: the %d is a HTTP status code and the %s is a textual description of it */
-                   _("Expected status 200 when requesting your identity, instead got status %d (%s)"),
-                   rest_proxy_call_get_status_code (call),
-                   rest_proxy_call_get_status_message (call));
-      goto out;
-    }
-
-  parser = json_parser_new ();
-  if (!json_parser_load_from_data (parser,
-                                   rest_proxy_call_get_payload (call),
-                                   rest_proxy_call_get_payload_length (call),
-                                   &identity_error))
-    {
-      g_warning ("json_parser_load_from_data() failed: %s (%s, %d)",
-                 identity_error->message,
-                 g_quark_to_string (identity_error->domain),
-                 identity_error->code);
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  json_object = json_node_get_object (json_parser_get_root (parser));
-  json_data_object = json_object_get_object_member (json_object, "guid");
-  if (json_data_object == NULL)
-    {
-      g_warning ("Did not find guid in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  guid = g_strdup (json_object_get_string_member (json_data_object, "value"));
-  if (guid == NULL)
-    {
-      g_warning ("Did not find value in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  /* OK, got the GUID, now get the presentation_identity via http://developer.yahoo.com/social/rest_api_guide/usercard-resource.html */
-  g_object_unref (proxy);
-  g_object_unref (call);
-  proxy = oauth_proxy_new_with_token (goa_oauth_provider_get_consumer_key (provider),
-                                      goa_oauth_provider_get_consumer_secret (provider),
-                                      access_token,
-                                      access_token_secret,
-                                      "http://social.yahooapis.com/v1/user/%s/profile/usercard",
-                                      TRUE);
-  rest_proxy_bind (proxy, guid);
-  call = rest_proxy_new_call (proxy);
-  rest_proxy_call_set_method (call, "GET");
-  rest_proxy_call_add_param (call, "format", "json");
-
-  if (!rest_proxy_call_sync (call, error))
-    goto out;
-
-  if (rest_proxy_call_get_status_code (call) != 200)
-    {
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Expected status 200 when requesting name, instead got status %d (%s)"),
-                   rest_proxy_call_get_status_code (call),
-                   rest_proxy_call_get_status_message (call));
-      goto out;
-    }
-
-  g_object_unref (parser);
-  parser = json_parser_new ();
-  if (!json_parser_load_from_data (parser,
-                                   rest_proxy_call_get_payload (call),
-                                   rest_proxy_call_get_payload_length (call),
-                                   &identity_error))
-    {
-      g_warning ("json_parser_load_from_data() failed: %s (%s, %d)",
-                 identity_error->message,
-                 g_quark_to_string (identity_error->domain),
-                 identity_error->code);
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  json_object = json_node_get_object (json_parser_get_root (parser));
-  json_data_object = json_object_get_object_member (json_object, "profile");
-  if (json_data_object == NULL)
-    {
-      g_warning ("Did not find profile in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  presentation_identity = g_strdup (json_object_get_string_member (json_data_object, "nickname"));
-  if (presentation_identity == NULL)
-    {
-      g_warning ("Did not find nickname in JSON data");
-      g_set_error (error,
-                   GOA_ERROR,
-                   GOA_ERROR_FAILED,
-                   _("Could not parse response"));
-      goto out;
-    }
-
-  ret = guid;
-  guid = NULL;
-  if (out_presentation_identity != NULL)
-    {
-      *out_presentation_identity = presentation_identity;
-      presentation_identity = NULL;
-    }
-
- out:
-  g_clear_error (&identity_error);
-  g_clear_object (&call);
-  g_clear_object (&proxy);
-  g_free (presentation_identity);
-  g_free (guid);
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-is_deny_node (GoaOAuthProvider *provider, WebKitDOMNode *node)
-{
-  return FALSE;
-}
-
-static gboolean
-is_identity_node (GoaOAuthProvider *provider, WebKitDOMHTMLInputElement *element)
-{
-  return FALSE;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gchar *
-parse_request_token_error (GoaOAuthProvider *provider, RestProxyCall *call)
-{
-  const gchar *payload;
-  gchar *msg;
-  guint status;
-
-  msg = NULL;
-
-  payload = rest_proxy_call_get_payload (call);
-  status = rest_proxy_call_get_status_code (call);
-
-  if (status == 401 && g_strcmp0 (payload, "oauth_problem=timestamp_refused") == 0)
-    msg = g_strdup (_("Your system time is invalid. Check your date and time settings."));
-
-  return msg;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static gboolean
-build_object (GoaProvider         *provider,
-              GoaObjectSkeleton   *object,
-              GKeyFile            *key_file,
-              const gchar         *group,
-              GDBusConnection     *connection,
-              gboolean             just_added,
-              GError             **error)
-{
-  gboolean ret;
-
-  ret = FALSE;
-
-  /* Chain up */
-  if (!GOA_PROVIDER_CLASS (goa_yahoo_provider_parent_class)->build_object (provider,
-                                                                           object,
-                                                                           key_file,
-                                                                           group,
-                                                                           connection,
-                                                                           just_added,
-                                                                           error))
-    goto out;
-
-  ret = TRUE;
-
- out:
-  return ret;
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-show_account (GoaProvider         *provider,
-              GoaClient           *client,
-              GoaObject           *object,
-              GtkBox              *vbox,
-              GtkGrid             *grid,
-              G_GNUC_UNUSED GtkGrid *dummy)
-{
-  gint row;
-
-  row = 0;
-
-  goa_util_add_account_info (grid, row++, object);
-
-  /* TODO: look up email address / screenname from GUID */
-}
-
-/* ---------------------------------------------------------------------------------------------------- */
-
-static void
-goa_yahoo_provider_init (GoaYahooProvider *client)
-{
-}
-
-static void
-goa_yahoo_provider_class_init (GoaYahooProviderClass *klass)
-{
-  GoaProviderClass *provider_class;
-  GoaOAuthProviderClass *oauth_class;
-
-  provider_class = GOA_PROVIDER_CLASS (klass);
-  provider_class->get_provider_type     = get_provider_type;
-  provider_class->get_provider_name     = get_provider_name;
-  provider_class->get_provider_group    = get_provider_group;
-  provider_class->get_provider_features = get_provider_features;
-  provider_class->build_object          = build_object;
-  provider_class->show_account          = show_account;
-
-  oauth_class = GOA_OAUTH_PROVIDER_CLASS (klass);
-  oauth_class->get_identity_sync        = get_identity_sync;
-  oauth_class->is_deny_node             = is_deny_node;
-  oauth_class->is_identity_node         = is_identity_node;
-  oauth_class->get_consumer_key         = get_consumer_key;
-  oauth_class->get_consumer_secret      = get_consumer_secret;
-  oauth_class->get_request_uri          = get_request_uri;
-  oauth_class->get_authorization_uri    = get_authorization_uri;
-  oauth_class->get_token_uri            = get_token_uri;
-  oauth_class->get_callback_uri         = get_callback_uri;
-  oauth_class->get_authentication_cookie = get_authentication_cookie;
-  oauth_class->parse_request_token_error = parse_request_token_error;
-}
diff -Nur gnome-online-accounts-3.14.0/src/goabackend/goayahooprovider.h gnome-online-accounts-3.14.0n/src/goabackend/goayahooprovider.h
--- gnome-online-accounts-3.14.0/src/goabackend/goayahooprovider.h	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0n/src/goabackend/goayahooprovider.h	1970-01-01 00:00:00.000000000 +0000
@@ -1,40 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
-/*
- * Copyright (C) 2011 Red Hat, Inc.
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General
- * Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#if !defined (__GOA_BACKEND_INSIDE_GOA_BACKEND_H__) && !defined (GOA_BACKEND_COMPILATION)
-#error "Only <goabackend/goabackend.h> can be included directly."
-#endif
-
-#ifndef __GOA_YAHOO_PROVIDER_H__
-#define __GOA_YAHOO_PROVIDER_H__
-
-#include <glib-object.h>
-
-G_BEGIN_DECLS
-
-#define GOA_TYPE_YAHOO_PROVIDER   (goa_yahoo_provider_get_type ())
-#define GOA_YAHOO_PROVIDER(o)     (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_YAHOO_PROVIDER, GoaYahooProvider))
-#define GOA_IS_YAHOO_PROVIDER(o)  (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_YAHOO_PROVIDER))
-
-typedef struct _GoaYahooProvider GoaYahooProvider;
-
-GType goa_yahoo_provider_get_type (void) G_GNUC_CONST;
-
-G_END_DECLS
-
-#endif /* __GOA_YAHOO_PROVIDER_H__ */
--- gnome-online-accounts-3.14.0n/src/goabackend/goaprovider.c	2014-09-16 13:33:08.000000000 +0000
+++ gnome-online-accounts-3.14.0/src/goabackend/goaprovider.c	2014-10-21 11:17:36.914148845 +0000
@@ -24,15 +24,9 @@
 #include "goaprovider-priv.h"
 #include "goaproviderfactory.h"
 #include "goaexchangeprovider.h"
-#include "goagoogleprovider.h"
-#include "goafacebookprovider.h"
 #include "goaimapsmtpprovider.h"
 #include "goaowncloudprovider.h"
-#include "goayahooprovider.h"
-#include "goaflickrprovider.h"
-#include "goawindowsliveprovider.h"
 #include "goatelepathyfactory.h"
-#include "goapocketprovider.h"
 #include "goamediaserverprovider.h"
 
 #ifdef GOA_KERBEROS_ENABLED
