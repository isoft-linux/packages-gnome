diff -Nur gnome-control-center-3.12.1/shell/cc-application.c gnome-control-center-3.12.1.new/shell/cc-application.c
--- gnome-control-center-3.12.1/shell/cc-application.c	2014-03-04 21:58:03.000000000 +0800
+++ gnome-control-center-3.12.1.new/shell/cc-application.c	2014-07-21 16:53:26.434069573 +0800
@@ -193,9 +193,8 @@
       g_print ("%s\n", _("Available panels:"));
       for (l = panels; l != NULL; l = l->next)
         g_print ("\t%s\n", (char *) l->data);
-
       g_list_free (panels);
-
+      exit(0);
       return 0;
     }
 
diff -Nur gnome-control-center-3.12.1/shell/cc-panel-loader.c gnome-control-center-3.12.1.new/shell/cc-panel-loader.c
--- gnome-control-center-3.12.1/shell/cc-panel-loader.c	2013-10-01 19:52:46.000000000 +0800
+++ gnome-control-center-3.12.1.new/shell/cc-panel-loader.c	2014-07-21 16:53:28.404069687 +0800
@@ -25,7 +25,6 @@
 #include <gio/gdesktopappinfo.h>
 
 #include "cc-panel-loader.h"
-
 #ifndef CC_PANEL_LOADER_NO_GTYPES
 
 /* Extension points */
@@ -113,6 +112,31 @@
   for (i = 0; i < G_N_ELEMENTS (all_panels); i++)
     l = g_list_prepend (l, (gpointer) all_panels[i].name);
 
+
+  GList *appinfos = g_app_info_get_all();
+  for (i = 0; i < g_list_length(appinfos); i++) {
+    const char *id = g_app_info_get_id(g_list_nth_data(appinfos, i));
+    GRegex *regex = g_regex_new("gnome-(.+)-panel.desktop", 0, 0, NULL);
+    GMatchInfo *match_info;
+    g_regex_match(regex, id, 0, &match_info);
+    if(g_match_info_matches(match_info)) {
+        gint count = g_match_info_get_match_count( match_info ); 
+        if(count == 2 ) {
+            const gchar * word = g_match_info_fetch(match_info, 1);
+            gboolean contains = FALSE;
+            int j;
+            for(j = 0; j < G_N_ELEMENTS (all_panels); j++) {
+                if(!g_strcmp0(all_panels[j].name, (const char *)word)) {
+                    contains = TRUE;
+                    break;
+                }
+            }
+            if(!contains)
+                l =  g_list_prepend (l, (gpointer)word);
+        }
+    }
+  }
+
   return g_list_reverse (l);
 }
 
@@ -179,6 +203,54 @@
       cc_shell_model_add_item (model, category, G_APP_INFO (app), all_panels[i].name);
       g_object_unref (app);
     }
+
+  GList *appinfos = g_app_info_get_all();
+  for (i = 0; i < g_list_length(appinfos); i++) {
+    const char *id = g_app_info_get_id(g_list_nth_data(appinfos, i));
+    GRegex *regex = g_regex_new("gnome-(.+)-panel.desktop", 0, 0, NULL);
+    GMatchInfo *match_info;
+    g_regex_match(regex, id, 0, &match_info);
+    if(g_match_info_matches(match_info)) {
+        gint count = g_match_info_get_match_count( match_info );
+        if(count == 2 ) {
+            const gchar * word = g_match_info_fetch(match_info, 1);
+            gboolean contains = FALSE;
+            int j;
+            for(j = 0; j < G_N_ELEMENTS (all_panels); j++) {
+                if(!g_strcmp0(all_panels[j].name, (const char *)word)) {
+                    contains = TRUE;
+                    break;
+                }
+            }
+            if(!contains) {
+                GDesktopAppInfo *app;
+                char *desktop_name;
+                int category;
+
+                desktop_name = g_strconcat ("gnome-", word,
+                        "-panel.desktop", NULL);
+                app = g_desktop_app_info_new (desktop_name);
+                g_free (desktop_name);
+
+                if (app == NULL)
+                {
+                    g_warning ("Ignoring broken panel %s (missing desktop file)",
+                            all_panels[i].name);
+                    continue;
+                }
+
+                category = parse_categories (app);
+                if (G_UNLIKELY (category < 0))
+                    continue;
+
+                cc_shell_model_add_item (model, category, G_APP_INFO (app), word);
+                g_object_unref (app);
+
+
+            }
+        }
+    }
+  }
 }
 
 #ifndef CC_PANEL_LOADER_NO_GTYPES
@@ -208,12 +280,14 @@
   ensure_panel_types ();
 
   get_type = g_hash_table_lookup (panel_types, name);
-  g_return_val_if_fail (get_type != NULL, NULL);
-
+  //g_return_val_if_fail (get_type != NULL, NULL);
+  if(get_type)
   return g_object_new (get_type (),
                        "shell", shell,
                        "parameters", parameters,
                        NULL);
+  else
+    return NULL;
 }
 
 void
@@ -226,10 +300,12 @@
     {
       GType (*get_type) (void);
       get_type = all_panels[i].get_type;
+      if(get_type) {
       GOptionGroup *group = cc_panel_get_option_group (get_type(), builder);
       if (group == NULL)
         continue;
       g_option_context_add_group (context, group);
+      }
     }
 }
 
diff -Nur gnome-control-center-3.12.1/shell/cc-window.c gnome-control-center-3.12.1.new/shell/cc-window.c
--- gnome-control-center-3.12.1/shell/cc-window.c	2014-03-04 21:58:03.000000000 +0800
+++ gnome-control-center-3.12.1.new/shell/cc-window.c	2014-07-21 16:53:31.285069853 +0800
@@ -154,6 +154,16 @@
     return FALSE;
 
   priv->current_panel = GTK_WIDGET (cc_panel_loader_load_by_name (CC_SHELL (self), id, parameters));
+  if(!priv->current_panel) {
+      GDesktopAppInfo *app;
+      char *desktop_name;
+      desktop_name = g_strconcat ("gnome-", id,
+                                  "-panel.desktop", NULL);
+      app = g_desktop_app_info_new (desktop_name);
+      const gchar *command = g_app_info_get_commandline(G_APP_INFO(app));
+      g_spawn_command_line_async(command, NULL);
+      return FALSE;
+  }
   cc_shell_set_active_panel (CC_SHELL (self), CC_PANEL (priv->current_panel));
   gtk_widget_show (priv->current_panel);
 
